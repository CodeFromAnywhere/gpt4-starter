{
  "createdAt": 1678330235977,
  "updatedAt": 1678330235977,
  "deletedAt": 0,
  "createdFirstAt": 1678330235977,
  "isApiExposed": false,
  "isExported": true,
  "operationRelativeTypescriptFilePath": "src/queue/checkQueue.ts",
  "commentsInside": [],
  "rawText": " async () => {\n  const batteryPercentage = await getBatteryLevelPercentage();\n\n  if (batteryPercentage < 0.2) {\n    console.log(`ðŸ”‹ Battery level too low, not doing anything from queue`);\n    return;\n  }\n\n  const allQueueItems = (await db.get(\"Queue\"))\n    .sort((a, b) => (a.priority === \"high\" ? 1 : -1))\n    .map((item) => {\n      const fn = sdk[item.functionName as keyof typeof sdk] as\n        | ProjectWatcher\n        | undefined;\n\n      return { item, fn };\n    });\n\n  const isOffline = !(await isOnline());\n  const isBusy = await isSystemBusy();\n  const isUsingBattery = await isSystemUsingBattery();\n\n  const keysToCount: (keyof StandardFunctionConfig)[] = [\n    \"isInternetRequired\",\n    \"isHeavy\",\n    \"isBrowserRequired\",\n    \"isDisabled\",\n  ];\n  const queueSummary: { [key in keyof QueueFunctionConfig]: number } =\n    mergeObjectsArray(\n      keysToCount.map((key) => ({\n        [key]: allQueueItems.filter((x) => x.fn?.config?.[key]).length,\n      }))\n    );\n\n  const queueAfterInternetStatus = isOffline\n    ? allQueueItems.filter((x) => !x.fn?.config?.isInternetRequired)\n    : allQueueItems;\n\n  const startTime = Date.now();\n\n  /**\n   * Only get heavy items if system isn't busy and not using battery\n   */\n  const heavyItems =\n    isBusy || isUsingBattery\n      ? []\n      : queueAfterInternetStatus.filter((x) => {\n          return x.fn?.config?.isHeavy;\n        });\n\n  const regularQueueItems = queueAfterInternetStatus.filter((x) => {\n    const config = x.fn?.config;\n    if (config?.isBrowserRequired || config?.isHeavy) return false;\n    return true;\n  });\n\n  const browserQueueItems = queueAfterInternetStatus.filter((x) => {\n    return x.fn?.config?.isBrowserRequired;\n  });\n\n  // NB: later useful instead of 1:\n  // const idlePages = (await db.get(\"BrowserPage\")).filter((p) => p.isIdle);\n  const browserRunnableNowAmount = 1; //idlePages.length\n  const browserItemsToExecute =\n    isBusy || isUsingBattery\n      ? []\n      : browserQueueItems.slice(0, browserRunnableNowAmount);\n\n  const queueItemsToExecute = [\n    ...heavyItems,\n    ...browserItemsToExecute,\n    ...regularQueueItems,\n  ].filter(notEmpty);\n\n  const executableQueueCount = queueItemsToExecute.length;\n\n  const queueStatus: QueueStatus = {\n    updatedAt: Date.now(),\n    serverStatus: { isOffline, isBusy, isUsingBattery },\n    totalQueueCount: allQueueItems.length,\n    queueSummary,\n    executableQueueCount,\n  };\n\n  await writeJsonToFile(\n    path.join(__dirname, \"../..\", \"assets\", \"queueStatus.json\"),\n    queueStatus\n  );\n\n  if (executableQueueCount === 0) {\n    return;\n  }\n\n  const lateQueueItemsToNotify = allQueueItems.filter(\n    (x) =>\n      x.item.notifyLateAfterSeconds &&\n      Date.now() - x.item.createdAt > x.item.notifyLateAfterSeconds * 1000 &&\n      !x.item.hasNotifiedLate\n  );\n\n  // 1. check how many chrome tabs are available (according to OS settings / memory limit)\n\n  if (browserRunnableNowAmount < lateQueueItemsToNotify.length) {\n    //email the ones that won't be executed\n    console.log(\n      {\n        browserRunnableNowAmount,\n        lateQueueItemsToNotify: lateQueueItemsToNotify.length,\n      },\n      \"SHOULD EMAIL SOME THAT CAN'T BE EXECUTED AND PUT THEM ON NOTIFIED WITH ETA\"\n    );\n  }\n\n  // 2. check how many queue items can be executed now, and sort by importancy\n  // NB: limit to 1 for now to test if that works\n\n  console.log(`Executing ${queueItemsToExecute.length} from queue, one by one`);\n\n  // 3. take the ones that are most important and execute those, only for a minute!\n\n  await oneByOne(queueItemsToExecute, async (queue) => {\n    const fn = queue.fn as ((...parameters: any[]) => any) | undefined;\n\n    if (!fn) {\n      console.log(\"fn not found\", queue.item?.functionName);\n      return;\n    }\n\n    if (Date.now() > startTime + 60000) {\n      // time's up! skip the rest, because this function starts again.\n      return;\n    }\n\n    console.log(\n      `run ${queue.item.functionName} ${queue.item.parameters?.[1] || \"\"}`\n    );\n\n    await fn(...queue.item.parameters);\n\n    // after it's done, remove from queue\n    const removeResult = await db.remove(\n      \"Queue\",\n      (item) => queue.item.id === item.id\n    );\n  });\n}",
  "name": "checkQueue",
  "slug": "check-queue",
  "parameters": [],
  "description": "Cron that runs every minute for executing queue items.\n\nRegular items: It will execute max `MAX_REGULAR_ITEMS_AMOUNT`\n\nBrowser items: You can set the amount of tabs it should have as a limit, and it will keep the tabs open afterwards, but after the thing is done it will just remove the item from the `Queue`.\n\nHeavy items: functions with `.isHeavy: true` inside. Will execute max 1 every minute if the system isn't busy already.\n\n- sort on priority high first\n- filter out internet items if we are offline\n- find single heavy item if it's there and if we're not busy\n- find up to N (amount tabs available) queue items that require browser",
  "returnType": {
    "rawType": "any",
    "typeCoverage": 0,
    "isArray": false,
    "isEnum": false,
    "isObject": false,
    "isPrimitive": false,
    "isEnumLiteral": false
  },
  "maxIndentationDepth": 5,
  "size": {
    "characters": 4817,
    "lines": 158,
    "bytes": 4819,
    "bytesPerCharacter": 1.000415196180195,
    "charactersPerLine": 30,
    "linesPerFile": 158,
    "numberOfFiles": 1
  },
  "id": "pakhhjjqlacpbujwgmddbfzq"
}