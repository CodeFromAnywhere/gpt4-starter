{
  "createdAt": 1678369228876,
  "updatedAt": 1678369228876,
  "deletedAt": 0,
  "createdFirstAt": 1678369228876,
  "isApiExposed": false,
  "isExported": true,
  "operationRelativeTypescriptFilePath": "src/util/getGroupOrPersonId.ts",
  "commentsInside": [],
  "rawText": " async (absoluteAudioFilePath: string) => {\n  const projectRoot = getProjectRoot();\n  if (!projectRoot) {\n    return { groupId: undefined, personId: undefined };\n  }\n\n  const projectRelativeFilePath = makeRelative(\n    absoluteAudioFilePath,\n    projectRoot\n  );\n  const chunks = projectRelativeFilePath.split(\"/\");\n  const persons = await db.get(\"Person\");\n  const groups = await db.get(\"Group\");\n  const groupSlug = projectRelativeFilePath.startsWith(\"knowledge/groups/\")\n    ? chunks[2]\n    : undefined;\n\n  const groupId = groupSlug\n    ? groups.find((x) => x.slug === groupSlug)?.id\n    : undefined;\n  const slug = projectRelativeFilePath.startsWith(\"knowledge/users/\")\n    ? chunks[2]\n    : undefined;\n  const personId = slug ? persons.find((x) => x.slug === slug)?.id : undefined;\n\n  return { groupId, personId };\n}",
  "name": "getGroupOrPersonId",
  "slug": "get-group-or-person-id",
  "parameters": [
    {
      "name": "absoluteAudioFilePath",
      "schema": {
        "type": "string"
      },
      "simplifiedSchema": {
        "type": "string"
      },
      "required": true
    }
  ],
  "description": "calculate groupId/personId this based on the path (/knowledge/users/[email]/*, etc)",
  "returnType": {
    "rawType": "unknown",
    "typeCoverage": 0,
    "isArray": false,
    "isEnum": false,
    "isObject": false,
    "isPrimitive": false,
    "isEnumLiteral": false
  },
  "maxIndentationDepth": 2,
  "size": {
    "characters": 904,
    "lines": 27,
    "bytes": 904,
    "bytesPerCharacter": 1,
    "charactersPerLine": 33,
    "linesPerFile": 27,
    "numberOfFiles": 1
  },
  "id": "muoiiavtmhtxtztmpmkgrigf"
}