{
  "createdAt": 1678369217210,
  "updatedAt": 1678369217210,
  "deletedAt": 0,
  "createdFirstAt": 1678369217210,
  "isApiExposed": false,
  "isExported": true,
  "operationRelativeTypescriptFilePath": "src/speechToText.ts",
  "commentsInside": [],
  "rawText": " async (\n  absoluteAudioFilePath: string\n): Promise<StandardResponse> => {\n  if (\n    (await shouldAddToQueue(\"speechToText\", [absoluteAudioFilePath])) === true\n  ) {\n    console.log(\"mmm added to queue\", absoluteAudioFilePath);\n\n    // it's been added to queue, to be done later.\n    return { isSuccessful: false, message: \"Added to queue\" };\n  }\n\n  const mbs = fs.existsSync(absoluteAudioFilePath)\n    ? (await fs.stat(absoluteAudioFilePath)).size / (1024 * 1024)\n    : undefined;\n  const hours = (mbs || 0) / 60;\n  const priceCredit = hours;\n\n  const { groupId, personId } = await getGroupOrPersonId(absoluteAudioFilePath);\n\n  const result = await createTranscriptionJson(absoluteAudioFilePath);\n  if (!result.isSuccessful) {\n    lockError(\n      absoluteAudioFilePath,\n      result.message,\n      undefined,\n      \"speechToText\",\n      [absoluteAudioFilePath]\n    );\n  }\n  return {\n    ...result,\n    payment: {\n      priceCredit,\n      groupId,\n      personId,\n      priceDescription: `Your audio was around ${mbs} minutes`,\n    },\n  };\n}",
  "name": "speechToText",
  "slug": "speech-to-text",
  "parameters": [
    {
      "name": "absoluteAudioFilePath",
      "schema": {
        "type": "string"
      },
      "simplifiedSchema": {
        "type": "string"
      },
      "required": true
    }
  ],
  "description": "Uses local whisper, for now. Audiofile must be 16-bit wav\n\nNB: I have the queueing on this layer, but if we later have faster ones that don't need a queue because they don't cost much processing power, we can add it on the individual stt level",
  "returnType": {
    "rawType": "Promise<import(\"/Users/clarity/os/operations/tools/purpose/codebase-introspection/functions/function-types/build/StandardResponse\").StandardResponse>",
    "typeCoverage": 0,
    "isArray": false,
    "isEnum": false,
    "isObject": false,
    "isPrimitive": false,
    "isEnumLiteral": false
  },
  "maxIndentationDepth": 3,
  "size": {
    "characters": 1286,
    "lines": 42,
    "bytes": 1286,
    "bytesPerCharacter": 1,
    "charactersPerLine": 31,
    "linesPerFile": 42,
    "numberOfFiles": 1
  },
  "id": "rinjciiundlmlmimqcuupobt"
}