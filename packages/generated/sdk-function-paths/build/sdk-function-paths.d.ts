export declare const sdkFunctionPaths: {
    executeCronFunction: string;
    firstCoreFunction: string;
    prodCli: string;
    prod: string;
    runFunctionServerCli: string;
    runFunctionServerDevCli: string;
    runFunctionServerDev: string;
    runFunctionServer: string;
    scheduleCronJobs: string;
    startSearchWebIfAvailable: string;
    DbAndUpsert: string;
    Flow: string;
    FormTab: string;
    FunctionExecutionTable: string;
    FunctionLayout: string;
    FunctionPage: string;
    getTimelineItems: string;
    HomePage: string;
    MyApp: string;
    MyLayout: string;
    searchGetStaticProps: string;
    Test: string;
    useMe: string;
    addEmojiToEveryWord: string;
    addStatement: string;
    addWord: string;
    biggestFunctionName: string;
    checkQueue: string;
    cleanup: string;
    controlChatGptWrapper: string;
    deletePromptResult: string;
    developersQuote: string;
    diaryToInstagram: string;
    documentationWriting: string;
    emojiAugmentation: string;
    explainInDutch: string;
    explainInNepali: string;
    explainInPortuguese: string;
    explainLineByLine: string;
    explain: string;
    fixGrammarAndSpellingMistakes: string;
    followUpQuestions: string;
    getCategoriesTest: string;
    getContextualPromptCategories: string;
    getContextualPromptResultJsonFilePath: string;
    getContextualPrompt: string;
    getObjectForkKeyRecursively: string;
    getQueueStatus: string;
    getToolFunctions: string;
    haiku: string;
    hookOneliners: string;
    improveCode: string;
    investorPitch: string;
    marcusAurelius: string;
    opposite: string;
    outlineToInvestorPitch: string;
    poem: string;
    processChatGptPrompt: string;
    processPromptOnFile: string;
    processPromptOnFolderWithContext: string;
    quiz: string;
    removeAllFake: string;
    rickAndMortyRick: string;
    rickAndMorty: string;
    setIsFavoritePromptResult: string;
    shouldAddToQueue: string;
    socratesAndSnoopDogg: string;
    storytelling: string;
    summarizeMeetingWithContext: string;
    test: string;
    toolFunctionWithContext: string;
    translateEverythingIntoHindi: string;
    translateEverythingPortuguese: string;
    translateEverything: string;
    translateToPortuguese: string;
    typescriptExplain: string;
    williamShakespear: string;
    writeContextualPromptSdk: string;
    writeCreatePromptCode: string;
    ye: string;
    yodafy: string;
    getGroupOrPersonId: string;
    imageToText: string;
    languageTranslation: string;
    musicTrackSeparation: string;
    speakerSeparation: string;
    speechToText: string;
    textToImage: string;
    textToSpeech: string;
    textToText: string;
    copyCopyPairs: string;
    copyReaderStaticAssets: string;
    findReaderStaticAssets: string;
    findStaticAssets: string;
    receiveTwilioMessageWithContextRaw: string;
    sendMailTest: string;
    sendMail: string;
    sendMessage: string;
    sendSms: string;
    sendTwilioMessage: string;
    trySendMessage: string;
    calculateMessagesTokenCount: string;
    calculateOpenaiMessagesTokenCountSum: string;
    calculateOpenaiMessagesTokenCount: string;
    calculateTokenCount: string;
    chatCompletion: string;
    chat: string;
    getOpenaiInstance: string;
    gpt3: string;
    messagesToTokenableText: string;
    whisper: string;
    executeWatcherOnFilepath: string;
    getQueueItems: string;
    watchAllCli: string;
    watchAll: string;
    watchAudioVideoDoc: string;
    watchMp3WithoutWav: string;
    watchMp4WithoutWav: string;
    watchWavToSpeakers: string;
    watchWavToSpeech: string;
    watchWavWithoutMp3: string;
    exploreBadNamingFiles: string;
    isBadName: string;
    main: string;
    renameAllBadlyNamedFiles: string;
    renameBadlyNamedFile: string;
    watchBadNaming: string;
    getBetterLocation: string;
    getIsPrivate: string;
    makeMarkdownIndexCli: string;
    makeMarkdownIndex: string;
    watchMarkdown: string;
    getRecordingType: string;
    transcriptionToGptChunks: string;
    watchMp3Transcriptions: string;
    getYoutubeVideoUrls: string;
    watchAppleMemos: string;
    createTranscriptionJsonCli: string;
    createTranscriptionJson: string;
    getTranslationText: string;
    isWav16bit: string;
    readTranscriptionCsv: string;
    whisperLocalCpp: string;
    allOperationsRemoveJsSrc: string;
    allOperationsToMarkdown: string;
    clearAllTsDatabases: string;
    codeAll: string;
    forAllFiles: string;
    forAllFolders: string;
    getAllOperationClassifications: string;
    gitShipAllRepos: string;
    mdAllOperations: string;
    minifyAllOperations: string;
    publishAllOperations: string;
    removeAllFiles: string;
    removeAllFoldersCli: string;
    removeAllFolders: string;
    removeAll: string;
    renameAll: string;
    runScriptEverywhere: string;
    setScriptEverywhere: string;
    fn1: string;
    fn2: string;
    fn3: string;
    untypedApiFunction: string;
    getGetApiUrl: string;
    AppsMenu: string;
    askOk: string;
    ask: string;
    getArgumentOrAsk: string;
    addToken: string;
    ensureToken: string;
    findAssetParametersRecursively: string;
    getAssetDirectlyApiUrl: string;
    getConversionInfoFromType: string;
    getExtensionFromAsset: string;
    getNameFromRelativePath: string;
    getNameWithTokenFromRelativePath: string;
    getReferencedAssetApiUrl: string;
    getTypeFromUrlOrPath: string;
    readableSize: string;
    removeTokenIfPresent: string;
    compressAsset: string;
    createDownloadWithContext: string;
    deleteReferencedAsset: string;
    downloadGetApi: string;
    downloadRemoteAsset: string;
    findAbsoluteAssetPathFromReference: string;
    findAllProjectMedia: string;
    findDownload: string;
    getAssetDirectlyGetApi: string;
    getReferencedAssetGetApi: string;
    getStorageLocationInfo: string;
    getTemporaryAssetsFolderPath: string;
    makeDownloadableFile: string;
    processAsset: string;
    processItemAssets: string;
    removeOldTemporaryAssets: string;
    serverDownloadReply: string;
    uploadAssetWithContext: string;
    AssetInput: string;
    Audio: string;
    base64UrltoBlob: string;
    FileInput: string;
    getTypeFromFileBlob: string;
    makeBackendAsset: string;
    MediaRecorderComponent: string;
    MediaRecorder: string;
    ReactMediaRecorder: string;
    SelectMedia: string;
    useReactMediaRecorder: string;
    VideoPreview: string;
    Video: string;
    WebcamCapture: string;
    AssetView: string;
    getSrc: string;
    InteractiveAsset: string;
    itemGetBackendAssetUrl: string;
    ModelItemAssetView: string;
    TranscriptionSentence: string;
    useAssetInfo: string;
    useAsset: string;
    getAugmentedWordObject: string;
    getAugmentedWords: string;
    getBundleAugmentedWords: string;
    ConfirmForm: string;
    LoginForm: string;
    LoginWrapper: string;
    MeAuthenticationInfo: string;
    PersonProfileDetailsForm: string;
    PictureWithInfoDropdown: string;
    PublicPersonComponent: string;
    PublicProfile: string;
    SignupForm: string;
    UpdateMeForm: string;
    bananaCarrot: string;
    bananaStableDiffusion: string;
    bananaWhisper: string;
    getBatteryLevelPercentage: string;
    isSystemUsingBattery: string;
    BigButton: string;
    BreadCrumbs: string;
    renderBreadCrumbs: string;
    getBundleSummary: string;
    getDbModelsForBundle: string;
    bahasaTeacher: string;
    commandResult: string;
    defaultAssistant: string;
    elonGpt: string;
    englishTeacher: string;
    generateInstantResponseMessage: string;
    getChatMessageAnalysis: string;
    getChatResult: string;
    getCostPerMessageCredit: string;
    getCredit: string;
    getMessageLimitInfo: string;
    getMessagesAmountCheap: string;
    getMessagesAmountMore: string;
    getMinimumCredit: string;
    getPaywallResult: string;
    getPersonaStatistics: string;
    getSystemMessageOtherLanguage: string;
    getSystemMessage: string;
    jsonGpt: string;
    languageTeacher: string;
    proactiveOutreach: string;
    processMessageAfterChat: string;
    processMessage: string;
    sendChatAiStatsUpdate: string;
    sendDailyAlarmSms: string;
    truncateMessages: string;
    weeklyMail: string;
    getChatMessagesPath: string;
    getChatMessages: string;
    getPersonPath: string;
    getPersonSlug: string;
    getPerson: string;
    insertChatMessages: string;
    setPerson: string;
    chatGPTAuth: string;
    detectChatGptPage: string;
    openAIChat: string;
    execAsync: string;
    spawnAsync: string;
    cleanupTsDatabase: string;
    shouldDeleteTsModel: string;
    ClickableIcon: string;
    stripCommentEnd: string;
    stripCommentStart: string;
    stripComment: string;
    stripSlashes: string;
    stripStar: string;
    trimSurroundingNewlines: string;
    trim: string;
    getCompileErrors: string;
    getTypescriptErrorsFromFiles: string;
    writeBuildErrors: string;
    ContextMenuItemComponent: string;
    useContextMenu: string;
    useContextPopper: string;
    useContext: string;
    camelCase: string;
    capitalCase: string;
    capitaliseFirstLetter: string;
    convertCase: string;
    convertToTargetCasing: string;
    fileSlugify: string;
    getDelimiter: string;
    humanCase: string;
    kebabCase: string;
    lowerCaseArray: string;
    pascalCase: string;
    slugify: string;
    snakeCase: string;
    splitCasingDelimiters: string;
    errorToast: string;
    infoToast: string;
    showStandardResponse: string;
    successToast: string;
    warningToast: string;
    csvItemArrayToCsvString: string;
    tryParseCsv: string;
    generateCsvInstance: string;
    generateJsonSingleInstance: string;
    generateKvmdInstance: string;
    generateMarkdownInstance: string;
    generateSlugTestModel: string;
    getCli: string;
    getMergedQueryConfig: string;
    getRanomAge: string;
    get: string;
    migration: string;
    randomName: string;
    removeCli: string;
    runModelEndToEndTest: string;
    set: string;
    testOperationModels: string;
    testPerformance: string;
    updateCli: string;
    upsertCli: string;
    upsert: string;
    CrudGrid: string;
    CrudTable: string;
    CrudTimeline: string;
    CrudTree: string;
    DatasetForm: string;
    DbPage: string;
    getPropertiesDataParameterNames: string;
    IndexInstanceContainer: string;
    ModelComponent: string;
    openWhatsapp: string;
    SearchBar: string;
    shimmer: string;
    SimplifiedSchemaFormDebug: string;
    sortToItem: string;
    SpaceCard: string;
    toBase64: string;
    UpsertForm: string;
    UpsertPage: string;
    useInfiniteGetDbModel: string;
    useModelFromUrl: string;
    useUrl: string;
    cacheLookup: string;
    calculateOperatingSystemBundle: string;
    deleteDbModelWithContext: string;
    getCachedFunctions: string;
    getDatabaseMenu: string;
    getDbModelMetadataWithContext: string;
    getDbModelNames: string;
    getDbModelWithContext: string;
    getFunctionIndex: string;
    getNestedDatabaseMenu: string;
    getReferencableModelDataWithContext: string;
    getTsInterface: string;
    hasDataPermissions: string;
    hasDbRecipes: string;
    makeSrcRelativeFolder: string;
    testFn: string;
    tsInterfaceToDbMenu: string;
    upsertDbModelWithContext: string;
    validateInput: string;
    validateResult: string;
    wrapFunction: string;
    filterInterfacesFromOperationNames: string;
    getDbModelsFromOperations: string;
    detectFolderLanguage: string;
    detectLanguage: string;
    docToMd: string;
    docxToMd: string;
    runTests: string;
    docsGetPages: string;
    getMarkdownReaderPages: string;
    getPublicMarkdownFilePaths: string;
    removeExtensionsFromPath: string;
    removeNumberPrefix: string;
    shouldExposeMarkdownFile: string;
    stripReadmeFromFolder: string;
    mapArrayJson: string;
    mapObjectJson: string;
    exploreOperation: string;
    exploreProject: string;
    getExplorationType: string;
    getFileWithExtension: string;
    getFolderExplorationDetails: string;
    getFrontmattersMappedObject: string;
    getInstanceNames: string;
    getProjectRelativePaths: string;
    getTodoPages: string;
    getTodoPaths: string;
    hasSameProjectPath: string;
    useCustomProjectRelativeBaseFolderPath: string;
    useEditor: string;
    useQueryPath: string;
    ContentSearch: string;
    Explorer: string;
    FolderMenu: string;
    FoldersPiece: string;
    NavButton: string;
    PathSearch: string;
    QueueStatusComponent: string;
    RecentPinned: string;
    SearchResultComponent: string;
    SearchResultPage: string;
    setConfig: string;
    SettingsPage: string;
    FancyLoader: string;
    compressConvert: string;
    compressImagesCli: string;
    compressImages: string;
    compressMp4: string;
    compressMp4sCli: string;
    convertToMp3: string;
    convertToMp4: string;
    getFileCollectionPathsWithContext: string;
    getFileCollectionStatusWithContext: string;
    getFileCollectionWithContext: string;
    getFolderContents: string;
    getFolderFileCollections: string;
    getNavigationWithContext: string;
    getOpenFilesWithContext: string;
    getQueryInfo: string;
    removeInactiveOpenFiles: string;
    setOpenFileWithContext: string;
    getFileCollectionBasename: string;
    getFileCollectionPaths: string;
    getMarkdownIndexPath: string;
    getMarkdownIndex: string;
    getOnlyUniqueFileCollectionsFromDirentsFilter: string;
    getPrimaryFileFromFileCollection: string;
    isFileCollection: string;
    onlyUniqueFileCollectionsFilter: string;
    readFolderFileCollections: string;
    renameFileCollectionWithContext: string;
    renameFileCollection: string;
    updateMarkdownIndex: string;
    fileExplorerOpen: string;
    getFileType: string;
    MatchingText: string;
    PathSearchResults: string;
    FileTabs: string;
    getActivePage: string;
    getOpenPageUrl: string;
    renderIcon: string;
    OpenFileWriterPages: string;
    useFileWriter: string;
    WriterLayout: string;
    getFileTypeFromPath: string;
    getWriterType: string;
    hasSubExtension: string;
    isGeneratedOperationName: string;
    isGeneratedOperation: string;
    isIndexableFileId: string;
    findAllDependencyOperations: string;
    findDependantsRecursivelyTest: string;
    findDependantsRecursively: string;
    findDependants: string;
    findDependenciesRecursively: string;
    findMonorepoExports: string;
    findMonorepoImports: string;
    findMonorepoModules: string;
    getDependencyObject: string;
    getDependencyTree: string;
    getOldDependencyTree: string;
    getOperationDependencyReasons: string;
    test2: string;
    folderGetUpdatedAt: string;
    frontmatterParseToString: string;
    frontmatterToObject: string;
    getFrontmatterValueString: string;
    markdownModelTypeToMarkdownString: string;
    objectToFrontmatter: string;
    parseFrontmatterString: string;
    quotedOrNot: string;
    stringifyNewlines: string;
    getFsAuthorizationSingleFile: string;
    getFsAuthorizationTestables: string;
    getFsAuthorizationWithContext: string;
    addDefaultValues: string;
    alterAny: string;
    alterCsv: string;
    alterJsonMultiple: string;
    alterJsonSingle: string;
    alterKeyValueMarkdown: string;
    alterMarkdown: string;
    augmentItemWithReferencedDataRecursively: string;
    calculateOperationsObject: string;
    createDb: string;
    findParent: string;
    getAugmentedData: string;
    getDatabaseFiles: string;
    getDatabaseRootFolder: string;
    getDbFileLocation: string;
    getDbStorageMethodExtension: string;
    getDefaultLocationPattern: string;
    getItemModelLocation: string;
    getLength: string;
    getLocationPattern: string;
    getMergedConfigOperationPath: string;
    getParentSlug: string;
    getRootFolders: string;
    getWildcardDbFileLocations__OLD: string;
    getWildcardDbFileLocations: string;
    groupByFile: string;
    makeStoringItem: string;
    mergeConfigs: string;
    removeKeyValueMarkdown: string;
    removeMultiple: string;
    upsertItems: string;
    upsertKeyValueMarkdown: string;
    waitForLockfile: string;
    canAccessSync: string;
    canAccess: string;
    canExecuteSync: string;
    canExecute: string;
    canReadSync: string;
    canRead: string;
    canSeeSync: string;
    canSee: string;
    canWriteSync: string;
    canWrite: string;
    copyAllRelativeFiles: string;
    fileExistsWithCaseSync: string;
    findClosestAbsolutePath: string;
    findFileNameCaseInsensitive: string;
    getAllFoldersUntilFolder: string;
    getFileName: string;
    getFirstAvailableFilename: string;
    getFirstFile: string;
    getFolderSizeObject: string;
    getFolderSize: string;
    getFolder: string;
    getLastFolder: string;
    getOneFolderUpPath: string;
    getPathCombinations: string;
    oneUp: string;
    parseMd: string;
    readFilePerLine: string;
    readFrontmatter: string;
    removeAllExcept: string;
    renameAndCreate: string;
    returnReadmePathFromFolder: string;
    writeJsonToFile: string;
    writeStringToFile: string;
    writeToFiles: string;
    getExtension: string;
    getFileOrFolderName: string;
    getFolderJs: string;
    getSubExtension: string;
    isPathRelative: string;
    join: string;
    makeRelative: string;
    removeTrailingSlash: string;
    withoutExtension: string;
    withoutSubExtensions: string;
    FunctionForm: string;
    getFileFunctions: string;
    getFunctionExecutions: string;
    getFunctionQueryPaths: string;
    getPublicBundleConfig: string;
    getSrcRelativeFolderPath: string;
    getTsFunction: string;
    isPathParameter: string;
    calculateDeviceName: string;
    executeFunctionWithParameters: string;
    getAuthorizationInfo: string;
    isGetEndpoint: string;
    isRawEndpoint: string;
    savePageVisit: string;
    storeFunctionExecution: string;
    upsertDevice: string;
    getExamples: string;
    getFunctionExersize: string;
    converse: string;
    doCli: string;
    executeSdkFunction: string;
    getCachedExportedFunctions: string;
    getMenu: string;
    getParametersAndExecute: string;
    getParameters: string;
    getSdkFunctionPaths: string;
    listen: string;
    generateNamedIndex: string;
    generateSimpleIndex: string;
    isTestFn: string;
    mapToImportStatement: string;
    augmentMarkdown: string;
    getContextualPromptResults: string;
    getContextualPromptsArray: string;
    getContextualPrompts: string;
    getFolderRelativeScopeDbFilePath: string;
    makeMarkdownLink: string;
    Dataset: string;
    Details: string;
    FileActions: string;
    FileCollectionActions: string;
    FileCollectionPage: string;
    FileSpecificPrompts: string;
    FileWriter: string;
    getReaderPageInfo: string;
    openDownload: string;
    PromptButton: string;
    PromptViewer: string;
    SelectionPrompts: string;
    TextFile: string;
    TextWriter: string;
    TranscriptionPlayer: string;
    updateFrontmatter: string;
    useOnFocus: string;
    useVariantResult: string;
    VariantSelector: string;
    getImportedDependencies: string;
    getPackage: string;
    isAbsoluteImport: string;
    calculatePackageJsonDependencies: string;
    findAndWriteImportsExports: string;
    getDefaultSymbolType: string;
    getExportSpecifierNames: string;
    getExportSymbolTypeRecursive: string;
    getImportSpecifiersWithNames: string;
    getImportsExportsTest: string;
    getImportsExports: string;
    getPackageNameFromAbsoluteImport: string;
    getSymbolDeclarationsOfKind: string;
    getSymbolTypeDeclarations: string;
    getTypeFromImportSpecifierRecursive: string;
    isAbsoluteImportBuiltin: string;
    isImportFromOptionalFile: string;
    isImportGenerated: string;
    writeResult: string;
    getOperationBins: string;
    getOperationPackageName: string;
    getPackageJson: string;
    getPackageSourcePaths: string;
    findFolderWhereMatch: string;
    findOperationBasePathWithClassification: string;
    findOperationBasePath: string;
    getAllPackageJsonDependencies: string;
    getCommonAncestorMultiple: string;
    getCommonAncestor: string;
    getFolderPath: string;
    getOperationClassificationObject: string;
    getOperationClassification: string;
    getOperationPathParse: string;
    getOperationPath: string;
    getOperationRelativePath: string;
    getPathParse: string;
    getPathsWithOperations: string;
    getProjectRoot: string;
    getRelativeLinkPath: string;
    getRelativePath: string;
    getRootPath: string;
    getSrcRelativeFileId: string;
    getSubExtensions: string;
    hasDependency: string;
    hasProjectRootFile: string;
    isBundle: string;
    isOperation: string;
    isUiOperation: string;
    isWorkspaceRoot: string;
    packageCompilesTs: string;
    tsconfigCompilesEsm: string;
    getTsConfig: string;
    getAllOperations: string;
    getAllPackagesNames: string;
    getGithubPersonalAccessToken: string;
    getGithubRepoLastCommitInfo: string;
    getRepoNameFromRepositoryUrl: string;
    initializeGitOrUseExistingAndPull: string;
    initializeGitOrUseExistingAndPush: string;
    operationGithubPull: string;
    operationGithubPush: string;
    pullMultipleOperations: string;
    pushMultipleOperations: string;
    readAndWriteToPackageJsonExample: string;
    updateAllOperationStatusTest: string;
    updateAllOperationStatus: string;
    isAltB: string;
    isAltN: string;
    isAltO: string;
    isAltW: string;
    isCtrlBacktick: string;
    isCtrlP: string;
    isCtrlS: string;
    isCtrlSpace: string;
    useHotkey: string;
    useHotkeys: string;
    huggingfaceSpeakerDiarization: string;
    request: string;
    cli: string;
    findAndUpsertTsInterfaces: string;
    findCommentTypes: string;
    generateSchema: string;
    getAllComments: string;
    getDbStorageMethod: string;
    getFrontmatterDbStorageMethod: string;
    getFrontmatterFunctionParameters: string;
    getIndexId: string;
    getMaxIndentationDepth: string;
    getMinMaxValidation: string;
    getNumberOfLines: string;
    getObjectSchema: string;
    getParamSchema: string;
    getParametersFromInterfaces: string;
    getPossibleRefs: string;
    getSizeSummary: string;
    getSpecialExtensionDbStorageMethod: string;
    getTsStatements: string;
    getTypeInfo: string;
    getValidatedOperationPathParse: string;
    handleExplicitValidation: string;
    hasDefinition: string;
    hasTypescriptFileChanged: string;
    indexImportsExportsForFilePath: string;
    indexTypescriptFilePath: string;
    indexTypescriptFile: string;
    indexTypescript: string;
    isPrimitive: string;
    makeTsComment: string;
    removeTypescriptIndex: string;
    schemaToTsInterface: string;
    toSnack: string;
    tryCreateSchema: string;
    typeToSchema: string;
    fetchWithTimeout: string;
    isOnline: string;
    isSystemBusy: string;
    apply: string;
    arrayGenerator: string;
    concatenate: string;
    createEnum: string;
    createMappedObject: string;
    destructureOptionalObject: string;
    findLastIndex: string;
    getCurrentDate: string;
    getObjectFromParamsString: string;
    getObjectKeysArray: string;
    getParameterAtLocation: string;
    getSubsetFromObject: string;
    groupByKey: string;
    hasAllLetters: string;
    insertAt: string;
    isAllTrue: string;
    isArrayEqual: string;
    makeArray: string;
    mapAsync: string;
    mapItem: string;
    mapKeys: string;
    mapMany: string;
    mapValuesSync: string;
    mergeNestedObjectTest: string;
    mergeNestedObject: string;
    mergeObjectParameters: string;
    mergeObjectsArray: string;
    mergeObjects: string;
    noEmptyString: string;
    notEmpty: string;
    objectMapAsync: string;
    objectMapSync: string;
    objectValuesMap: string;
    omitUndefinedValues: string;
    onlyDuplicates: string;
    onlyUnique2: string;
    onlyUnique: string;
    pickRandomArrayItem: string;
    putIndexAtIndex: string;
    removeIndexFromArray: string;
    removeOptionalKeysFromObjectStrings: string;
    removeOptionalKeysFromObject: string;
    replaceLastOccurence: string;
    reverseString: string;
    sumAllKeys: string;
    sumObjectParameters: string;
    sum: string;
    takeFirst: string;
    trimSlashes: string;
    worker: string;
    getSimpleJsonString: string;
    benchmark: string;
    determineFileType: string;
    exploreGitRepoFolders: string;
    exploreMultiple: string;
    exploreOperationFolders: string;
    explorePreset: string;
    explore: string;
    findAllDocsFolderPaths: string;
    findAllDotGitFolders: string;
    findAllFoldersWithName: string;
    findAllPackages: string;
    findAllTodoFolderPaths: string;
    findFilesRecursively: string;
    getArgument: string;
    getContents: string;
    getFolderTypescriptFiles: string;
    getOutline: string;
    isMatch: string;
    isSearchContentExtension: string;
    pathArrayIsOperation: string;
    runTestsForOperation: string;
    flattenMarkdownChunks: string;
    getKvmdItemsRecursively: string;
    getParagraphsRecursively: string;
    kvmdDataMap: string;
    kvmdDataToString: string;
    kvmdParseToMarkdownString: string;
    markdownStringToKvmdParse: string;
    parseKvmdLine: string;
    LabeledButton: string;
    AuthenticationLayout: string;
    Header: string;
    LayoutGrid: string;
    PingApi: string;
    usePing: string;
    UserApp: string;
    preIndexLint: string;
    getActionStatusFilePath: string;
    isLocked: string;
    lockError: string;
    lock: string;
    unlock: string;
    getCallerFileName: string;
    log: string;
    parseTitle: string;
    isResultOfInterface: string;
    makeTest: string;
    getRealSrc: string;
    getUrlFromRelativeUrl: string;
    getYoutubeId: string;
    HtmlHeader: string;
    MarkdownCodeblock: string;
    MarkdownContentRender: string;
    MarkdownContent: string;
    Parameter: string;
    renderFrontmatter: string;
    renderMarkdownChunk: string;
    renderMarkdownContent: string;
    renderMarkdownParse: string;
    renderMarkdownTitle: string;
    useOpenHashDetails: string;
    chunkToStringRecursively: string;
    getChunkParagraphsRecursively: string;
    getImplicitId: string;
    getMarkdownIntro: string;
    getMarkdownParseParagraphs: string;
    getMarkdownReferencePaths: string;
    getMarkdownReferencesFromParagraph: string;
    markdownParseToMarkdownStringFromContent: string;
    markdownParseToMarkdownString: string;
    mdContentParseRecursively: string;
    mdToJsonParse: string;
    parseFrontmatterMarkdownString: string;
    parseMarkdownParagraph: string;
    parseMdToChunks: string;
    removeHeaderPrefix: string;
    addDependantCount: string;
    bundleFolderWithMarkdown: string;
    bundleToBookMarkdown: string;
    bundleToMarkdown: string;
    concatMarkdownFiles: string;
    createMinimizedSectionMarkdown: string;
    createMinimizedSection: string;
    deployToVercel: string;
    emailMarkdownParse: string;
    flattenNestedObject: string;
    generateStaticSite: string;
    getJsonSchemaSummary: string;
    getMarkdownContents: string;
    getMergedMarkdownOutlineUrl: string;
    getOperationSummary: string;
    getPublicMarkdownNestedPathObject: string;
    getTitlesRecursively: string;
    getTypeDescriptorRecursive: string;
    isConventionFileStatement: string;
    isUpperCase: string;
    makeOutlineMarkdownString: string;
    makePropertiesTable: string;
    markdownChunkToMarkdownStringRecursive: string;
    markdownChunksToMarkdownStringRecursive: string;
    markdownToSayable: string;
    mdToPdf: string;
    mergeMarkdownParse: string;
    noNewlines: string;
    operationRadio: string;
    operationToMarkdown: string;
    printNestedTitles: string;
    print: string;
    projectToMarkdown: string;
    propertyToTableRow: string;
    sayablesToMp3: string;
    selectRandomOperation: string;
    simplifiedSchemaToMarkdownString: string;
    statementItemToMarkdown: string;
    tsFunctionNameToMarkdownString: string;
    tsFunctionToMarkdownString: string;
    tsInterfaceToMarkdownString: string;
    tsVariableToMarkdownString: string;
    upMarkdownChunkLevelRecursively: string;
    getQueryPath: string;
    markdownParseToMarkdownModelType: string;
    parseMarkdownModelTimestamp: string;
    tryParseDate: string;
    findCodeblocks: string;
    findCodespans: string;
    findEmbedsTest: string;
    findEmbeds: string;
    findJsonInMarkdown: string;
    findLinks: string;
    flattenMarkdownString: string;
    flattenMarkedTokenRecursive: string;
    trimCodeblock: string;
    cleanupTimer: string;
    generateUniqueId: string;
    getNewPerformance: string;
    getLegacyMenu: string;
    Menu: string;
    minifyBuild: string;
    generateId: string;
    generatePassword: string;
    generateRandomString: string;
    generateTime: string;
    isEmail: string;
    getAssetInputType: string;
    getParameterContentType: string;
    isCalculatedParameter: string;
    isGeneratedParameterName: string;
    getRealItemRecursive: string;
    getTitle: string;
    NestedMenuItem: string;
    NestedMenu: string;
    useExpanded: string;
    ALink: string;
    getFullPath: string;
    getLastPathsChunk: string;
    usePath: string;
    nodemon: string;
    oneByOne: string;
    getDependenciesSummary: string;
    getOperationMetaData: string;
    recalculateOperationIndexJson: string;
    parsePrimitiveArray: string;
    parsePrimitiveBoolean: string;
    parsePrimitiveString: string;
    parsePrimitive: string;
    byteCount: string;
    calculatePathMetaData: string;
    categorizeFiles: string;
    getFolderSummary: string;
    getPathMainComment: string;
    sumSizeSummary: string;
    convertPdfToMd: string;
    tryParsePdf: string;
    addPeerMessage: string;
    addPeer: string;
    augmentDevice: string;
    deviceGetAppsCalculated: string;
    getAllAppOperations: string;
    getAugmentedPersons: string;
    getFirstEmoji: string;
    getNestedPathObject: string;
    getPeerMessages: string;
    getPeerPeople: string;
    getPeersFromPeersRecursively: string;
    getPublicFolderNestedPathObjectFromPeer: string;
    getPublicFolderNestedPathObject: string;
    getPublicPeers: string;
    lateFetchPeerMessageSync: string;
    ping: string;
    proactivePushAddPeerMessage: string;
    removePeer: string;
    sortDevices: string;
    updatePeer: string;
    getAllGroupsIncludingInheritedRecursive: string;
    isPortUsed: string;
    personAttachInheritedGroups: string;
    getPersona: string;
    isPlural: string;
    isSingular: string;
    pluralize: string;
    singularize: string;
    deleteAppCli: string;
    deleteApp: string;
    listAppsCli: string;
    listApps: string;
    logApp: string;
    logTableObject: string;
    pm2ConnectDisconnect: string;
    pm2Connect: string;
    restartAppCli: string;
    restartApp: string;
    startAppCli: string;
    startApp: string;
    stopAllAppsExceptCli: string;
    stopAllAppsExcept: string;
    stopAppsCli: string;
    stopApps: string;
    ContextualPromptResultsTab: string;
    FilePromptSelect: string;
    processPrompt: string;
    usePromptResultAlert: string;
    clickOnSpanTag: string;
    delay: string;
    facebookLogin: string;
    foundOrNotXpath: string;
    foundOrNot: string;
    getBrowserPageById: string;
    getBrowserTabs: string;
    getBrowser: string;
    getChromeExecutablePath: string;
    getConnectedBrowsers: string;
    getIdlePage: string;
    getNewPage: string;
    gmailLogin: string;
    isCaptchaExist: string;
    logConsoleIfDebug: string;
    openMultiTabs: string;
    openNewBrowserOnChildProcess: string;
    openNewBrowser: string;
    openPage: string;
    racePromises: string;
    retryClickAndWaitSelector: string;
    retryWaitSelector: string;
    runBrowser: string;
    setBrowserPageIdle: string;
    setBrowserSession: string;
    setInnerHtml: string;
    setInputValue: string;
    solveReptcha: string;
    trueClick: string;
    twitterLogin: string;
    typeInTheInputField: string;
    typeOnTheTargetWithXpathSelector: string;
    waitMilliseconds: string;
    A: string;
    ActivityIndicator: string;
    Aside: string;
    Button: string;
    Form: string;
    getTailwindModules: string;
    H2: string;
    I: string;
    Image: string;
    Input: string;
    joinClassNames: string;
    Label: string;
    Li: string;
    Nav: string;
    Ol: string;
    P: string;
    Pressable: string;
    PureAside: string;
    PureDiv: string;
    PureNav: string;
    Select: string;
    Span: string;
    Strong: string;
    Svg: string;
    TextArea: string;
    Text: string;
    Toggle: string;
    TouchableOpacity: string;
    trimClassName: string;
    Ul: string;
    wrapInTextIfNeeded: string;
    AlertProvider: string;
    useAlert: string;
    DataForm: string;
    DefaultInputContainer: string;
    DefaultTitle: string;
    errorOnField: string;
    getPlugin: string;
    isObject: string;
    makeInputField: string;
    sameFieldArray: string;
    castToNumber: string;
    DateInput: string;
    DatetimeInput: string;
    isNumber: string;
    LabelsInput: string;
    MapInput: string;
    NumberInput: string;
    PasswordInput: string;
    PhoneInput: string;
    SelectInput: string;
    SelectMultipleInput: string;
    StarsInput: string;
    TextAreaInput: string;
    TextInput: string;
    TimeInput: string;
    ToggleInput: string;
    ModalProvider: string;
    Modal: string;
    useModalState: string;
    useModal: string;
    ToastContainer: string;
    toast: string;
    useNavigation: string;
    useRouter: string;
    getRealValue: string;
    useSelectMultiple: string;
    useSelect: string;
    contextKey: string;
    createStoreProvider: string;
    createStore: string;
    createUseStore: string;
    getContext: string;
    getItemSync: string;
    getItem: string;
    getKey: string;
    setItem: string;
    StoreContextProvider: string;
    getColumns: string;
    renderColumn: string;
    Skeleton: string;
    TableHeadItem: string;
    TableRow: string;
    Table: string;
    useIsInViewport: string;
    readCsvFileSync: string;
    readCsvFile: string;
    readRawCsvFile: string;
    readJsonFileSync: string;
    readJsonFile: string;
    readProjectRelativeJsonFile: string;
    readKvmdFile: string;
    readMarkdownFileToModel: string;
    readMarkdownFile: string;
    getFolderTypescriptIndex: string;
    getOperationIndexModel: string;
    readTypescriptFile: string;
    uniqueNames: string;
    clearTsDatabase: string;
    executeCommandQuietUnlessFail: string;
    exitIfProcessDependenciesChanged: string;
    generateJsonSchemas: string;
    getAllDbModels: string;
    getFileIds: string;
    getIndexFileIds: string;
    getSrcIds: string;
    isOperationBuildNeeded: string;
    isSdkOperation: string;
    rebuildAllOperations: string;
    rebuildOperationCli: string;
    rebuildOperation: string;
    shouldSkip: string;
    yarnBuild: string;
    getKeysAtPathFromNestedObject: string;
    getMenuPagesObject: string;
    makeNestedObjectFromQueryPathObject: string;
    mapChildObjectRecursive: string;
    nestedObjectToChildObject: string;
    nestedPathObjectToNestedMenuRecursive: string;
    nestifyQueryPathObjectRecursive: string;
    queryPathsArrayToNestedPathObject: string;
    reduceQueryPathsRecursively: string;
    bodyFromQueryString: string;
    getFirstQueryStrings: string;
    getQueryPart: string;
    isValidEntry: string;
    toQueryString: string;
    runChildProcess: string;
    sayDutch: string;
    sayLanguage: string;
    sayNepali: string;
    saySomething: string;
    textToMp3: string;
    findFirstCommentTypes: string;
    getDataParameterNames: string;
    getPossibleReferenceParameterNames: string;
    getProperties: string;
    getRefLink: string;
    getReferencableModels: string;
    getReferenceParameterInfo: string;
    getSchemaItems: string;
    getSchema: string;
    simplifiedSchemaToTypeDefinitionString: string;
    simplifySchema: string;
    findSentenceMatches: string;
    magicalRecursiveReducer: string;
    searchRecursiveObjectArray: string;
    getAllSearchResultsWithContext: string;
    getExplorableBasePathsWithContext: string;
    getExplorableDbModels: string;
    getExplorableFilesWithContext: string;
    getFunctions: string;
    defaultMessage: string;
    getMeWithContext: string;
    getPublicPerson: string;
    getPublicPersons: string;
    isPhoneNumber: string;
    isValidPassword: string;
    loginConfirmWithContext: string;
    loginWithEmailOrPhone: string;
    logoutWithContext: string;
    signupBare: string;
    signupConfirmWithContext: string;
    signupWithEmailOrPhone: string;
    switchCurrentPersonWithContext: string;
    updateMeWithContext: string;
    setJsonKey: string;
    setKeyAtLocation: string;
    Share: string;
    Shareable: string;
    useAllText: string;
    useLastSelection: string;
    useProjectRelativeScreenshot: string;
    useScreenshot: string;
    findAudioWithViewsArray: string;
    markdownParseToShortMarkdown: string;
    shortMarkdownToMarkdownParse: string;
    augmentShortMarkdown: string;
    fetchVoicesTest: string;
    fetchVoices: string;
    generateAugmentedShortMarkdownTest: string;
    generateAugmentedShortMarkdown: string;
    getOrGenerateShortMarkdown: string;
    parseDialogue: string;
    uberduckGetPath: string;
    uberduckSpeak: string;
    voiceCloneDialogue: string;
    ShortMarkdownPlayer: string;
    ShortMarkdownSlide: string;
    ShortStudio: string;
    useMultiAudio: string;
    ArrayForm: string;
    FormContainer: string;
    getReferencedModelDataItem: string;
    ObjectForm: string;
    ReferenceInput: string;
    renderParameterTitle: string;
    SimplifiedSchemaForm: string;
    useReferencableModelData: string;
    useTsInterfaceForm: string;
    objectStringToJson: string;
    parseIfJson: string;
    parsePrimitiveJson: string;
    stringToJson: string;
    createNewStripePayment: string;
    receivePaymentUpdateWithContextRaw: string;
    Tabs: string;
    getTestFunctionContext: string;
    getChunkBegin: string;
    getChunkEnd: string;
    getEncoding: string;
    isBinary: string;
    isFirstByteOf2ByteChar: string;
    isFirstByteOf3ByteChar: string;
    isFirstByteOf4ByteChar: string;
    isLaterByteOfUtf8: string;
    isText: string;
    time: string;
    Tooltip: string;
    translate: string;
    tryParseJson: string;
    getAllTsMorphSourceFiles: string;
    getHasGeneric: string;
    getTsMorphProject: string;
    createCodeblockMarkdown: string;
    useOnScreen: string;
    useCustomUrlStore: string;
    getOpenableFilePath: string;
    vscodeOpen: string;
    crudPageToWebPages: string;
    functionFormPageToWebPage: string;
    writeToAssets: string;
    copyPathWithContext: string;
    deleteFileOrFolderWithContext: string;
    getFileContentsWithContext: string;
    getFrontmatterSchema: string;
    getWriterWebPagesMenu: string;
    getWriterWebPages: string;
    movePathWithContext: string;
    newFileWithContext: string;
    newFolderWithContext: string;
    openFinder: string;
    processAssetUploadWithContext: string;
    renameFileOrFolderWithContext: string;
    saveFileContentsWithContext: string;
    trashFileOrFolderWithContext: string;
    updateFrontmatterWithContext: string;
    add: string;
    Completion: string;
    ContentEditableDivInput: string;
    ContextTextArea: string;
    DivContentEditable: string;
    editSubtextSubwordConfig: string;
    EditWriterInput: string;
    FrontmatterForm: string;
    getSubtext: string;
    getTextSegments: string;
    getWriterTypeFromContent: string;
    isAugmentedWordMatch: string;
    isTypescript: string;
    MarkdownCompletions: string;
    MarkdownParsePresentation: string;
    MarkdownView: string;
    MarkedParagraph: string;
    MarkedText: string;
    MarkedToken: string;
    omitSpecialCharactersFromStart: string;
    parseTextContentToHtmlString: string;
    SmartContentEditableDivInput: string;
    SpannedSentence: string;
    SubtextContainer: string;
    Subword: string;
    testAllContentEditableRenderComponents: string;
    testContentEditableRenderComponent: string;
    TitleContainer: string;
    trimAround: string;
    trimLeft: string;
    TypescriptCompletions: string;
    WriterConfigForm: string;
    WriterInput: string;
    youtubeToMp4_old: string;
    youtubeToMp4WithContext: string;
    youtubeToMp4: string;
    zipFiles: string;
    zipFolder: string;
    zip: string;
};
//# sourceMappingURL=sdk-function-paths.d.ts.map