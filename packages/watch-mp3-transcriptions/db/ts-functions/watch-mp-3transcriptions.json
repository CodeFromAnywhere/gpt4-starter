{
  "createdAt": 1673852626221,
  "updatedAt": 1673852626221,
  "deletedAt": 0,
  "createdFirstAt": 1673852626221,
  "isApiExposed": false,
  "isExported": true,
  "explicitTypeName": "ProjectWatcher",
  "operationRelativeTypescriptFilePath": "src/watchMp3Transcriptions.ts",
  "commentsInside": [],
  "rawText": " async (\n  _,\n  absolutePath\n): Promise<string | undefined> => {\n  if (!fs.existsSync(absolutePath)) {\n    return;\n  }\n\n  if (isLocked(absolutePath)) {\n    return;\n  }\n  const chunks = await transcriptionToGptChunks(absolutePath, CHUNK_TOKEN_SIZE);\n\n  if (!chunks) {\n    return;\n  }\n\n  // turn speech into clean text\n  const finalCleanedupResultString = (\n    await oneByOne(chunks, async (chunk) => {\n      const result =\n        await textToText(`Consider this transcription and please make it cleaner (remove speaking errors and transform it into alineas)\n\n\\`\\`\\`\n${chunk}\n\\`\\`\\`\n`);\n      return result.result;\n    })\n  )\n    .filter(notEmpty)\n    .join(\"\\n\\n\");\n\n  const parsedPath = path.parse(absolutePath);\n  const totalExtension = \".transcription.json\";\n  const baseName = parsedPath.base.slice(\n    0,\n    parsedPath.base.length - totalExtension.length\n  );\n  const cleanFilePath = path.join(parsedPath.dir, `${baseName}.md`);\n\n  if (finalCleanedupResultString === \"\") {\n    console.log(\"No result transcribing\", finalCleanedupResultString);\n    return;\n  }\n\n  const recordingType = await getRecordingType(absolutePath);\n\n  const fullMd = `---\nisSource: false\nsource: wav, whisper, gpt3\ncreatedAt: ${Date.now()}\ntype: recording\nrecordingType: ${recordingType}\n---\n\n${finalCleanedupResultString}`;\n\n  await fs.writeFile(cleanFilePath, fullMd, \"utf8\");\n\n  return cleanFilePath;\n}",
  "name": "watchMp3Transcriptions",
  "slug": "watch-mp-3transcriptions",
  "parameters": [],
  "description": "Add an automation (watcher that queues or does) to act on any `.mp3.txt` (which indicates a whisper is done) that doesn't have a `.clean.md`\n\nThere are many other things we can do with the spoken text transcription of an audio file, but these will be applied on any md file (which is much more general purpose)\n\nPromises the path of the resulting converted cleaned-up file",
  "returnType": {
    "rawType": "Promise<string | undefined>",
    "typeCoverage": 0,
    "isArray": false,
    "isEnum": false,
    "isObject": false,
    "isPrimitive": false,
    "isEnumLiteral": false
  },
  "maxIndentationDepth": 4,
  "size": {
    "characters": 1759,
    "lines": 66,
    "bytes": 1759,
    "bytesPerCharacter": 1,
    "charactersPerLine": 27,
    "linesPerFile": 66,
    "numberOfFiles": 1
  },
  "id": "kgioqdmrfsekdigvkyhxlrvp"
}