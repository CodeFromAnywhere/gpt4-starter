{
  "createdAt": 1677579243038,
  "updatedAt": 1677579243038,
  "deletedAt": 0,
  "createdFirstAt": 1677579243038,
  "classification": "const",
  "comments": [],
  "isExported": true,
  "name": "executeWatcherOnFilepath",
  "slug": "execute-watcher-on-filepath",
  "operationRelativeTypescriptFilePath": "src/executeWatcherOnFilepath.ts",
  "type": {
    "rawType": "(projectWatchers: import(\"/Users/clarity/os/operations/tools/purpose/codebase-introspection/functions/function-types/build/ProjectWatcher\").ProjectWatcher<any>[], eventName: import(\"/Users/clarity/os/operations/tools/purpose/codebase-introspection/functions/function-types/build/WatchEventType\").WatchEventType, path: string, stats?: import(\"fs\").Stats | undefined) => any",
    "typeDefinition": {
      "type": "object",
      "properties": {},
      "optional": false
    },
    "typeCoverage": 0,
    "isArray": false,
    "isEnum": false,
    "isObject": true,
    "isPrimitive": false,
    "isEnumLiteral": false,
    "simplifiedSchema": {
      "properties": [],
      "type": "object"
    }
  },
  "value": "async (\n  projectWatchers: ProjectWatcher<any>[],\n  eventName: WatchEventType,\n  path: string,\n  stats?: realFs.Stats | undefined\n) => {\n  const startupWaitMs = 1000;\n  const startTimeAt = Date.now();\n\n  const isStartup = Date.now() < startTimeAt + startupWaitMs;\n  if (isStartup) {\n    return;\n  }\n\n  const isOffline = !(await isOnline());\n  const isBusy = await isSystemBusy();\n  const isUsingBattery = await isSystemUsingBattery();\n  const relevantWatchers = projectWatchers.filter((watcher) => {\n    const isApplicableWatcher = watcher.filter(eventName, path);\n    if (!isApplicableWatcher) {\n      return false;\n    }\n\n    if (watcher.config?.isInternetRequired && isOffline) {\n      // add to queue because internet required but offline\n      db.upsert(\"Queue\", {\n        functionName: watcher.name,\n        parameters: [eventName, path, false],\n      });\n      return false;\n    }\n\n    if (watcher.config?.isHeavy && !isUsingBattery) {\n      // add to queue because waste of battery\n      db.upsert(\"Queue\", {\n        functionName: watcher.name,\n        parameters: [eventName, path, false],\n      });\n      return false;\n    }\n    if (watcher.config?.isHeavy && isBusy) {\n      // add to queue because busy\n\n      db.upsert(\"Queue\", {\n        functionName: watcher.name,\n        parameters: [eventName, path, false],\n      });\n      return false;\n    }\n\n    return true;\n  });\n\n  oneByOne(relevantWatchers, async (projectWatcher) => {\n    console.log(`watchAll: executing ${projectWatcher.name} for ${path}`);\n    await projectWatcher(eventName, path, false);\n  });\n}",
  "description": "",
  "id": "mjitladhhgoffchnhduuidpt"
}