{
  "createdAt": 1677579251940,
  "updatedAt": 1677579251940,
  "deletedAt": 0,
  "createdFirstAt": 1677579251940,
  "classification": "const",
  "comments": [],
  "isExported": true,
  "name": "watchAll",
  "slug": "watch-all",
  "operationRelativeTypescriptFilePath": "src/watchAll.ts",
  "type": {
    "rawType": "(tsFunctions: import(\"/Users/clarity/os/operations/tools/purpose/codebase-introspection/functions/function-types/build/TsFunction\").TsFunction[], config?: { customIgnored?: string[] | undefined; } | undefined) => any",
    "typeDefinition": {
      "type": "object",
      "properties": {},
      "optional": false
    },
    "typeCoverage": 0,
    "isArray": false,
    "isEnum": false,
    "isObject": true,
    "isPrimitive": false,
    "isEnumLiteral": false,
    "simplifiedSchema": {
      "properties": [],
      "type": "object"
    }
  },
  "value": "async (\n  tsFunctions: TsFunction[],\n  config?: {\n    /**\n     * Overwrite the default ignored behavior.\n     *\n     * NB: is not overwriting the startup ignore behavior!\n     */\n    customIgnored?: string[];\n  }\n) => {\n  const projectRoot = getProjectRoot();\n  if (!projectRoot) return;\n\n  // NB: fix to globally alter real fs in order to fix EMFile error that happens in TSMorph (see https://github.com/isaacs/node-graceful-fs)\n  gracefulFs.gracefulify(realFs);\n\n  const projectWatcherTsFunctions = tsFunctions.filter(\n    (x) => x.explicitTypeName === \"ProjectWatcher\"\n  );\n\n  /**\n   * Get the actual executable functions from the SDK\n   */\n  const projectWatchers = projectWatcherTsFunctions\n    .map((x) => x.name)\n    .map((name) => sdk[name as keyof typeof sdk] as ProjectWatcher | undefined)\n    .filter(notEmpty)\n    .filter((projectWatcher) => !projectWatcher.config?.isDisabled);\n\n  log(\n    `${\n      projectWatchers.length\n    } watchers found to watch ${projectRoot}: ${projectWatchers\n      .map((x) => x.name)\n      .join(\", \")}`,\n    { type: \"important\" }\n  );\n\n  // NB: only add recordings path on MacOS\n  const recordingsPath =\n    os.platform() === \"darwin\" && process.env.HOME\n      ? path.resolve(\n          process.env.HOME,\n          \"Library/Application Support/com.apple.voicememos/Recordings\"\n        )\n      : undefined;\n\n  // console.log({ recordingsPath });\n  // TODO: ensure all is watched that need watching in bundled version as well. a `.gitignore` system would be great. Just adhere to `.gitignore` unless there is a `.watchconfig.json` file or so, then adhere to that\n\n  const ignored = config?.customIgnored || [\n    \"**/node_modules/**\",\n    \"**/.next/**\",\n    \"**/.expo/**\",\n    // \"**/build/**\", // build change detection is needed for SDK generation\n    \"**/db/**\",\n    \"**/.git/**\",\n    \"**/.turbo/**\",\n    \"**/generated/**\",\n  ];\n\n  const projectRootFolders = [\n    \"assets\",\n    \"docs\",\n    \"knowledge\",\n    \"operations\",\n    \"text\",\n  ].map((name) => path.join(projectRoot, name));\n\n  const basePath = [...projectRootFolders, recordingsPath].filter(notEmpty);\n\n  // go over every project watcher, add to queue\n  const queueItems = await getQueueItems(projectWatchers, basePath);\n  const upsertResult = await db.upsert(\"Queue\", queueItems);\n\n  console.log(`Added ${queueItems.length} to queue`, { upsertResult });\n\n  watch(basePath, {\n    ignoreInitial: true,\n    ignored,\n  }).on(\"all\", (...watcherArguments) =>\n    executeWatcherOnFilepath(projectWatchers, ...watcherArguments)\n  );\n}",
  "description": "👁 👁 Finds all watchers within typerepo and ensures they all start watching their watch",
  "id": "szvbrlodjslbouipkrbzzmvd"
}