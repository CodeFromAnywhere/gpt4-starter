{
  "createdAt": 1678331100057,
  "updatedAt": 1678331100057,
  "deletedAt": 0,
  "createdFirstAt": 1678331100057,
  "isApiExposed": false,
  "isExported": true,
  "operationRelativeTypescriptFilePath": "src/whisper.ts",
  "commentsInside": [],
  "rawText": " async (\n  personaId?: string\n): Promise<StandardResponse> => {\n  //  should use the whisper api\n  const { openai, ...standardResponse } = await getOpenaiInstance(personaId);\n\n  if (!openai) {\n    return standardResponse;\n  }\n\n  const file = await fs.readFile(\"\");\n  // 1 upload a file\n  const rers = await openai.createFile(file, \"\");\n\n  openai.createTranscription(\n    file,\n    \"whisper-1\",\n    \"omit music\",\n    \"verbose_json\",\n    0,\n    \"jap\"\n  );\n\n  openai.createTranslation(file, \"whisper-1\", undefined, \"json\", 1);\n\n  openai.createImage({\n    prompt: \"some guy in an airplane\",\n    n: 1,\n    response_format: \"url\",\n    size: \"1024x1024\",\n    user: \"ididid\",\n  });\n\n  // use openai.createImage for dall3\n  return { isSuccessful: true, message: \"Not implemented yet\" };\n}",
  "name": "whisper",
  "slug": "whisper",
  "parameters": [
    {
      "name": "personaId",
      "schema": {
        "type": "string"
      },
      "simplifiedSchema": {
        "type": "string"
      },
      "required": false
    }
  ],
  "description": "Use whisper api...",
  "returnType": {
    "rawType": "Promise<import(\"/Users/clarity/os/operations/tools/purpose/codebase-introspection/functions/function-types/build/StandardResponse\").StandardResponse>",
    "typeCoverage": 0,
    "isArray": false,
    "isEnum": false,
    "isObject": false,
    "isPrimitive": false,
    "isEnumLiteral": false
  },
  "maxIndentationDepth": 2,
  "size": {
    "characters": 797,
    "lines": 36,
    "bytes": 797,
    "bytesPerCharacter": 1,
    "charactersPerLine": 22,
    "linesPerFile": 36,
    "numberOfFiles": 1
  },
  "id": "gbuhyewauuxsdaoqbelaovje"
}