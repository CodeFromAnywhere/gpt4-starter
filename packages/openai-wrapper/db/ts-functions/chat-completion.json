{
  "createdAt": 1678331086847,
  "updatedAt": 1678331086847,
  "deletedAt": 0,
  "createdFirstAt": 1678331086847,
  "isApiExposed": false,
  "isExported": true,
  "operationRelativeTypescriptFilePath": "src/chatCompletion.ts",
  "commentsInside": [],
  "rawText": " async (\n  messages: ChatCompletionRequestMessage[],\n  config?: ChatCompletionConfig\n): Promise<\n  StandardResponse & { tokensUsed?: number; chatResponse?: string }\n> => {\n  const { openai, isSuccessful, message } = await getOpenaiInstance();\n\n  if (!openai) {\n    return { isSuccessful, message };\n  }\n\n  // By default, create a delay depending on the tokens expected\n  if (!config?.isInstant) {\n    const inputTokensCalculated =\n      config?.inputTokensCalculated ||\n      calculateOpenaiMessagesTokenCountSum(messages);\n\n    // NB: maybe limit differs per model\n    const tokenLimitPerMinute = 250000;\n    const expectedRoundtripMs = 500;\n    const factorOfMinuteTokens = inputTokensCalculated / tokenLimitPerMinute;\n    // wait the amount to never hit the limit, on average.\n    const msToWait =\n      Math.round(60000 * factorOfMinuteTokens) - expectedRoundtripMs;\n\n    if (msToWait > 0) {\n      await new Promise<void>((resolve) =>\n        setTimeout(() => resolve(), msToWait)\n      );\n    }\n  }\n\n  const model = config?.model || openAiChatModels[0];\n\n  // NB: I assume this is pretty efficient, but we could a/b test and if it's heavy, do our own http/fetch request.\n  const response = await openai\n    .createChatCompletion({\n      model,\n      messages,\n      ...config?.openaiConfig,\n    })\n    .catch((e) => {\n      // TODO: APPLY EXPONENTIAL BACKOFF HERE\n      console.log({\n        status: e.response?.status,\n        statusText: e.response?.statusText,\n        data: e.response?.data,\n      });\n    });\n\n  const tokensUsed = response?.data?.usage?.total_tokens;\n\n  //console.log({ usage: response?.data?.usage });\n  const chatResponse = response?.data?.choices?.[0]?.message?.content;\n\n  return {\n    isSuccessful: true,\n    message: \"Successful\",\n    tokensUsed,\n    chatResponse,\n  };\n}",
  "name": "chatCompletion",
  "slug": "chat-completion",
  "parameters": [
    {
      "name": "messages",
      "schema": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/ChatCompletionRequestMessage"
        }
      },
      "simplifiedSchema": {
        "items": [
          {
            "schema": {
              "fullComment": "",
              "properties": [
                {
                  "name": "content",
                  "required": true,
                  "schema": {
                    "fullComment": "The contents of the message",
                    "type": "string"
                  }
                },
                {
                  "name": "name",
                  "required": false,
                  "schema": {
                    "fullComment": "The name of the user in a multi-user chat",
                    "type": "string"
                  }
                }
              ],
              "type": "object"
            },
            "name": "ChatCompletionRequestMessage"
          }
        ],
        "type": "array"
      },
      "required": true
    },
    {
      "name": "config",
      "schema": {
        "$ref": "#/definitions/ChatCompletionConfig"
      },
      "simplifiedSchema": {
        "fullComment": "",
        "properties": [
          {
            "name": "inputTokensCalculated",
            "required": false,
            "schema": {
              "fullComment": "Provide amount of input tokens, if already calculated. Only used if not `isInstant`",
              "type": "number"
            }
          },
          {
            "name": "isInstant",
            "required": false,
            "schema": {
              "fullComment": "If true, we won't wait (exponential backoff)",
              "type": "boolean"
            }
          },
          {
            "name": "model",
            "required": false,
            "schema": {
              "fullComment": "Defaults to the first one\n\nWhich model?\n\n- gpt-3.5-turbo: ChatGPT MODEL! 10x cheaper\n\nEnsure it works the same and requires us to provide the chat-history (or not?). If not, history is only needed to determine whether or not we're going to answer in the first place. And also for extra chains of course, in some cases.",
              "type": "string"
            }
          },
          {
            "name": "openaiConfig",
            "required": false,
            "schema": {
              "fullComment": "Extra config to pass to the completions endpoint. Not all things supported (like streaming)",
              "properties": [
                {
                  "name": "temperature",
                  "required": false,
                  "schema": {
                    "fullComment": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.  We generally recommend altering this or `top_p` but not both.",
                    "type": "number"
                  }
                },
                {
                  "name": "top_p",
                  "required": false,
                  "schema": {
                    "fullComment": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.  We generally recommend altering this or `temperature` but not both.",
                    "type": "number"
                  }
                },
                {
                  "name": "n",
                  "required": false,
                  "schema": {
                    "fullComment": "How many chat completion choices to generate for each input message.",
                    "type": "number"
                  }
                },
                {
                  "name": "stream",
                  "required": false,
                  "schema": {
                    "fullComment": "If set, partial message deltas will be sent, like in ChatGPT. Tokens will be sent as data-only [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format) as they become available, with the stream terminated by a `data: [DONE]` message.",
                    "type": "boolean"
                  }
                },
                {
                  "name": "max_tokens",
                  "required": false,
                  "schema": {
                    "fullComment": "The maximum number of tokens allowed for the generated answer. By default, the number of tokens the model can return will be (4096 - prompt tokens).",
                    "type": "number"
                  }
                },
                {
                  "name": "presence_penalty",
                  "required": false,
                  "schema": {
                    "fullComment": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model\\'s likelihood to talk about new topics.  [See more information about frequency and presence penalties.](/docs/api-reference/parameter-details)",
                    "type": "number"
                  }
                },
                {
                  "name": "frequency_penalty",
                  "required": false,
                  "schema": {
                    "fullComment": "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model\\'s likelihood to repeat the same line verbatim.  [See more information about frequency and presence penalties.](/docs/api-reference/parameter-details)",
                    "type": "number"
                  }
                },
                {
                  "name": "logit_bias",
                  "required": false,
                  "schema": {
                    "fullComment": "Modify the likelihood of specified tokens appearing in the completion.  Accepts a json object that maps tokens (specified by their token ID in the tokenizer) to an associated bias value from -100 to 100. Mathematically, the bias is added to the logits generated by the model prior to sampling. The exact effect will vary per model, but values between -1 and 1 should decrease or increase likelihood of selection; values like -100 or 100 should result in a ban or exclusive selection of the relevant token.",
                    "properties": [],
                    "type": "object"
                  }
                },
                {
                  "name": "user",
                  "required": false,
                  "schema": {
                    "fullComment": "A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids).",
                    "type": "string"
                  }
                }
              ],
              "type": "object"
            }
          }
        ],
        "type": "object"
      },
      "required": false
    }
  ],
  "description": "More direct way to interact with openai api chat completion\n\ndocs: https://platform.openai.com/docs/guides/chat/introduction",
  "returnType": {
    "rawType": "Promise<import(\"/Users/clarity/os/operations/tools/purpose/codebase-introspection/functions/function-types/build/StandardResponse\").StandardResponse & { tokensUsed?: number | undefined; chatResponse?: string | undefined; }>",
    "typeCoverage": 0,
    "isArray": false,
    "isEnum": false,
    "isObject": false,
    "isPrimitive": false,
    "isEnumLiteral": false
  },
  "maxIndentationDepth": 4,
  "size": {
    "characters": 1928,
    "lines": 65,
    "bytes": 1928,
    "bytesPerCharacter": 1,
    "charactersPerLine": 30,
    "linesPerFile": 65,
    "numberOfFiles": 1
  },
  "id": "plpsymjrjjeqlkiknngdjifx"
}