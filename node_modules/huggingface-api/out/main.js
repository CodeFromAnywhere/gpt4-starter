"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.request = void 0;
const fetch = require("node-fetch");
const fs = require("fs");
function request(data) {
    return __awaiter(this, void 0, void 0, function* () {
        const url = `https://api-inference.huggingface.co/models/${data.model}`;
        const text = data.text || String(fs.readFileSync(data.file));
        const key = data.api_key;
        const returned = yield fetch.default(url, {
            method: 'POST',
            body: text,
            headers: { 'Authorization': `Bearer ${key}` }
        }).catch((err) => {
            throw err; // Error caused by node-fetch
        });
        const obj = yield returned.json();
        if (data.return_type === 'FULL') {
            return obj;
        }
        else if (data.return_type === 'OBJ') {
            return obj[0];
        }
        else if (data.return_type === 'STRING') {
            return obj[0].generated_text;
        }
        else {
            throw new Error('return_type has to be "FULL" or "OBJ" or "STRING"');
        }
    });
}
exports.request = request;
