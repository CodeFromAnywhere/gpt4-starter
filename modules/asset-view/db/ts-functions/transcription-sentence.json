{
  "createdAt": 1678041644362,
  "updatedAt": 1678041644362,
  "deletedAt": 0,
  "createdFirstAt": 1678041644362,
  "isApiExposed": false,
  "isExported": true,
  "operationRelativeTypescriptFilePath": "src/AssetView.tsx",
  "commentsInside": [],
  "rawText": " (props: {\n  time: number;\n  sentence: TranscribedText;\n  transcription: Transcription;\n  correctRef?: React.RefObject<HTMLAudioElement>;\n}) => {\n  const { sentence, time, transcription, correctRef } = props;\n  const isHighlighted =\n    time * 1000 > sentence.startAt && time * 1000 < sentence.endAt;\n\n  const highlightedWord = transcription.words.find(\n    (x) => time * 1000 > x.startAt && time * 1000 < x.endAt\n  );\n\n  const words = sentence.text.split(\" \");\n\n  const wordsWithHighlight = words\n    .map((word) => {\n      const isWordHighlighted =\n        isHighlighted &&\n        highlightedWord &&\n        slugify(highlightedWord.text) === slugify(word);\n\n      return isWordHighlighted ? word.toUpperCase() : word;\n    })\n    .join(\" \");\n\n  return (\n    <P\n      style={isHighlighted ? { color: \"lightgreen\" } : undefined}\n      onClick={() => {\n        if (!correctRef?.current) return;\n        correctRef.current.currentTime = sentence.startAt / 1000;\n        correctRef.current.play();\n      }}\n    >\n      {wordsWithHighlight}\n    </P>\n  );\n}",
  "name": "TranscriptionSentence",
  "slug": "transcription-sentence",
  "parameters": [],
  "description": "",
  "returnType": {
    "rawType": "JSX.Element",
    "typeDefinition": {
      "optional": false,
      "$ref": "#/definitions/JSX.Element"
    },
    "typeCoverage": 0,
    "isArray": false,
    "isEnum": false,
    "isObject": true,
    "isPrimitive": false,
    "isEnumLiteral": false
  },
  "maxIndentationDepth": 4,
  "size": {
    "characters": 1052,
    "lines": 40,
    "bytes": 1052,
    "bytesPerCharacter": 1,
    "charactersPerLine": 26,
    "linesPerFile": 40,
    "numberOfFiles": 1
  },
  "id": "pfomqkzqdsydjjzwtqehatdo"
}