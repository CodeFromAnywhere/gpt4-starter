{
  "createdAt": 1678041559651,
  "updatedAt": 1678041559651,
  "deletedAt": 0,
  "createdFirstAt": 1678041559651,
  "isApiExposed": false,
  "isExported": true,
  "operationRelativeTypescriptFilePath": "src/FileInput.tsx",
  "commentsInside": [],
  "rawText": " (props: { setBlobs: (blobs: Asset[]) => void }) => {\n  const { setBlobs } = props;\n  return (\n    <Input\n      id=\"fileupload\"\n      type=\"file\"\n      multiple\n      onChange={(event) => {\n        const files = event.target.files;\n\n        if (!files) {\n          setBlobs([]);\n          return;\n        }\n\n        const fileArray = new Array(files.length)\n          .fill(null)\n          .map((_, index) => {\n            const file = files.item(index);\n\n            return file;\n          })\n          .filter(notEmpty);\n\n        const assetBlobs: Asset[] = fileArray.map((file) => {\n          const type = getTypeFromFileBlob(file);\n          const name = withoutExtension(file.name);\n\n          const asset: Asset = {\n            blobPath: URL.createObjectURL(file),\n            originalFilename: file.name,\n            blob: file,\n            type,\n            name,\n            sizeBytes: file.size,\n            uploadProgress: 0,\n          };\n\n          return asset;\n        });\n        setBlobs(assetBlobs);\n      }}\n    />\n  );\n}",
  "name": "FileInput",
  "slug": "file-input",
  "parameters": [],
  "description": "",
  "returnType": {
    "rawType": "JSX.Element",
    "typeDefinition": {
      "optional": false,
      "$ref": "#/definitions/JSX.Element"
    },
    "typeCoverage": 0,
    "isArray": false,
    "isEnum": false,
    "isObject": true,
    "isPrimitive": false,
    "isEnumLiteral": false
  },
  "maxIndentationDepth": 6,
  "size": {
    "characters": 1039,
    "lines": 45,
    "bytes": 1039,
    "bytesPerCharacter": 1,
    "charactersPerLine": 23,
    "linesPerFile": 45,
    "numberOfFiles": 1
  },
  "id": "nbiqgezclodsmxnwdyukiveu"
}