{
  "createdAt": 1677582373587,
  "updatedAt": 1677582373587,
  "deletedAt": 0,
  "createdFirstAt": 1677582373587,
  "classification": "const",
  "comments": [],
  "isExported": true,
  "name": "openPage",
  "slug": "open-page",
  "operationRelativeTypescriptFilePath": "src/openPage.ts",
  "type": {
    "rawType": "(pageId?: string | undefined) => Promise<import(\"/Users/clarity/os/operations/node_modules/puppeteer/lib/types\").Page | undefined>",
    "typeDefinition": {
      "type": "object",
      "properties": {},
      "optional": false
    },
    "typeCoverage": 0,
    "isArray": false,
    "isEnum": false,
    "isObject": true,
    "isPrimitive": false,
    "isEnumLiteral": false,
    "simplifiedSchema": {
      "properties": [],
      "type": "object"
    }
  },
  "value": "async (pageId?: string): Promise<Page | undefined> => {\n    const browser = await openNewBrowser();\n    if (!browser) {\n        console.log(\"BROSER NOT FOUND\");\n        await delay(5000);\n        console.log(\"TRY AGAIN\");\n        const browser = await openNewBrowser();\n        if (!browser) return;\n        if (browser) {\n            if (pageId) {\n                return getBrowserPageById(browser, pageId);\n            }\n\n            const page = await getNewPage(browser);\n\n            await page?.setBypassCSP(true);\n            return page;\n        }\n        return;\n    }\n\n    if (pageId) {\n        return getBrowserPageById(browser, pageId);\n    }\n\n    const page = await getNewPage(browser);\n    await page?.setBypassCSP(true);\n    return page;\n}",
  "description": "",
  "id": "dfbexivwehyeklzphxvkevln"
}