{
  "createdAt": 1678331595561,
  "updatedAt": 1678331595561,
  "deletedAt": 0,
  "createdFirstAt": 1678331595561,
  "classification": "const",
  "comments": [],
  "isExported": true,
  "name": "getExplorableDbModels",
  "slug": "get-explorable-db-models",
  "operationRelativeTypescriptFilePath": "src/getExplorableDbModels.ts",
  "type": {
    "rawType": "(query: string, groupSlugs: string[]) => unknown",
    "typeDefinition": {
      "type": "object",
      "properties": {},
      "optional": false
    },
    "typeCoverage": 0,
    "isArray": false,
    "isEnum": false,
    "isObject": true,
    "isPrimitive": false,
    "isEnumLiteral": false,
    "simplifiedSchema": {
      "properties": [],
      "type": "object"
    }
  },
  "value": "async (\n  query: string,\n  groupSlugs: string[]\n) => {\n  const dbModelInterfaces = (await db.get(\"TsInterface\")).filter(\n    (x) => x.isDbModel\n  );\n\n  const dbModels = dbModelInterfaces\n    .filter((x) =>\n      `${x.name.toLowerCase()} ${humanCase(x.name).toLowerCase()}`.includes(\n        query.toLowerCase()\n      )\n    )\n    .filter((x) => {\n      if (groupSlugs.includes(\"admin\")) {\n        return true;\n      }\n      //get persmissions for every group the user is in\n      const groupPermissions = groupSlugs\n        ?.map((slug) => x.authorizations?.[slug])\n        .filter(notEmpty)\n        .join(\"\");\n\n      // see if the \"R\" is included in those permissions, which would indicate we are allowed to read.\n      const canRead = groupPermissions?.toLowerCase().includes(\"r\");\n\n      return canRead;\n    })\n    .map((x) => {\n      const result: SearchResult = {\n        title: `ðŸ—„ ${x.name}`,\n        description: x.description,\n        url: `/db/${x.name}`,\n      };\n      return result;\n    });\n\n  return dbModels;\n}",
  "description": "",
  "id": "rqxrobggxlmthiwvfuragzrg"
}