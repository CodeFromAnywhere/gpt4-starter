{
  "createdAt": 1678331601263,
  "updatedAt": 1678331601263,
  "deletedAt": 0,
  "createdFirstAt": 1678331601263,
  "classification": "const",
  "comments": [],
  "isExported": true,
  "name": "getFunctions",
  "slug": "get-functions",
  "operationRelativeTypescriptFilePath": "src/getFunctions.ts",
  "type": {
    "rawType": "(query: string, groupSlugs: string[]) => Promise<import(\"/Users/clarity/os/operations/tools/purpose/search/search-types/build/SearchResult\").SearchResult[]>",
    "typeDefinition": {
      "type": "object",
      "properties": {},
      "optional": false
    },
    "typeCoverage": 0,
    "isArray": false,
    "isEnum": false,
    "isObject": true,
    "isPrimitive": false,
    "isEnumLiteral": false,
    "simplifiedSchema": {
      "properties": [],
      "type": "object"
    }
  },
  "value": "async (\n  query: string,\n  groupSlugs: string[]\n): Promise<SearchResult[]> => {\n  const tsFunctionsReadable = (await db.get(\"TsFunction\")).filter((x) => {\n    if (groupSlugs.includes(\"admin\")) {\n      return true;\n    }\n\n    const config = sdk[x.name as keyof typeof sdk]?.config as\n      | StandardFunctionConfig\n      | undefined;\n\n    //get persmissions for every group the user is in\n    const groupPermissions = groupSlugs\n      .map((slug) => config?.authorizations?.[slug])\n      .filter(notEmpty)\n      .join(\"\");\n\n    const lowercasePermissions = groupPermissions.toLowerCase();\n\n    // see if the \"R\" is included in those permissions, which would indicate we are allowed to read this function.\n    const canRead = lowercasePermissions.includes(\"r\");\n    const canExecute = lowercasePermissions.includes(\"x\");\n    const canWrite = lowercasePermissions.includes(\"u\");\n\n    return canRead || canExecute || canWrite;\n  });\n\n  const functions = tsFunctionsReadable\n    .filter((x) => {\n      const names = `${x.name.toLowerCase()} ${humanCase(\n        x.name\n      ).toLowerCase()}`;\n      return names.includes(query.toLowerCase());\n    })\n    .map((x) => {\n      const result: SearchResult = {\n        title: `⚡️ ${x.name}`,\n        description: x.description,\n        url: `/function/${x.name}`,\n      };\n\n      return result;\n    });\n\n  return functions;\n}",
  "description": "",
  "id": "bpacoxgbgjjlastsihajtuuz"
}