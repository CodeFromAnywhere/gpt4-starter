{
  "createdAt": 1678331595406,
  "updatedAt": 1678331595406,
  "deletedAt": 0,
  "createdFirstAt": 1678331595406,
  "isApiExposed": false,
  "isExported": true,
  "operationRelativeTypescriptFilePath": "src/getExplorableDbModels.ts",
  "commentsInside": [],
  "rawText": " async (\n  query: string,\n  groupSlugs: string[]\n) => {\n  const dbModelInterfaces = (await db.get(\"TsInterface\")).filter(\n    (x) => x.isDbModel\n  );\n\n  const dbModels = dbModelInterfaces\n    .filter((x) =>\n      `${x.name.toLowerCase()} ${humanCase(x.name).toLowerCase()}`.includes(\n        query.toLowerCase()\n      )\n    )\n    .filter((x) => {\n      if (groupSlugs.includes(\"admin\")) {\n        return true;\n      }\n      //get persmissions for every group the user is in\n      const groupPermissions = groupSlugs\n        ?.map((slug) => x.authorizations?.[slug])\n        .filter(notEmpty)\n        .join(\"\");\n\n      // see if the \"R\" is included in those permissions, which would indicate we are allowed to read.\n      const canRead = groupPermissions?.toLowerCase().includes(\"r\");\n\n      return canRead;\n    })\n    .map((x) => {\n      const result: SearchResult = {\n        title: `ðŸ—„ ${x.name}`,\n        description: x.description,\n        url: `/db/${x.name}`,\n      };\n      return result;\n    });\n\n  return dbModels;\n}",
  "name": "getExplorableDbModels",
  "slug": "get-explorable-db-models",
  "parameters": [
    {
      "name": "query",
      "schema": {
        "type": "string"
      },
      "simplifiedSchema": {
        "type": "string"
      },
      "required": true
    },
    {
      "name": "groupSlugs",
      "schema": {
        "type": "array",
        "items": {
          "type": "string"
        }
      },
      "simplifiedSchema": {
        "items": [
          {
            "schema": {
              "type": "string"
            },
            "name": null
          }
        ],
        "type": "array"
      },
      "required": true
    }
  ],
  "description": "",
  "returnType": {
    "rawType": "unknown",
    "typeCoverage": 0,
    "isArray": false,
    "isEnum": false,
    "isObject": false,
    "isPrimitive": false,
    "isEnumLiteral": false
  },
  "maxIndentationDepth": 4,
  "size": {
    "characters": 1025,
    "lines": 40,
    "bytes": 1027,
    "bytesPerCharacter": 1.0019512195121951,
    "charactersPerLine": 26,
    "linesPerFile": 40,
    "numberOfFiles": 1
  },
  "id": "pgqezdiobnnurmqraplvdjun"
}