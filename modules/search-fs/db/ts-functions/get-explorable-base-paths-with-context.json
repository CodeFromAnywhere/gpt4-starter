{
  "createdAt": 1678331592858,
  "updatedAt": 1678331592858,
  "deletedAt": 0,
  "createdFirstAt": 1678331592858,
  "isApiExposed": false,
  "isExported": true,
  "operationRelativeTypescriptFilePath": "src/getExplorableBasePathsWithContext.ts",
  "commentsInside": [],
  "rawText": " (\n  functionContext: FunctionContext\n): { projectRelativePath: string; name: string }[] => {\n  const projectRoot = getProjectRoot();\n  if (!projectRoot) {\n    return [];\n  }\n\n  const {\n    device: { currentPersonCalculated },\n  } = functionContext;\n\n  const groupSlugs = functionContext.device?.currentPersonCalculated\n    ?.groupSlugs || [\"public\"];\n\n  const isAdmin = groupSlugs.includes(\"admin\");\n\n  const groupBasePaths = groupSlugs.map((slug) => {\n    return {\n      projectRelativePath: makeRelative(\n        path.join(projectRoot, \"knowledge\", \"groups\", slug),\n        projectRoot\n      ),\n      name: humanCase(slug),\n    };\n  });\n\n  // NB: add your own user path if you are logged in\n  const myBasePaths = currentPersonCalculated?.slug\n    ? [\n        {\n          projectRelativePath: makeRelative(\n            path.join(\n              projectRoot,\n              \"knowledge\",\n              \"persons\",\n              currentPersonCalculated.slug\n            ),\n            projectRoot\n          ),\n          name: \"My files\",\n        },\n      ]\n    : [];\n\n  const explorableBasePaths = myBasePaths.concat(groupBasePaths);\n\n  if (isAdmin) {\n    // add before the rest\n    explorableBasePaths.unshift({ projectRelativePath: \"\", name: \"OS Root\" });\n  }\n\n  return explorableBasePaths;\n}",
  "name": "getExplorableBasePathsWithContext",
  "slug": "get-explorable-base-paths-with-context",
  "parameters": [
    {
      "name": "functionContext",
      "schema": {
        "$ref": "#/definitions/FunctionContext"
      },
      "simplifiedSchema": {
        "fullComment": "Should be attached as first argument of the function, if the name of the function is in the format of:\n\n- `xyzWithContext`: attaches all context\n- `xyzWithContextRaw`: attaches all context, api returns just the result of the function without wrapping it in the `RealApiReturnType`. Needed in case you have a different server.js `server.reply`\n\nFor more info see `apiConvention`",
        "properties": [
          {
            "name": "tsFunction",
            "required": false,
            "schema": {
              "fullComment": "Type to tsFucntion",
              "properties": [],
              "type": "object"
            }
          },
          {
            "name": "hasAuthorization",
            "required": true,
            "schema": {
              "fullComment": "Device has authorization to the function",
              "type": "boolean"
            }
          },
          {
            "name": "serverContext",
            "required": false,
            "schema": {
              "fullComment": "Original context coming from server.js\n\nNB: due to indexation problems the type has been removed. It can be casted to the `Context` type, which you can import from:\n\n```ts import { Context } from \"server/typings/common\"; ```",
              "nb": "due to indexation problems the type has been removed. It can be casted to the `Context` type, which you can import from:",
              "properties": [],
              "type": "object"
            }
          },
          {
            "name": "groups",
            "required": false,
            "schema": {
              "fullComment": "DEPRECATED: should use device.currentPersonCalculated.groups. No duplication needed, only causes confusion and potentially bugs.\n\nGroups the person(s) of the device belong to, including the inherited groups and `public` special group",
              "items": [
                {
                  "schema": {
                    "fullComment": "TODO: change this into a hierarchical kvmd model.\n\nA `Person` is able to be part of one or multiple `Group`s.\n\nA `Device` without `Person` is just part of group `public` and can only access `public` info and features.\n\n`Group`s and individual `Person`s can be given `Authorization`\n\nGroups are the main way to provide authorizations to functions, databases, and files (code, data, and text)\n\n- To apply an authorization on a function, you can use the `.config.authorizations` parameter on the function\n- To apply an authorization on a file or folder, you can use the `authorizations` frontmatter\n- To apply an authorization on a database model, you can use the `authorizations` parameter on the `Dataset` or in the `TsInterface` frontmatter.\n\nThere are some special groups. These groups may have specific functionalities applied to them. Try to use these groups as much as possible, instead of creating your own groups:\n\n- `admin` has 100% access to everything\n- `public` is any user, even without signup\n- `trusted` is any trusted user. These may be allowed to do additional things",
                    "todo": "change this into a hierarchical kvmd model.",
                    "properties": [
                      {
                        "name": "slug",
                        "required": true,
                        "schema": {
                          "fullComment": "kebab-case of the name, should be unique\n\nuse this for any identifier that's not an Id-type. Usually this is a kebab-case version of a written text, but it can also be a file path, for example.",
                          "type": "string"
                        }
                      },
                      {
                        "name": "name",
                        "required": true,
                        "schema": {
                          "fullComment": "Name of the group (will set slug)\n\nNB: this can be used in functions to specify certain access to groups. It should there fore be unique and you should be careful when changing it!",
                          "nb": "this can be used in functions to specify certain access to groups. It should there fore be unique and you should be careful when changing it!",
                          "type": "string"
                        }
                      },
                      {
                        "name": "language",
                        "required": true,
                        "schema": {
                          "enum": [
                            "english",
                            "dutch",
                            "nepali",
                            "portuguese",
                            "brazilian",
                            "german",
                            "french",
                            "spanish",
                            "italian",
                            "norwegian",
                            "swedish",
                            "danish",
                            "vietnamese",
                            "indonesian",
                            "southAfrican",
                            "tokiPona",
                            "hindi",
                            "mandarin",
                            "arabic",
                            "bengali",
                            "urdu",
                            "japanese",
                            "swahili"
                          ],
                          "fullComment": "all currently supported languages",
                          "type": "string"
                        }
                      },
                      {
                        "name": "createdAt",
                        "required": true,
                        "schema": {
                          "fullComment": "Time\n\nTime can be stored in various ways but in my experience it is, again, best to keep it simple and just have one way to store time. I can think about this for hours, but my intuition goes towards using the same format as Date.now() because it is a very small format and is easy to read.\n\nIt is the amount of ms since 1970.\n\nI could argue to store it in seconds since 1970 since there are few applications of doing ms, but maybe we do, and it's just 30% bigger. No problem.\n\nTherefore, let's store all time values in the format Date.now()",
                          "type": "number"
                        }
                      },
                      {
                        "name": "updatedAt",
                        "required": true,
                        "schema": {
                          "fullComment": "Time\n\nTime can be stored in various ways but in my experience it is, again, best to keep it simple and just have one way to store time. I can think about this for hours, but my intuition goes towards using the same format as Date.now() because it is a very small format and is easy to read.\n\nIt is the amount of ms since 1970.\n\nI could argue to store it in seconds since 1970 since there are few applications of doing ms, but maybe we do, and it's just 30% bigger. No problem.\n\nTherefore, let's store all time values in the format Date.now()",
                          "type": "number"
                        }
                      },
                      {
                        "name": "deletedAt",
                        "required": true,
                        "schema": {
                          "fullComment": "Time\n\nTime can be stored in various ways but in my experience it is, again, best to keep it simple and just have one way to store time. I can think about this for hours, but my intuition goes towards using the same format as Date.now() because it is a very small format and is easy to read.\n\nIt is the amount of ms since 1970.\n\nI could argue to store it in seconds since 1970 since there are few applications of doing ms, but maybe we do, and it's just 30% bigger. No problem.\n\nTherefore, let's store all time values in the format Date.now()",
                          "type": "number"
                        }
                      },
                      {
                        "name": "createdFirstAt",
                        "required": true,
                        "schema": {
                          "fullComment": "in some cases, data can be created before it was created in our system. In this case, use CreatedFirstAt if this information is important.\n\nTime\n\nTime can be stored in various ways but in my experience it is, again, best to keep it simple and just have one way to store time. I can think about this for hours, but my intuition goes towards using the same format as Date.now() because it is a very small format and is easy to read.\n\nIt is the amount of ms since 1970.\n\nI could argue to store it in seconds since 1970 since there are few applications of doing ms, but maybe we do, and it's just 30% bigger. No problem.\n\nTherefore, let's store all time values in the format Date.now()",
                          "type": "number"
                        }
                      },
                      {
                        "name": "operationName",
                        "required": true,
                        "schema": {
                          "fullComment": "name of operation the model belongs to\n\n- calculated value (not stored in database)\n- can be `null` or an actual operationName that it was saved at\n- can be `undefined` when you are creating an item, because then it can be set for you",
                          "type": "null"
                        }
                      },
                      {
                        "name": "projectRelativePath",
                        "required": true,
                        "schema": {
                          "fullComment": "path to dbfile\n\n- calculated value (not stored in database)\n- relatively from the project (without slash at start)\n- can be `undefined` when you are creating an item, because then it can be set for you",
                          "type": "string"
                        }
                      },
                      {
                        "name": "operationRelativePath",
                        "required": false,
                        "schema": {
                          "fullComment": "path to db file\n\n- relatively from the operation root folder (without slash at start)\n- calculated value (not stored in database)\n- can be `undefined` if the db file does not belong to an operation\n- can be `undefined` when you are creating an item, because then it can be set for you",
                          "type": "string"
                        }
                      },
                      {
                        "name": "id",
                        "required": true,
                        "schema": {
                          "fullComment": "Should be an unique string By default, you can use `generateId()` to generate a random string of 16 characters. If you wish, you can also use any other string, as long as you are sure it's unique.\n\n# Background Info\n\nazAZ09 characters are easy to copy and provide 62 characters. the goal of an id is to be unique.\n\nthe advantage of a random id compared to an numeric id starting with 1 with auto increment is that you can set them up decentralised.\n\nthe change of duplicate ids gets bigger once you make them shorter the change of finding an existing id gets bigger once you make them shorter\n\nAn Id with 12 characters would provide 3.22e21 combinations.\n\nWhat is the change of duplicate ids? This depends on the amount of identifyable items in the data What is the change of guessing an id? This depends on speed of a brute force attack and the amount of available datapoints. If you can guess 10000 times per second, you can make 864.000.000 guesses. A billion guesses on a dataset of a billion datapoints yields 3226 correct ids on average.\n\nWhy make an id short? I don't know if there's an important reason.\n\nAll in all, I think we should make ids 24 characters by default. This would make it very easy to store, yet, with more than E42 combinations, make it nearly impossible to get duplication or brute force hits.\n\nAn id would look like this:\n\n``` { \"id\": \"sk2EcW9AkZpksk2EcW9AkZpk\" } ```\n\nLooks good to me! Don't think about it and just keep it simple. We can always migrate later to a bigger amount, but I don't see good reason to keep it smaller than this.",
                          "type": "string"
                        }
                      },
                      {
                        "name": "categoryStack",
                        "required": false,
                        "schema": {
                          "fullComment": "In case of jsonSingle storageMethod, the categoryStack is generated by the location of the file in the db model folder in the db folder.\n\nNB: Changing this value when updating/upserting, changes where the item is located!\n\nTaken from the location in the folder of the db-model.\n\nNB: Changing this value when updating/upserting, changes where the item is located!",
                          "nb": "Changing this value when updating/upserting, changes where the item is located!",
                          "items": [
                            {
                              "schema": {
                                "type": "string"
                              },
                              "name": null
                            }
                          ],
                          "type": "array"
                        }
                      },
                      {
                        "name": "description",
                        "required": false,
                        "schema": {
                          "type": "string"
                        }
                      },
                      {
                        "name": "inherited_groupSlugs",
                        "required": false,
                        "schema": {
                          "fullComment": "Any group recursively inherits other groups until it finds itself being in a loop. This way you can have authorizations applied on multiple groups at once, more easily\n\nTODO: change this into parent_groupSlugs. it's just a hierarchical categorisation, in a way.",
                          "todo": "change this into parent_groupSlugs. it's just a hierarchical categorisation, in a way.",
                          "items": [
                            {
                              "schema": {
                                "type": "string"
                              },
                              "name": null
                            }
                          ],
                          "type": "array"
                        }
                      },
                      {
                        "name": "customAuthorizations",
                        "required": false,
                        "schema": {
                          "fullComment": "DEPRECATED: not needed\n\nOptionally, provide custom authorization to a group",
                          "items": [
                            {
                              "schema": {
                                "fullComment": "`Authorization` helps you provide certain access to files, data, functionality, and code. Authorization can be provided custom, or by indexation. The indexation of the codebase and text-files overwrites the custom authorization in the `Group`-model.\n\n## Different authorizations\n\nFor files (ts, md, json, etc...):\n\n- canWriteCreate\n- canWriteUpdate\n- canWriteDelete\n- canRead\n- canSearch (only search index)\n\nFor db model data subsets:\n\n- canWriteUpdate\n- canWriteCreate\n- canWriteDelete\n- canRead\n- canSearch (only search index)\n\nFor functions:\n\n- canExecute\n\nFor functions, interfaces, variables:\n\n- canRead (reading docs only. for source, you need to provide the file auth)\n- canSearch (only search index)",
                                "properties": [
                                  {
                                    "name": "isProjectWide",
                                    "required": false,
                                    "schema": {
                                      "fullComment": "If true, this authorization is project-wide and applies to everything",
                                      "type": "boolean"
                                    }
                                  },
                                  {
                                    "name": "authorizedOperationName",
                                    "required": false,
                                    "schema": {
                                      "fullComment": "If selected, the authorization will apply to the whole operation",
                                      "type": "string"
                                    }
                                  },
                                  {
                                    "name": "tsFunctionId",
                                    "required": false,
                                    "schema": {
                                      "fullComment": "If selected, the authorization will apply to this function\n\nShould be an unique string By default, you can use `generateId()` to generate a random string of 16 characters. If you wish, you can also use any other string, as long as you are sure it's unique.\n\n# Background Info\n\nazAZ09 characters are easy to copy and provide 62 characters. the goal of an id is to be unique.\n\nthe advantage of a random id compared to an numeric id starting with 1 with auto increment is that you can set them up decentralised.\n\nthe change of duplicate ids gets bigger once you make them shorter the change of finding an existing id gets bigger once you make them shorter\n\nAn Id with 12 characters would provide 3.22e21 combinations.\n\nWhat is the change of duplicate ids? This depends on the amount of identifyable items in the data What is the change of guessing an id? This depends on speed of a brute force attack and the amount of available datapoints. If you can guess 10000 times per second, you can make 864.000.000 guesses. A billion guesses on a dataset of a billion datapoints yields 3226 correct ids on average.\n\nWhy make an id short? I don't know if there's an important reason.\n\nAll in all, I think we should make ids 24 characters by default. This would make it very easy to store, yet, with more than E42 combinations, make it nearly impossible to get duplication or brute force hits.\n\nAn id would look like this:\n\n``` { \"id\": \"sk2EcW9AkZpksk2EcW9AkZpk\" } ```\n\nLooks good to me! Don't think about it and just keep it simple. We can always migrate later to a bigger amount, but I don't see good reason to keep it smaller than this.",
                                      "type": "string"
                                    }
                                  },
                                  {
                                    "name": "tsVariableId",
                                    "required": false,
                                    "schema": {
                                      "fullComment": "If selected, the authorization will apply to this variable\n\nShould be an unique string By default, you can use `generateId()` to generate a random string of 16 characters. If you wish, you can also use any other string, as long as you are sure it's unique.\n\n# Background Info\n\nazAZ09 characters are easy to copy and provide 62 characters. the goal of an id is to be unique.\n\nthe advantage of a random id compared to an numeric id starting with 1 with auto increment is that you can set them up decentralised.\n\nthe change of duplicate ids gets bigger once you make them shorter the change of finding an existing id gets bigger once you make them shorter\n\nAn Id with 12 characters would provide 3.22e21 combinations.\n\nWhat is the change of duplicate ids? This depends on the amount of identifyable items in the data What is the change of guessing an id? This depends on speed of a brute force attack and the amount of available datapoints. If you can guess 10000 times per second, you can make 864.000.000 guesses. A billion guesses on a dataset of a billion datapoints yields 3226 correct ids on average.\n\nWhy make an id short? I don't know if there's an important reason.\n\nAll in all, I think we should make ids 24 characters by default. This would make it very easy to store, yet, with more than E42 combinations, make it nearly impossible to get duplication or brute force hits.\n\nAn id would look like this:\n\n``` { \"id\": \"sk2EcW9AkZpksk2EcW9AkZpk\" } ```\n\nLooks good to me! Don't think about it and just keep it simple. We can always migrate later to a bigger amount, but I don't see good reason to keep it smaller than this.",
                                      "type": "string"
                                    }
                                  },
                                  {
                                    "name": "tsInterfaceId",
                                    "required": false,
                                    "schema": {
                                      "fullComment": "If selected, the authorization will apply to this interface\n\nShould be an unique string By default, you can use `generateId()` to generate a random string of 16 characters. If you wish, you can also use any other string, as long as you are sure it's unique.\n\n# Background Info\n\nazAZ09 characters are easy to copy and provide 62 characters. the goal of an id is to be unique.\n\nthe advantage of a random id compared to an numeric id starting with 1 with auto increment is that you can set them up decentralised.\n\nthe change of duplicate ids gets bigger once you make them shorter the change of finding an existing id gets bigger once you make them shorter\n\nAn Id with 12 characters would provide 3.22e21 combinations.\n\nWhat is the change of duplicate ids? This depends on the amount of identifyable items in the data What is the change of guessing an id? This depends on speed of a brute force attack and the amount of available datapoints. If you can guess 10000 times per second, you can make 864.000.000 guesses. A billion guesses on a dataset of a billion datapoints yields 3226 correct ids on average.\n\nWhy make an id short? I don't know if there's an important reason.\n\nAll in all, I think we should make ids 24 characters by default. This would make it very easy to store, yet, with more than E42 combinations, make it nearly impossible to get duplication or brute force hits.\n\nAn id would look like this:\n\n``` { \"id\": \"sk2EcW9AkZpksk2EcW9AkZpk\" } ```\n\nLooks good to me! Don't think about it and just keep it simple. We can always migrate later to a bigger amount, but I don't see good reason to keep it smaller than this.",
                                      "type": "string"
                                    }
                                  },
                                  {
                                    "name": "datasetId",
                                    "required": false,
                                    "schema": {
                                      "fullComment": "If selected, the authorization will apply to this dataset\n\nShould be an unique string By default, you can use `generateId()` to generate a random string of 16 characters. If you wish, you can also use any other string, as long as you are sure it's unique.\n\n# Background Info\n\nazAZ09 characters are easy to copy and provide 62 characters. the goal of an id is to be unique.\n\nthe advantage of a random id compared to an numeric id starting with 1 with auto increment is that you can set them up decentralised.\n\nthe change of duplicate ids gets bigger once you make them shorter the change of finding an existing id gets bigger once you make them shorter\n\nAn Id with 12 characters would provide 3.22e21 combinations.\n\nWhat is the change of duplicate ids? This depends on the amount of identifyable items in the data What is the change of guessing an id? This depends on speed of a brute force attack and the amount of available datapoints. If you can guess 10000 times per second, you can make 864.000.000 guesses. A billion guesses on a dataset of a billion datapoints yields 3226 correct ids on average.\n\nWhy make an id short? I don't know if there's an important reason.\n\nAll in all, I think we should make ids 24 characters by default. This would make it very easy to store, yet, with more than E42 combinations, make it nearly impossible to get duplication or brute force hits.\n\nAn id would look like this:\n\n``` { \"id\": \"sk2EcW9AkZpksk2EcW9AkZpk\" } ```\n\nLooks good to me! Don't think about it and just keep it simple. We can always migrate later to a bigger amount, but I don't see good reason to keep it smaller than this.",
                                      "type": "string"
                                    }
                                  },
                                  {
                                    "name": "authorizedProjectRelativePath",
                                    "required": false,
                                    "schema": {
                                      "fullComment": "If selected, the authorization will apply to everything in this folder or to this specific file",
                                      "type": "string"
                                    }
                                  },
                                  {
                                    "name": "canExecute",
                                    "required": false,
                                    "schema": {
                                      "type": "boolean"
                                    }
                                  },
                                  {
                                    "name": "canWriteCreate",
                                    "required": false,
                                    "schema": {
                                      "type": "boolean"
                                    }
                                  },
                                  {
                                    "name": "canWriteUpdate",
                                    "required": false,
                                    "schema": {
                                      "type": "boolean"
                                    }
                                  },
                                  {
                                    "name": "canWriteDelete",
                                    "required": false,
                                    "schema": {
                                      "type": "boolean"
                                    }
                                  },
                                  {
                                    "name": "canRead",
                                    "required": false,
                                    "schema": {
                                      "type": "boolean"
                                    }
                                  },
                                  {
                                    "name": "canSearch",
                                    "required": false,
                                    "schema": {
                                      "type": "boolean"
                                    }
                                  }
                                ],
                                "type": "object"
                              },
                              "name": "Authorization"
                            }
                          ],
                          "type": "array"
                        }
                      },
                      {
                        "name": "indexedAuthorizationCalculated",
                        "required": false,
                        "schema": {
                          "items": [
                            {
                              "schema": {
                                "fullComment": "Authorization model for indexed authorizations\n\nDon't edit this! If you wish to add authorizations to a group, either edit the code or text-files, or provide custom authorizations to the `Group`.",
                                "properties": [
                                  {
                                    "name": "isProjectWide",
                                    "required": false,
                                    "schema": {
                                      "fullComment": "If true, this authorization is project-wide and applies to everything",
                                      "type": "boolean"
                                    }
                                  },
                                  {
                                    "name": "authorizedOperationName",
                                    "required": false,
                                    "schema": {
                                      "fullComment": "If selected, the authorization will apply to the whole operation",
                                      "type": "string"
                                    }
                                  },
                                  {
                                    "name": "tsFunctionId",
                                    "required": false,
                                    "schema": {
                                      "fullComment": "If selected, the authorization will apply to this function\n\nShould be an unique string By default, you can use `generateId()` to generate a random string of 16 characters. If you wish, you can also use any other string, as long as you are sure it's unique.\n\n# Background Info\n\nazAZ09 characters are easy to copy and provide 62 characters. the goal of an id is to be unique.\n\nthe advantage of a random id compared to an numeric id starting with 1 with auto increment is that you can set them up decentralised.\n\nthe change of duplicate ids gets bigger once you make them shorter the change of finding an existing id gets bigger once you make them shorter\n\nAn Id with 12 characters would provide 3.22e21 combinations.\n\nWhat is the change of duplicate ids? This depends on the amount of identifyable items in the data What is the change of guessing an id? This depends on speed of a brute force attack and the amount of available datapoints. If you can guess 10000 times per second, you can make 864.000.000 guesses. A billion guesses on a dataset of a billion datapoints yields 3226 correct ids on average.\n\nWhy make an id short? I don't know if there's an important reason.\n\nAll in all, I think we should make ids 24 characters by default. This would make it very easy to store, yet, with more than E42 combinations, make it nearly impossible to get duplication or brute force hits.\n\nAn id would look like this:\n\n``` { \"id\": \"sk2EcW9AkZpksk2EcW9AkZpk\" } ```\n\nLooks good to me! Don't think about it and just keep it simple. We can always migrate later to a bigger amount, but I don't see good reason to keep it smaller than this.",
                                      "type": "string"
                                    }
                                  },
                                  {
                                    "name": "tsVariableId",
                                    "required": false,
                                    "schema": {
                                      "fullComment": "If selected, the authorization will apply to this variable\n\nShould be an unique string By default, you can use `generateId()` to generate a random string of 16 characters. If you wish, you can also use any other string, as long as you are sure it's unique.\n\n# Background Info\n\nazAZ09 characters are easy to copy and provide 62 characters. the goal of an id is to be unique.\n\nthe advantage of a random id compared to an numeric id starting with 1 with auto increment is that you can set them up decentralised.\n\nthe change of duplicate ids gets bigger once you make them shorter the change of finding an existing id gets bigger once you make them shorter\n\nAn Id with 12 characters would provide 3.22e21 combinations.\n\nWhat is the change of duplicate ids? This depends on the amount of identifyable items in the data What is the change of guessing an id? This depends on speed of a brute force attack and the amount of available datapoints. If you can guess 10000 times per second, you can make 864.000.000 guesses. A billion guesses on a dataset of a billion datapoints yields 3226 correct ids on average.\n\nWhy make an id short? I don't know if there's an important reason.\n\nAll in all, I think we should make ids 24 characters by default. This would make it very easy to store, yet, with more than E42 combinations, make it nearly impossible to get duplication or brute force hits.\n\nAn id would look like this:\n\n``` { \"id\": \"sk2EcW9AkZpksk2EcW9AkZpk\" } ```\n\nLooks good to me! Don't think about it and just keep it simple. We can always migrate later to a bigger amount, but I don't see good reason to keep it smaller than this.",
                                      "type": "string"
                                    }
                                  },
                                  {
                                    "name": "tsInterfaceId",
                                    "required": false,
                                    "schema": {
                                      "fullComment": "If selected, the authorization will apply to this interface\n\nShould be an unique string By default, you can use `generateId()` to generate a random string of 16 characters. If you wish, you can also use any other string, as long as you are sure it's unique.\n\n# Background Info\n\nazAZ09 characters are easy to copy and provide 62 characters. the goal of an id is to be unique.\n\nthe advantage of a random id compared to an numeric id starting with 1 with auto increment is that you can set them up decentralised.\n\nthe change of duplicate ids gets bigger once you make them shorter the change of finding an existing id gets bigger once you make them shorter\n\nAn Id with 12 characters would provide 3.22e21 combinations.\n\nWhat is the change of duplicate ids? This depends on the amount of identifyable items in the data What is the change of guessing an id? This depends on speed of a brute force attack and the amount of available datapoints. If you can guess 10000 times per second, you can make 864.000.000 guesses. A billion guesses on a dataset of a billion datapoints yields 3226 correct ids on average.\n\nWhy make an id short? I don't know if there's an important reason.\n\nAll in all, I think we should make ids 24 characters by default. This would make it very easy to store, yet, with more than E42 combinations, make it nearly impossible to get duplication or brute force hits.\n\nAn id would look like this:\n\n``` { \"id\": \"sk2EcW9AkZpksk2EcW9AkZpk\" } ```\n\nLooks good to me! Don't think about it and just keep it simple. We can always migrate later to a bigger amount, but I don't see good reason to keep it smaller than this.",
                                      "type": "string"
                                    }
                                  },
                                  {
                                    "name": "datasetId",
                                    "required": false,
                                    "schema": {
                                      "fullComment": "If selected, the authorization will apply to this dataset\n\nShould be an unique string By default, you can use `generateId()` to generate a random string of 16 characters. If you wish, you can also use any other string, as long as you are sure it's unique.\n\n# Background Info\n\nazAZ09 characters are easy to copy and provide 62 characters. the goal of an id is to be unique.\n\nthe advantage of a random id compared to an numeric id starting with 1 with auto increment is that you can set them up decentralised.\n\nthe change of duplicate ids gets bigger once you make them shorter the change of finding an existing id gets bigger once you make them shorter\n\nAn Id with 12 characters would provide 3.22e21 combinations.\n\nWhat is the change of duplicate ids? This depends on the amount of identifyable items in the data What is the change of guessing an id? This depends on speed of a brute force attack and the amount of available datapoints. If you can guess 10000 times per second, you can make 864.000.000 guesses. A billion guesses on a dataset of a billion datapoints yields 3226 correct ids on average.\n\nWhy make an id short? I don't know if there's an important reason.\n\nAll in all, I think we should make ids 24 characters by default. This would make it very easy to store, yet, with more than E42 combinations, make it nearly impossible to get duplication or brute force hits.\n\nAn id would look like this:\n\n``` { \"id\": \"sk2EcW9AkZpksk2EcW9AkZpk\" } ```\n\nLooks good to me! Don't think about it and just keep it simple. We can always migrate later to a bigger amount, but I don't see good reason to keep it smaller than this.",
                                      "type": "string"
                                    }
                                  },
                                  {
                                    "name": "authorizedProjectRelativePath",
                                    "required": false,
                                    "schema": {
                                      "fullComment": "If selected, the authorization will apply to everything in this folder or to this specific file",
                                      "type": "string"
                                    }
                                  },
                                  {
                                    "name": "canExecute",
                                    "required": false,
                                    "schema": {
                                      "type": "boolean"
                                    }
                                  },
                                  {
                                    "name": "canWriteCreate",
                                    "required": false,
                                    "schema": {
                                      "type": "boolean"
                                    }
                                  },
                                  {
                                    "name": "canWriteUpdate",
                                    "required": false,
                                    "schema": {
                                      "type": "boolean"
                                    }
                                  },
                                  {
                                    "name": "canWriteDelete",
                                    "required": false,
                                    "schema": {
                                      "type": "boolean"
                                    }
                                  },
                                  {
                                    "name": "canRead",
                                    "required": false,
                                    "schema": {
                                      "type": "boolean"
                                    }
                                  },
                                  {
                                    "name": "canSearch",
                                    "required": false,
                                    "schema": {
                                      "type": "boolean"
                                    }
                                  },
                                  {
                                    "name": "createdAt",
                                    "required": true,
                                    "schema": {
                                      "fullComment": "Time\n\nTime can be stored in various ways but in my experience it is, again, best to keep it simple and just have one way to store time. I can think about this for hours, but my intuition goes towards using the same format as Date.now() because it is a very small format and is easy to read.\n\nIt is the amount of ms since 1970.\n\nI could argue to store it in seconds since 1970 since there are few applications of doing ms, but maybe we do, and it's just 30% bigger. No problem.\n\nTherefore, let's store all time values in the format Date.now()",
                                      "type": "number"
                                    }
                                  },
                                  {
                                    "name": "updatedAt",
                                    "required": true,
                                    "schema": {
                                      "fullComment": "Time\n\nTime can be stored in various ways but in my experience it is, again, best to keep it simple and just have one way to store time. I can think about this for hours, but my intuition goes towards using the same format as Date.now() because it is a very small format and is easy to read.\n\nIt is the amount of ms since 1970.\n\nI could argue to store it in seconds since 1970 since there are few applications of doing ms, but maybe we do, and it's just 30% bigger. No problem.\n\nTherefore, let's store all time values in the format Date.now()",
                                      "type": "number"
                                    }
                                  },
                                  {
                                    "name": "deletedAt",
                                    "required": true,
                                    "schema": {
                                      "fullComment": "Time\n\nTime can be stored in various ways but in my experience it is, again, best to keep it simple and just have one way to store time. I can think about this for hours, but my intuition goes towards using the same format as Date.now() because it is a very small format and is easy to read.\n\nIt is the amount of ms since 1970.\n\nI could argue to store it in seconds since 1970 since there are few applications of doing ms, but maybe we do, and it's just 30% bigger. No problem.\n\nTherefore, let's store all time values in the format Date.now()",
                                      "type": "number"
                                    }
                                  },
                                  {
                                    "name": "createdFirstAt",
                                    "required": true,
                                    "schema": {
                                      "fullComment": "in some cases, data can be created before it was created in our system. In this case, use CreatedFirstAt if this information is important.\n\nTime\n\nTime can be stored in various ways but in my experience it is, again, best to keep it simple and just have one way to store time. I can think about this for hours, but my intuition goes towards using the same format as Date.now() because it is a very small format and is easy to read.\n\nIt is the amount of ms since 1970.\n\nI could argue to store it in seconds since 1970 since there are few applications of doing ms, but maybe we do, and it's just 30% bigger. No problem.\n\nTherefore, let's store all time values in the format Date.now()",
                                      "type": "number"
                                    }
                                  },
                                  {
                                    "name": "operationName",
                                    "required": true,
                                    "schema": {
                                      "fullComment": "name of operation the model belongs to\n\n- calculated value (not stored in database)\n- can be `null` or an actual operationName that it was saved at\n- can be `undefined` when you are creating an item, because then it can be set for you",
                                      "type": "null"
                                    }
                                  },
                                  {
                                    "name": "projectRelativePath",
                                    "required": true,
                                    "schema": {
                                      "fullComment": "path to dbfile\n\n- calculated value (not stored in database)\n- relatively from the project (without slash at start)\n- can be `undefined` when you are creating an item, because then it can be set for you",
                                      "type": "string"
                                    }
                                  },
                                  {
                                    "name": "operationRelativePath",
                                    "required": false,
                                    "schema": {
                                      "fullComment": "path to db file\n\n- relatively from the operation root folder (without slash at start)\n- calculated value (not stored in database)\n- can be `undefined` if the db file does not belong to an operation\n- can be `undefined` when you are creating an item, because then it can be set for you",
                                      "type": "string"
                                    }
                                  },
                                  {
                                    "name": "id",
                                    "required": true,
                                    "schema": {
                                      "fullComment": "Should be an unique string By default, you can use `generateId()` to generate a random string of 16 characters. If you wish, you can also use any other string, as long as you are sure it's unique.\n\n# Background Info\n\nazAZ09 characters are easy to copy and provide 62 characters. the goal of an id is to be unique.\n\nthe advantage of a random id compared to an numeric id starting with 1 with auto increment is that you can set them up decentralised.\n\nthe change of duplicate ids gets bigger once you make them shorter the change of finding an existing id gets bigger once you make them shorter\n\nAn Id with 12 characters would provide 3.22e21 combinations.\n\nWhat is the change of duplicate ids? This depends on the amount of identifyable items in the data What is the change of guessing an id? This depends on speed of a brute force attack and the amount of available datapoints. If you can guess 10000 times per second, you can make 864.000.000 guesses. A billion guesses on a dataset of a billion datapoints yields 3226 correct ids on average.\n\nWhy make an id short? I don't know if there's an important reason.\n\nAll in all, I think we should make ids 24 characters by default. This would make it very easy to store, yet, with more than E42 combinations, make it nearly impossible to get duplication or brute force hits.\n\nAn id would look like this:\n\n``` { \"id\": \"sk2EcW9AkZpksk2EcW9AkZpk\" } ```\n\nLooks good to me! Don't think about it and just keep it simple. We can always migrate later to a bigger amount, but I don't see good reason to keep it smaller than this.",
                                      "type": "string"
                                    }
                                  },
                                  {
                                    "name": "categoryStackCalculated",
                                    "required": false,
                                    "schema": {
                                      "fullComment": "In case of jsonSingle storageMethod, the categoryStack is generated by the location of the file in the db model folder in the db folder.\n\nNB: Changing this value when updating/upserting, changes where the item is located!\n\nTaken from the location in the folder of the db-model.\n\nNB: Changing this value when updating/upserting, changes where the item is located!",
                                      "nb": "Changing this value when updating/upserting, changes where the item is located!",
                                      "items": [
                                        {
                                          "schema": {
                                            "type": "string"
                                          },
                                          "name": null
                                        }
                                      ],
                                      "type": "array"
                                    }
                                  }
                                ],
                                "type": "object"
                              },
                              "name": "AuthorizationModel"
                            }
                          ],
                          "type": "array"
                        }
                      }
                    ],
                    "type": "object"
                  },
                  "name": "Group"
                }
              ],
              "type": "array"
            }
          },
          {
            "name": "authToken",
            "required": false,
            "schema": {
              "fullComment": "DEPRECATED: should use device.authToken, no duplication needed, only causes confusion and potentially bugs.",
              "type": "string"
            }
          }
        ],
        "type": "object"
      },
      "required": true
    }
  ],
  "description": "Get the readable and writeable basePaths of any user (project relative)\n\nIf you're not signed in as a person, this function will return an empty array\n\nBasepaths need to be:\n\n- If you're admin, all files everywhere, `root` is visible, is `/`\n- user has is `/knowledge/persons/[slug]`\n- for every group you're in, there should be a button leading to `/knowledge/groups/[slug]`",
  "returnType": {
    "rawType": "{ projectRelativePath: string; name: string; }[]",
    "typeDefinition": {
      "optional": false,
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "projectRelativePath": {
            "type": "string",
            "allOf": [
              {
                "transform": [
                  "trim"
                ]
              },
              {
                "minLength": 1
              }
            ]
          },
          "name": {
            "type": "string",
            "allOf": [
              {
                "transform": [
                  "trim"
                ]
              },
              {
                "minLength": 1
              }
            ]
          }
        },
        "required": [
          "projectRelativePath",
          "name"
        ]
      }
    },
    "typeCoverage": 0,
    "isArray": true,
    "isEnum": false,
    "isObject": true,
    "isPrimitive": false,
    "isEnumLiteral": false,
    "simplifiedSchema": {
      "items": [
        {
          "schema": {
            "properties": [
              {
                "name": "projectRelativePath",
                "required": true,
                "schema": {
                  "type": "string"
                }
              },
              {
                "name": "name",
                "required": true,
                "schema": {
                  "type": "string"
                }
              }
            ],
            "type": "object"
          },
          "name": null
        }
      ],
      "type": "array"
    }
  },
  "maxIndentationDepth": 7,
  "size": {
    "characters": 1665,
    "lines": 62,
    "bytes": 1665,
    "bytesPerCharacter": 1,
    "charactersPerLine": 27,
    "linesPerFile": 62,
    "numberOfFiles": 1
  },
  "id": "khrjcxnwbobrehxzuduubmhy"
}