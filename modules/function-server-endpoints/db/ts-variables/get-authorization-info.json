{
  "createdAt": 1678329831026,
  "updatedAt": 1678329831026,
  "deletedAt": 0,
  "createdFirstAt": 1678329831026,
  "classification": "const",
  "comments": [],
  "isExported": true,
  "name": "getAuthorizationInfo",
  "slug": "get-authorization-info",
  "operationRelativeTypescriptFilePath": "src/getAuthorizationInfo.ts",
  "type": {
    "rawType": "(device: Omit<TModel, import(\"/Users/clarity/os/operations/tools/types/model-types/build/generics\").ShouldNotBeStored>, fn: { (...parameters: any): any; [key: string]: any; }) => boolean",
    "typeDefinition": {
      "type": "object",
      "properties": {},
      "optional": false
    },
    "typeCoverage": 0,
    "isArray": false,
    "isEnum": false,
    "isObject": true,
    "isPrimitive": false,
    "isEnumLiteral": false,
    "simplifiedSchema": {
      "properties": [],
      "type": "object"
    }
  },
  "value": "(\n  device: Storing<Device>,\n  fn: { (...parameters: any): any; [key: string]: any }\n): boolean => {\n  const currentPersonGroupSlugs = (\n    device?.currentPersonCalculated?.groupSlugs || []\n  ).concat(\"public\");\n\n  const isAdmin = currentPersonGroupSlugs.includes(\"admin\");\n  if (isAdmin) {\n    // admins can execute everything\n    return true;\n  }\n  /**\n   * Function might have config `StandardFunctionConfig`\n   */\n  const config = fn.config as StandardFunctionConfig | undefined;\n\n  if (config?.isPublic) {\n    // a public function can always be executed\n    return true;\n  }\n  const authorizationString = currentPersonGroupSlugs\n    ?.map((groupSlug) => config?.authorizations?.[groupSlug])\n    .filter(notEmpty)\n    .join(\"\");\n\n  const hasAuthorization = authorizationString.includes(\"x\");\n\n  // console.log({ name: fn.name, config, authorizationString, hasAuthorization });\n\n  return hasAuthorization;\n}",
  "description": "returns `AuthorizationInfo` for a device + function",
  "id": "tnafwubiyuujjkmpbycramge"
}