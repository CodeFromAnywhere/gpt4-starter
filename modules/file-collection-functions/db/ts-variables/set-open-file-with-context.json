{
  "createdAt": 1678330469057,
  "updatedAt": 1678330469057,
  "deletedAt": 0,
  "createdFirstAt": 1678330469057,
  "classification": "const",
  "comments": [],
  "isExported": true,
  "name": "setOpenFileWithContext",
  "slug": "set-open-file-with-context",
  "operationRelativeTypescriptFilePath": "src/setOpenFileWithContext.ts",
  "type": {
    "rawType": "(functionContext: import(\"/Users/clarity/os/operations/tools/purpose/codebase-introspection/functions/function-types/build/FunctionContext\").FunctionContext, queryPath: string, action: \"pin\" | \"unpin\" | \"open\" | \"close\") => any",
    "typeDefinition": {
      "type": "object",
      "properties": {},
      "optional": false
    },
    "typeCoverage": 0,
    "isArray": false,
    "isEnum": false,
    "isObject": true,
    "isPrimitive": false,
    "isEnumLiteral": false,
    "simplifiedSchema": {
      "properties": [],
      "type": "object"
    }
  },
  "value": "async (\n  functionContext: FunctionContext,\n  queryPath: string,\n  action: \"pin\" | \"unpin\" | \"open\" | \"close\"\n) => {\n  const personId = functionContext.device.currentPersonCalculated?.id;\n\n  if (!personId) {\n    // NB: must be logged in\n    return;\n  }\n\n  // 1) see if this is allowed\n\n  const queryInfo = await getQueryInfo({ queryPath });\n\n  const projectRelativePath = queryInfo.result?.projectRelativeFilePath;\n\n  if (!projectRelativePath) {\n    //NB: must be a file, for now\n    return;\n  }\n\n  const { canRead } = await getFsAuthorizationWithContext(\n    functionContext,\n    projectRelativePath\n  );\n\n  if (!canRead) {\n    return;\n  }\n\n  const openFiles = await db.get(\"OpenFile\");\n  const already = openFiles.find(\n    (x) =>\n      x.personId === personId &&\n      x.file_projectRelativePath === projectRelativePath\n  );\n  const openedAt =\n    action === \"open\" ? Date.now() : already?.openedAt || Date.now();\n\n  const isPinned =\n    action === \"pin\" ? true : action === \"unpin\" ? false : already?.isPinned;\n\n  const isOpen = [\"open\", \"pin\"].includes(action)\n    ? true\n    : action === \"close\"\n    ? false\n    : already?.isOpen;\n\n  const item: Creation<OpenFile> = {\n    file_projectRelativePath: projectRelativePath,\n    personId,\n    isPinned,\n    isOpen,\n    openedAt,\n  };\n\n  //2) upsert OpenFile\n  const upsertResult = await db.upsert(\"OpenFile\", item);\n\n  return;\n}",
  "description": "Apply a state",
  "id": "sdiugfrkwwcafzdhdbbungqc"
}