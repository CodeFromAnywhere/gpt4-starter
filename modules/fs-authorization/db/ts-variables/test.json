{
  "createdAt": 1678330546651,
  "updatedAt": 1678330546651,
  "deletedAt": 0,
  "createdFirstAt": 1678330546651,
  "classification": "const",
  "comments": [],
  "isExported": false,
  "name": "test",
  "slug": "test",
  "operationRelativeTypescriptFilePath": "src/getFsAuthorizationWithContext.test.ts",
  "type": {
    "rawType": "() => any",
    "typeDefinition": {
      "type": "object",
      "properties": {},
      "optional": false
    },
    "typeCoverage": 0,
    "isArray": false,
    "isEnum": false,
    "isObject": true,
    "isPrimitive": false,
    "isEnumLiteral": false,
    "simplifiedSchema": {
      "properties": [],
      "type": "object"
    }
  },
  "value": "async () => {\n  const testables = await getFsAuthorizationTestables();\n\n  const results = await Promise.all(\n    testables.map(async (testable) => {\n      const { functionContext, groupSlug, projectRelativePath } = testable;\n      if (!functionContext) return;\n\n      const result = await getFsAuthorizationWithContext(\n        functionContext,\n        projectRelativePath,\n        true\n      );\n\n      return { groupSlug, result, projectRelativePath };\n    })\n  );\n\n  writeToAssets(__filename, results, \"getFsAuthorizationWithContext.test.json\");\n}",
  "description": "Test to ensure that the fs authorization works as expected.\n\nVariables:\n\n- role\n- fs location\n\nTests\n- all roles have access to different places as expected\n- all `AuthorizationProperties` work as expected and map to the correct r/w\n- both `.MarkdownIndex.json` as well as frontmatter works as expected (separate function, separate test)",
  "id": "xpdseqpkkejyyespipmawjyw"
}