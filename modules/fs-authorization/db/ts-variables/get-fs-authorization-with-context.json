{
  "createdAt": 1678330549138,
  "updatedAt": 1678330549138,
  "deletedAt": 0,
  "createdFirstAt": 1678330549138,
  "classification": "const",
  "comments": [],
  "isExported": true,
  "name": "getFsAuthorizationWithContext",
  "slug": "get-fs-authorization-with-context",
  "operationRelativeTypescriptFilePath": "src/getFsAuthorizationWithContext.ts",
  "type": {
    "rawType": "(functionContext: import(\"/Users/clarity/os/operations/tools/purpose/codebase-introspection/functions/function-types/build/FunctionContext\").FunctionContext, projectRelativePath: string, isDebug?: boolean | undefined) => Promise<{ canRead: boolean; canWrite: boolean; }>",
    "typeDefinition": {
      "type": "object",
      "properties": {},
      "optional": false
    },
    "typeCoverage": 0,
    "isArray": false,
    "isEnum": false,
    "isObject": true,
    "isPrimitive": false,
    "isEnumLiteral": false,
    "simplifiedSchema": {
      "properties": [],
      "type": "object"
    }
  },
  "value": "async (\n  functionContext: FunctionContext,\n  projectRelativePath: string,\n  isDebug?: boolean\n): Promise<{ canRead: boolean; canWrite: boolean }> => {\n  // NB: Should be attached in functionContext for any logged in user.\n  const user_groupSlugs = functionContext.device.currentPersonCalculated\n    ?.groupSlugs || [\"public\"];\n\n  const isPublic =\n    user_groupSlugs.length === 1 && user_groupSlugs[0] === \"public\";\n\n  // 1) Get the paths that this user can r/w\n  const projectRelativeBasePathArray = functionContext\n    ? getExplorableBasePathsWithContext(functionContext)\n    : [];\n\n  // NB: Find the basefolder path that is applicable\n  const projectRelativeBaseFolderPath =\n    projectRelativeBasePathArray.find(\n      (p) =>\n        // NB: the \"/\" is super important to ensure it's the end of the folder\n        projectRelativePath === p.projectRelativePath ||\n        projectRelativePath.startsWith(p.projectRelativePath + \"/\")\n    )?.projectRelativePath || \"\";\n\n  // public is read-only, everything else is r/w except for the base path, which is inaccessible by default.\n  const baseAuthorization = isPublic\n    ? { canRead: true, canWrite: false }\n    : projectRelativeBaseFolderPath !== \"\"\n    ? { canRead: true, canWrite: true }\n    : { canRead: false, canWrite: false };\n\n  // 2) get the `projectRelativeFolderPath`\n  const projectRoot = getProjectRoot();\n  if (!projectRoot) {\n    return { canRead: false, canWrite: false };\n  }\n\n  const absolutePath = path.join(projectRoot, projectRelativePath);\n  // const exists = fs.existsSync(absolutePath);\n\n  // if (!exists) {\n  //   console.log(`${projectRelativePath} doesnt exist`);\n  //   return { canRead: false, canWrite: false };\n  // }\n\n  const isFolder = fs.existsSync(absolutePath)\n    ? (await fs.stat(absolutePath)).isDirectory()\n    : undefined;\n\n  const projectRelativeFolderPath = isFolder\n    ? projectRelativePath\n    : makeRelative(path.parse(absolutePath).dir, projectRoot);\n\n  // 3) Get all folder paths from the base until the folder of the file\n  const basePathRelativeFolderPath = makeRelative(\n    projectRelativeFolderPath,\n    projectRelativeBaseFolderPath\n  );\n\n  const projectRelativeFolderPaths = getAllFoldersUntilFolder(\n    basePathRelativeFolderPath\n  ).map((p) => path.join(projectRelativeBaseFolderPath, p));\n  if (isDebug) {\n    console.log({\n      projectRelativePath,\n      projectRelativeFolderPath,\n      projectRelativeBaseFolderPath,\n      user_groupSlugs,\n      basePathRelativeFolderPath,\n      projectRelativeFolderPaths,\n    });\n  }\n  // 4) If they have a readme, read that MarkdownIndex. also get the MarkdownIndex for the file itself\n  const projectRelativeReadmePaths = (\n    await Promise.all(\n      projectRelativeFolderPaths.map((p) =>\n        returnReadmePathFromFolder(path.join(projectRoot, p))\n      )\n    )\n  )\n    .filter(notEmpty)\n    .map((p) => makeRelative(p, projectRoot));\n\n  const allProjectRelativeFilePaths = isFolder\n    ? projectRelativeReadmePaths\n    : projectRelativeReadmePaths\n        .concat(projectRelativePath)\n        .filter(onlyUnique2());\n\n  const allFolderAuthorizations = await Promise.all(\n    allProjectRelativeFilePaths.map(async (projectRelativeFilePath) => {\n      const authorization = await getFsAuthorizationSingleFile({\n        projectRelativeFilePath,\n        user_groupSlugs,\n      });\n\n      return { projectRelativeFilePath, authorization };\n    })\n  );\n\n  if (isDebug) {\n    console.dir(\n      {\n        allProjectRelativeFilePaths,\n        baseAuthorization,\n        allFolderAuthorizations,\n      },\n      { depth: 999 }\n    );\n  }\n  // 5) Reduce the MarkdownIndex[]. Start with `{ canWrite: false, canRead: false }` (pessimistic), but if the AutorizatonProperties indicate the contrary, change it. Go all the way down to the file. in other words: going from top of the fs (base folder path), to deepest folder, to file.\n\n  const authorization = allFolderAuthorizations.reduce(\n    (previousAuthorization, currentAuthorization) => {\n      // If we found an authorization for this file, return it. Otherwise return the previous one\n      return currentAuthorization.authorization || previousAuthorization;\n    },\n    baseAuthorization\n  );\n\n  return authorization;\n}",
  "description": "General purpose function to see what the rights are for any user for any folder in the file system (project relative only)\n\nHow it works: going from top of the fs (base folder path), to deepest folder, to file, checking authorization for every folder up until the file.",
  "id": "pesurlnlvxwtsnjelpxluair"
}