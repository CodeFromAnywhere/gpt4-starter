{
  "createdAt": 1678330539630,
  "updatedAt": 1678330539630,
  "deletedAt": 0,
  "createdFirstAt": 1678330539630,
  "isApiExposed": false,
  "isExported": true,
  "operationRelativeTypescriptFilePath": "src/getFsAuthorizationSingleFile.ts",
  "commentsInside": [],
  "rawText": " async (config: {\n  projectRelativeFilePath: string;\n  /**\n   * groupSlugs of the user. Should include \"public\"\n   */\n  user_groupSlugs: string[];\n  isDebug?: boolean;\n}): Promise<\n  | {\n      canRead: boolean;\n      canWrite: boolean;\n      authorizationProperties?: AuthorizationProperties;\n    }\n  | undefined\n> => {\n  const { projectRelativeFilePath, user_groupSlugs, isDebug } = config;\n  const projectRoot = getProjectRoot();\n  if (!projectRoot) {\n    return;\n  }\n  const absoluteFilePath = path.join(projectRoot, projectRelativeFilePath);\n  if (!fs.existsSync(absoluteFilePath)) {\n    return;\n  }\n\n  const markdownIndex = await getMarkdownIndex(projectRelativeFilePath);\n\n  const authorizationProperties: AuthorizationProperties | undefined =\n    markdownIndex;\n\n  const hasNoAuthProperties =\n    !authorizationProperties ||\n    (authorizationProperties?.isDraft === undefined &&\n      authorizationProperties?.isAnonymous === undefined &&\n      authorizationProperties?.isSecret === undefined &&\n      authorizationProperties?.isPrivate === undefined &&\n      authorizationProperties?.isPublic === undefined);\n\n  if (hasNoAuthProperties) {\n    // no specified auth, so we can take the previous folder or one of the next ones as source of truth\n    return;\n  }\n  /**\n   * boolean indicating it's already released (not in the future)\n   */\n  const isAvailable = authorizationProperties?.isAvailableFromDateAt\n    ? authorizationProperties.isAvailableFromDateAt < Date.now()\n    : true;\n\n  const canReadGroupSlugs = (\n    authorizationProperties?.canRead_groupSlugs || []\n  ).concat(\"admin\");\n  const canWriteGroupSlugs = (\n    authorizationProperties?.canRead_groupSlugs || []\n  ).concat(\"admin\");\n\n  const isReadGroup = !!canReadGroupSlugs.find((slug) =>\n    user_groupSlugs.includes(slug)\n  );\n  const isWriteGroup = !!canWriteGroupSlugs.find((slug) =>\n    user_groupSlugs.includes(slug)\n  );\n\n  const isPublic =\n    (authorizationProperties?.isPublic || hasNoAuthProperties) && isAvailable;\n\n  const canRead = isPublic || isReadGroup;\n  const canWrite = isWriteGroup;\n\n  if (isDebug) {\n    console.log({\n      markdownIndex,\n      canReadGroupSlugs,\n      canWriteGroupSlugs,\n      isReadGroup,\n      isWriteGroup,\n      isPublic,\n    });\n  }\n\n  return { canRead, canWrite, authorizationProperties };\n}",
  "name": "getFsAuthorizationSingleFile",
  "slug": "get-fs-authorization-single-file",
  "parameters": [
    {
      "name": "config",
      "schema": {
        "type": "object",
        "properties": {
          "projectRelativeFilePath": {
            "type": "string"
          },
          "user_groupSlugs": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "groupSlugs of the user. Should include \"public\""
          },
          "isDebug": {
            "type": "boolean"
          }
        },
        "required": [
          "projectRelativeFilePath",
          "user_groupSlugs"
        ],
        "additionalProperties": false
      },
      "simplifiedSchema": {
        "properties": [
          {
            "name": "projectRelativeFilePath",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "user_groupSlugs",
            "required": true,
            "schema": {
              "fullComment": "groupSlugs of the user. Should include \"public\"",
              "items": [
                {
                  "schema": {
                    "type": "string"
                  },
                  "name": null
                }
              ],
              "type": "array"
            }
          },
          {
            "name": "isDebug",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "type": "object"
      },
      "required": true
    }
  ],
  "description": "General purpose function to see what the rights are for any user for any file in the file system (project relative only)\n\nNB: checks just the one file! Doesn't take into account underlying folders!",
  "returnType": {
    "rawType": "Promise<{ canRead: boolean; canWrite: boolean; authorizationProperties?: import(\"/Users/clarity/os/operations/tools/types/markdown-types/build/AuthorizationProperties\").AuthorizationProperties | undefined; } | undefined>",
    "typeCoverage": 0,
    "isArray": false,
    "isEnum": false,
    "isObject": false,
    "isPrimitive": false,
    "isEnumLiteral": false
  },
  "maxIndentationDepth": 3,
  "size": {
    "characters": 2508,
    "lines": 84,
    "bytes": 2508,
    "bytesPerCharacter": 1,
    "charactersPerLine": 30,
    "linesPerFile": 84,
    "numberOfFiles": 1
  },
  "id": "ebrdzjyncnqmsrhnycsopkpt"
}