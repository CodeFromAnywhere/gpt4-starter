{
  "createdAt": 1678330544112,
  "updatedAt": 1678330544112,
  "deletedAt": 0,
  "createdFirstAt": 1678330544112,
  "isApiExposed": false,
  "isExported": true,
  "operationRelativeTypescriptFilePath": "src/getFsAuthorizationTestables.ts",
  "commentsInside": [],
  "rawText": " async () => {\n  const groupSlugs = [\"admin\", \"public\", \"cfa\"];\n\n  const projectRelativePaths = [\n    ``,\n    `operations/tools/cleanup/os-web`,\n    `assets/music`,\n    `assets/images`,\n    // admin\n    `knowledge/persons/wijnand-karsens`,\n    // cfa\n    `knowledge/persons/wijnand`,\n    `knowledge/groups/admin`,\n    `knowledge/groups/cfa`,\n    `knowledge/groups/public`,\n  ];\n\n  const functionContexts = mergeObjectsArray(\n    await Promise.all(\n      groupSlugs.map(async (groupSlug) => ({\n        [groupSlug]: await getTestFunctionContext(groupSlug),\n      }))\n    )\n  );\n\n  const testableVariables = groupSlugs\n    .map((groupSlug) =>\n      projectRelativePaths.map((projectRelativePath) => ({\n        groupSlug,\n        projectRelativePath,\n        functionContext: functionContexts[groupSlug],\n      }))\n    )\n    .flat();\n\n  return testableVariables;\n}",
  "name": "getFsAuthorizationTestables",
  "slug": "get-fs-authorization-testables",
  "parameters": [],
  "description": "Returns an array of objects containing `groupSlug`, `projectRelativePath` and a belonging `FunctionContext`, that can be used to run tests related to the `fs-authorization`",
  "returnType": {
    "rawType": "unknown",
    "typeCoverage": 0,
    "isArray": false,
    "isEnum": false,
    "isObject": false,
    "isPrimitive": false,
    "isEnumLiteral": false
  },
  "maxIndentationDepth": 4,
  "size": {
    "characters": 1032,
    "lines": 37,
    "bytes": 1032,
    "bytesPerCharacter": 1,
    "charactersPerLine": 28,
    "linesPerFile": 37,
    "numberOfFiles": 1
  },
  "id": "jzhcvuwpconvflrnompojmbv"
}