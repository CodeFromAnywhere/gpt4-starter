{
  "createdAt": 1678043876216,
  "updatedAt": 1678043876216,
  "deletedAt": 0,
  "createdFirstAt": 1678043876216,
  "isApiExposed": false,
  "isExported": true,
  "operationRelativeTypescriptFilePath": "src/usePing.ts",
  "commentsInside": [],
  "rawText": " () => {\n  // ping every time the user returns to the screen. this way the api gets checked\n\n  const pingResult = queries.usePing();\n  const [isOffline, setIsOffline] = useState<boolean | undefined>(undefined);\n  useEffect(() => {\n    const intervalId = setInterval(() => {\n      // every second, check the localstorage for this thing.\n\n      getItem(API_NO_RESPONSE_TIME_KEY).then((value) => {\n        if (value === undefined) {\n          if (isOffline) {\n            setIsOffline(false);\n            return;\n          }\n        }\n\n        const lastNoResponse = Number(value);\n        //  console.log({ lastNoResponse });\n\n        if (lastNoResponse === 0) {\n          // last time we got a response...\n          setIsOffline(false);\n          return;\n        }\n\n        const timeAgo = Date.now() - lastNoResponse;\n\n        if (timeAgo > timeBeforeNotOffline) {\n          // long ago, let's wait for loading it again\n          setIsOffline(undefined);\n          return;\n        }\n\n        // last 10 seconds we tried but itseems to have an error during that time\n        setIsOffline(true);\n      });\n    }, 1000);\n\n    return () => clearInterval(intervalId);\n  }, []);\n\n  return { isOffline };\n}",
  "name": "usePing",
  "slug": "use-ping",
  "parameters": [],
  "description": "",
  "returnType": {
    "rawType": "{ isOffline: boolean | undefined; }",
    "typeDefinition": {
      "type": "object",
      "properties": {
        "isOffline": {
          "type": "boolean"
        }
      },
      "optional": false
    },
    "typeCoverage": 0,
    "isArray": false,
    "isEnum": false,
    "isObject": true,
    "isPrimitive": false,
    "isEnumLiteral": false,
    "simplifiedSchema": {
      "properties": [
        {
          "name": "isOffline",
          "required": false,
          "schema": {
            "type": "boolean"
          }
        }
      ],
      "type": "object"
    }
  },
  "maxIndentationDepth": 6,
  "size": {
    "characters": 1199,
    "lines": 44,
    "bytes": 1199,
    "bytesPerCharacter": 1,
    "charactersPerLine": 27,
    "linesPerFile": 44,
    "numberOfFiles": 1
  },
  "id": "hsevfijtldjnuntfdmkenpet"
}