{
  "createdAt": 1678043898803,
  "updatedAt": 1678043898803,
  "deletedAt": 0,
  "createdFirstAt": 1678043898803,
  "classification": "const",
  "comments": [],
  "isExported": true,
  "name": "runChildProcess",
  "slug": "run-child-process",
  "operationRelativeTypescriptFilePath": "src/runChildProcess.ts",
  "type": {
    "rawType": "(config: { operationFolderName: string; scriptFileName: string; args?: (string | undefined)[] | undefined; isOverlapped?: boolean | undefined; }) => unknown",
    "typeDefinition": {
      "type": "object",
      "properties": {},
      "optional": false
    },
    "typeCoverage": 0,
    "isArray": false,
    "isEnum": false,
    "isObject": true,
    "isPrimitive": false,
    "isEnumLiteral": false,
    "simplifiedSchema": {
      "properties": [],
      "type": "object"
    }
  },
  "value": "async (config: {\n  operationFolderName: string;\n  /**\n   * the location of the script in the build folder\n   * NB: this must be a CLI that that actually executes the function!\n   * NB: must be without extension (without .js)\n   */\n  scriptFileName: string;\n  /**\n   * all arguments you wish to pass to the script. If an argument is undefined, it will not be passed. Arguments to be passed must be strings\n   */\n  args?: (string | undefined)[];\n  isOverlapped?: boolean;\n}) => {\n  const { operationFolderName, scriptFileName, args, isOverlapped } = config;\n\n  const childOperationPath = await getOperationPath(operationFolderName);\n  if (!childOperationPath) {\n    log(\n      `Couldn't find childOperationPath for operation ${operationFolderName}`,\n      { type: \"error\" }\n    );\n    return;\n  }\n  const scriptPath = path.join(\n    childOperationPath,\n    `build/${scriptFileName}.js`\n  );\n\n  if (!fs.existsSync(scriptPath)) {\n    log(\n      `Couldn't find scriptFile ${scriptFileName} which should be at build/${scriptFileName}.js (full path:${scriptPath})`,\n      { type: \"error\" }\n    );\n    return;\n  }\n\n  const readable = await canRead(scriptPath);\n\n  if (!readable) {\n    log(`Can't read ${scriptPath}`, { type: \"error\" });\n    return;\n  }\n\n  const command = `node ${scriptPath} ${\n    args?.filter(notEmpty).join(\" \") || \"\"\n  }`;\n\n  // log(`going to execute: ${command}`, { type: \"important\" });\n\n  const result = spawnSync(command, {\n    shell: isOverlapped ? false : true,\n    stdio: isOverlapped ? \"pipe\" : \"inherit\",\n    encoding: \"utf8\",\n  });\n\n  return result.output;\n}",
  "description": "spawns a child process and returns its output after it's done",
  "id": "wcvzqcozvrtyhkjlzsnrcqxg"
}