[
  {
    "name": "addEmojiToEveryWord",
    "operationName": "ai-functions-node",
    "parameters": [
      {
        "name": "contextContent",
        "schema": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": true
      },
      {
        "name": "prompt_projectRelativePath",
        "schema": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": true
      },
      {
        "name": "isDeferred",
        "schema": {
          "type": "boolean"
        },
        "simplifiedSchema": {
          "type": "boolean"
        },
        "required": false
      }
    ]
  },
  {
    "name": "deletePromptResult",
    "operationName": "ai-functions-node",
    "parameters": [
      {
        "name": "projectRelativePath",
        "schema": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": true
      },
      {
        "name": "id",
        "schema": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": true
      }
    ]
  },
  {
    "name": "emojiAugmentation",
    "operationName": "ai-functions-node",
    "parameters": [
      {
        "name": "contextContent",
        "schema": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": true
      },
      {
        "name": "prompt_projectRelativePath",
        "schema": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": true
      },
      {
        "name": "isDeferred",
        "schema": {
          "type": "boolean"
        },
        "simplifiedSchema": {
          "type": "boolean"
        },
        "required": false
      }
    ]
  },
  {
    "name": "explain",
    "operationName": "ai-functions-node",
    "parameters": [
      {
        "name": "contextContent",
        "schema": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": true
      },
      {
        "name": "selectionContent",
        "schema": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": true
      },
      {
        "name": "prompt_projectRelativePath",
        "schema": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": true
      },
      {
        "name": "isDeferred",
        "schema": {
          "type": "boolean"
        },
        "simplifiedSchema": {
          "type": "boolean"
        },
        "required": false
      }
    ]
  },
  {
    "name": "getContextualPromptResultJsonFilePath",
    "operationName": "ai-functions-node",
    "parameters": [
      {
        "name": "projectRelativePath",
        "schema": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": false
      }
    ]
  },
  {
    "name": "haiku",
    "operationName": "ai-functions-node",
    "parameters": [
      {
        "name": "anyContext",
        "schema": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": true
      },
      {
        "name": "prompt_projectRelativePath",
        "schema": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": true
      },
      {
        "name": "isDeferred",
        "schema": {
          "type": "boolean"
        },
        "simplifiedSchema": {
          "type": "boolean"
        },
        "required": false
      }
    ]
  },
  {
    "name": "investorPitch",
    "operationName": "ai-functions-node",
    "parameters": [
      {
        "name": "contextContent",
        "schema": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": true
      },
      {
        "name": "prompt_projectRelativePath",
        "schema": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": true
      },
      {
        "name": "isDeferred",
        "schema": {
          "type": "boolean"
        },
        "simplifiedSchema": {
          "type": "boolean"
        },
        "required": false
      }
    ]
  },
  {
    "name": "poem",
    "operationName": "ai-functions-node",
    "parameters": [
      {
        "name": "anyContext",
        "schema": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": true
      },
      {
        "name": "prompt_projectRelativePath",
        "schema": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": true
      },
      {
        "name": "isDeferred",
        "schema": {
          "type": "boolean"
        },
        "simplifiedSchema": {
          "type": "boolean"
        },
        "required": false
      }
    ]
  },
  {
    "name": "processPromptOnFile",
    "operationName": "ai-functions-node",
    "parameters": [
      {
        "name": "projectRelativeFilePath",
        "schema": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": true
      },
      {
        "name": "contextualPromptSlug",
        "schema": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": true
      }
    ]
  },
  {
    "name": "quiz",
    "operationName": "ai-functions-node",
    "parameters": [
      {
        "name": "contextContent",
        "schema": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": true
      },
      {
        "name": "prompt_projectRelativePath",
        "schema": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": true
      },
      {
        "name": "isDeferred",
        "schema": {
          "type": "boolean"
        },
        "simplifiedSchema": {
          "type": "boolean"
        },
        "required": false
      }
    ]
  },
  {
    "name": "removeAllFake",
    "operationName": "ai-functions-node",
    "parameters": [
      {
        "name": "basePath",
        "schema": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": false
      }
    ]
  },
  {
    "name": "rickAndMortyRick",
    "operationName": "ai-functions-node",
    "parameters": [
      {
        "name": "anyContext",
        "schema": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": true
      },
      {
        "name": "prompt_projectRelativePath",
        "schema": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": true
      },
      {
        "name": "isDeferred",
        "schema": {
          "type": "boolean"
        },
        "simplifiedSchema": {
          "type": "boolean"
        },
        "required": false
      }
    ]
  },
  {
    "name": "rickAndMorty",
    "operationName": "ai-functions-node",
    "parameters": [
      {
        "name": "contextContent",
        "schema": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": true
      },
      {
        "name": "prompt_projectRelativePath",
        "schema": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": true
      },
      {
        "name": "isDeferred",
        "schema": {
          "type": "boolean"
        },
        "simplifiedSchema": {
          "type": "boolean"
        },
        "required": false
      }
    ]
  },
  {
    "name": "setIsFavoritePromptResult",
    "operationName": "ai-functions-node",
    "parameters": [
      {
        "name": "projectRelativePath",
        "schema": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": true
      },
      {
        "name": "id",
        "schema": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": true
      },
      {
        "name": "isFavorite",
        "schema": {
          "type": "boolean"
        },
        "simplifiedSchema": {
          "type": "boolean"
        },
        "required": true
      }
    ]
  },
  {
    "name": "translateToPortuguese",
    "operationName": "ai-functions-node",
    "parameters": [
      {
        "name": "contextContent",
        "schema": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": true
      },
      {
        "name": "prompt_projectRelativePath",
        "schema": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": true
      },
      {
        "name": "isDeferred",
        "schema": {
          "type": "boolean"
        },
        "simplifiedSchema": {
          "type": "boolean"
        },
        "required": false
      }
    ]
  },
  {
    "name": "getGroupOrPersonId",
    "operationName": "ai-models",
    "parameters": [
      {
        "name": "absoluteAudioFilePath",
        "schema": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": true
      }
    ]
  },
  {
    "name": "imageToText",
    "operationName": "ai-models",
    "parameters": [
      {
        "name": "absoluteImagePath",
        "schema": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": true
      },
      {
        "name": "config",
        "schema": {
          "type": "object",
          "properties": {
            "text": {
              "type": "string"
            },
            "similarity": {
              "type": "boolean"
            },
            "maxLength": {
              "type": "number"
            },
            "minLength": {
              "type": "number"
            }
          },
          "additionalProperties": false
        },
        "simplifiedSchema": {
          "properties": [
            {
              "name": "text",
              "required": false,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "similarity",
              "required": false,
              "schema": {
                "type": "boolean"
              }
            },
            {
              "name": "maxLength",
              "required": false,
              "schema": {
                "type": "number"
              }
            },
            {
              "name": "minLength",
              "required": false,
              "schema": {
                "type": "number"
              }
            }
          ],
          "type": "object"
        },
        "required": false
      }
    ]
  },
  {
    "name": "musicTrackSeparation",
    "operationName": "ai-models",
    "parameters": [
      {
        "name": "absoluteMusicFilePath",
        "schema": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": true
      }
    ]
  },
  {
    "name": "speakerSeparation",
    "operationName": "ai-models",
    "parameters": [
      {
        "name": "absoluteAudioFilePath",
        "schema": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": true
      }
    ]
  },
  {
    "name": "speechToText",
    "operationName": "ai-models",
    "parameters": [
      {
        "name": "absoluteAudioFilePath",
        "schema": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": true
      }
    ]
  },
  {
    "name": "getUserAwareBasePath",
    "operationName": "explorer-core-ui",
    "parameters": [
      {
        "name": "projectRelativeFilePath",
        "schema": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": true
      },
      {
        "name": "userAwareProjectRelativePaths",
        "schema": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "simplifiedSchema": {
          "items": [
            {
              "schema": {
                "type": "string"
              },
              "name": null
            }
          ],
          "type": "array"
        },
        "required": false
      }
    ]
  },
  {
    "name": "getContextualPromptsArray",
    "operationName": "generative-functions-node",
    "parameters": [
      {
        "name": "scopeProjectRelativePath",
        "schema": {
          "type": "string",
          "description": "If available, will also get the scoped context"
        },
        "simplifiedSchema": {
          "fullComment": "If available, will also get the scoped context",
          "type": "string"
        },
        "required": false
      }
    ]
  },
  {
    "name": "getContextualPrompts",
    "operationName": "generative-functions-node",
    "parameters": [
      {
        "name": "contextType",
        "schema": {
          "$ref": "#/definitions/FileType",
          "description": "If not given, will return all"
        },
        "simplifiedSchema": {
          "enum": [
            "code",
            "data",
            "text"
          ],
          "fullComment": "If not given, will return all\n\n",
          "type": "string"
        },
        "required": false
      },
      {
        "name": "scopeProjectRelativePath",
        "schema": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": false
      }
    ]
  },
  {
    "name": "getNameFromRelativePath",
    "operationName": "asset-functions-js",
    "parameters": [
      {
        "name": "relativePath",
        "schema": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": true
      }
    ]
  },
  {
    "name": "getNameWithTokenFromRelativePath",
    "operationName": "asset-functions-js",
    "parameters": [
      {
        "name": "relativePath",
        "schema": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": true
      },
      {
        "name": "attachTokenToFilename",
        "schema": {
          "type": "boolean"
        },
        "simplifiedSchema": {
          "type": "boolean"
        },
        "required": false
      },
      {
        "name": "newToken",
        "schema": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": false
      }
    ]
  },
  {
    "name": "getReferencedAssetApiUrl",
    "operationName": "asset-functions-js",
    "parameters": [
      {
        "name": "apiUrl",
        "schema": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": false
      },
      {
        "name": "projectRelativeReferencingFilePath",
        "schema": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": true
      },
      {
        "name": "referencingFileRelativeAssetPath",
        "schema": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": true
      },
      {
        "name": "isDownload",
        "schema": {
          "type": "boolean",
          "description": "If true, asset will be returned as download"
        },
        "simplifiedSchema": {
          "fullComment": "If true, asset will be returned as download",
          "type": "boolean"
        },
        "required": false
      }
    ]
  },
  {
    "name": "getTypeFromUrlOrPath",
    "operationName": "asset-functions-js",
    "parameters": [
      {
        "name": "urlOrPath",
        "schema": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": true
      }
    ]
  },
  {
    "name": "compressAsset",
    "operationName": "asset-functions-node",
    "parameters": [
      {
        "name": "absolutePath",
        "schema": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": true
      },
      {
        "name": "compressionConfig",
        "schema": {
          "$ref": "#/definitions/CompressionConfig"
        },
        "simplifiedSchema": {
          "fullComment": "",
          "properties": [
            {
              "name": "bitrate",
              "required": false,
              "schema": {
                "fullComment": "used for audio",
                "type": "number"
              }
            },
            {
              "name": "fps",
              "required": false,
              "schema": {
                "fullComment": "Frames per second. Used for video",
                "type": "number"
              }
            },
            {
              "name": "resolution",
              "required": false,
              "schema": {
                "fullComment": "Set the resolution. Will not upscale.\n\nUsed for video and images",
                "properties": [
                  {
                    "name": "width",
                    "required": true,
                    "schema": {
                      "type": "number"
                    }
                  },
                  {
                    "name": "height",
                    "required": true,
                    "schema": {
                      "type": "number"
                    }
                  }
                ],
                "type": "object"
              }
            },
            {
              "name": "shouldOverwrite",
              "required": false,
              "schema": {
                "fullComment": "if true, will overwrite the original file",
                "type": "boolean"
              }
            }
          ],
          "type": "object"
        },
        "required": true
      }
    ]
  },
  {
    "name": "deleteReferencedAsset",
    "operationName": "asset-functions-node",
    "parameters": [
      {
        "name": "projectRelativeReferencingFilePath",
        "schema": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": true
      },
      {
        "name": "referencingFileRelativeAssetPath",
        "schema": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": true
      }
    ]
  },
  {
    "name": "findAbsoluteAssetPathFromReference",
    "operationName": "asset-functions-node",
    "parameters": [
      {
        "name": "projectRelativeReferencingFilePath",
        "schema": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": true
      },
      {
        "name": "referencingFileRelativeAssetPath",
        "schema": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": true
      }
    ]
  },
  {
    "name": "getStorageLocationInfo",
    "operationName": "asset-functions-node",
    "parameters": [
      {
        "name": "absoluteReferencingFilePath",
        "schema": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": true
      },
      {
        "name": "modelName",
        "schema": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": false
      }
    ]
  },
  {
    "name": "serverDownloadReply",
    "operationName": "asset-functions-node",
    "parameters": [
      {
        "name": "absoluteAssetPath",
        "schema": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": true
      },
      {
        "name": "isDownload",
        "schema": {
          "type": "boolean"
        },
        "simplifiedSchema": {
          "type": "boolean"
        },
        "required": true
      }
    ]
  },
  {
    "name": "makeBackendAsset",
    "operationName": "asset-input",
    "parameters": [
      {
        "name": "asset",
        "schema": {
          "$ref": "#/definitions/Asset"
        },
        "simplifiedSchema": {
          "fullComment": "Asset you can upload\n\nThis is not a database model, it can exist in properties of any db model or type interface.\n\nOnly `alt` and `relativePath` are stored, the other parameters are optionally required for uploading and user interfaces, and are not always there\n\nNB: don't use this in your model, use `StoredAsset` instead.",
          "nb": "don't use this in your model, use `StoredAsset` instead.",
          "properties": [
            {
              "name": "alt",
              "required": false,
              "schema": {
                "fullComment": "Stored value\n\nAlt text for the asset",
                "type": "string"
              }
            },
            {
              "name": "relativePath",
              "required": false,
              "schema": {
                "fullComment": "Stored value\n\nRelative path, relative to the location the asset is defined in.\n\nOnly available if the asset was already processed by a backend. Before backend processing, only `temporaryDestination` is available.\n\nChanging the `relativePath` shouldn't do anything, it can only be changed by backend processing by giving a new `temporaryDestination`, or by changing the `name`.",
                "type": "string"
              }
            },
            {
              "name": "name",
              "required": false,
              "schema": {
                "fullComment": "Not stored\n\nNot given by the backend data, but can be SENT to the backend.\n\nShould not be stored, but if you change this value and send it to the backend, it should rename the file and thus the relativePath stored should change.\n\nNB: I'm not sure how to solve having multiple references to a single file. If this occurs, which is hard to prevent if allowing manual editing of data, it may be hard to prevent dead links if someone changes the name of a file that is also refered to in other places. In this case, it would be ideal if all references also would be renamed, but it may be hard to find them. Even if we solve this, it's still possible to get dead links if someone renames the file (or removes it) manually. This should be taken into account, and may not break anything!",
                "nb": "I'm not sure how to solve having multiple references to a single file. If this occurs, which is hard to prevent if allowing manual editing of data, it may be hard to prevent dead links if someone changes the name of a file that is also refered to in other places. In this case, it would be ideal if all references also would be renamed, but it may be hard to find them. Even if we solve this, it's still possible to get dead links if someone renames the file (or removes it) manually. This should be taken into account, and may not break anything!",
                "type": "string"
              }
            },
            {
              "name": "temporaryDestination",
              "required": false,
              "schema": {
                "fullComment": "Not stored\n\nFilename after uploading in the temporary folder. should still be moved to its final location\n\nOnly available straight after uploading. After the function processes the asset, this is removed and a `relativePath` is created.",
                "type": "string"
              }
            },
            {
              "name": "projectRelativeReferencingFilePath",
              "required": false,
              "schema": {
                "fullComment": "Not stored\n\nNeeds to be there before calling `processAsset`. Should be augmented to the backendAsset in the frontend, before sending it to the backend.\n\nLocation of the place where the asset is referenced\n\n- markdown file (or folder where it is located)\n- typescript file (or folder where it is located)\n- database file (or folder where it is located)",
                "type": "string"
              }
            },
            {
              "name": "modelName",
              "required": false,
              "schema": {
                "fullComment": "Not stored\n\nNeeds to be there before calling `processAsset`. Should be augmented to the backendAsset in the frontend, before sending it to the backend.\n\nModel that the asset is related to",
                "type": "string"
              }
            },
            {
              "name": "absoluteUrl",
              "required": false,
              "schema": {
                "fullComment": "NOT STORED\n\nCan be available in case it's an asset from an external source URL for example within md.\n\nAlso can be set in case it's a static asset from a next project",
                "type": "string"
              }
            },
            {
              "name": "blobPath",
              "required": false,
              "schema": {
                "fullComment": "path to the local blob if uploading",
                "type": "string"
              }
            },
            {
              "name": "type",
              "required": false,
              "schema": {
                "enum": [
                  "video",
                  "audio",
                  "image",
                  "text",
                  "other"
                ],
                "fullComment": "can be calculated from the path, or come directly from the blob\n\nPossible Asset Types\n\nLater, maybe also support: \"markdown\",\"json\",\"typescript\"",
                "type": "string"
              }
            },
            {
              "name": "originalFilename",
              "required": false,
              "schema": {
                "fullComment": "if the file was selected from the system, this should be the original filename, including extension",
                "type": "string"
              }
            },
            {
              "name": "sizeBytes",
              "required": false,
              "schema": {
                "fullComment": "can be calculated from the file stats.",
                "type": "number"
              }
            },
            {
              "name": "blob",
              "required": false,
              "schema": {
                "fullComment": "Blob that is available after selecting from the local file system",
                "properties": [
                  {
                    "name": "size",
                    "required": true,
                    "schema": {
                      "type": "number"
                    }
                  },
                  {
                    "name": "type",
                    "required": true,
                    "schema": {
                      "type": "string"
                    }
                  }
                ],
                "type": "object"
              }
            },
            {
              "name": "uploadProgress",
              "required": false,
              "schema": {
                "fullComment": "number between 0 and 1 indicating uploadProgress",
                "type": "number"
              }
            }
          ],
          "type": "object"
        },
        "required": true
      },
      {
        "name": "projectRelativeReferencingFilePath",
        "schema": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": true
      },
      {
        "name": "modelName",
        "schema": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": false
      }
    ]
  },
  {
    "name": "getSrc",
    "operationName": "asset-view",
    "parameters": [
      {
        "name": "asset",
        "schema": {
          "$ref": "#/definitions/Asset"
        },
        "simplifiedSchema": {
          "fullComment": "Asset you can upload\n\nThis is not a database model, it can exist in properties of any db model or type interface.\n\nOnly `alt` and `relativePath` are stored, the other parameters are optionally required for uploading and user interfaces, and are not always there\n\nNB: don't use this in your model, use `StoredAsset` instead.",
          "nb": "don't use this in your model, use `StoredAsset` instead.",
          "properties": [
            {
              "name": "alt",
              "required": false,
              "schema": {
                "fullComment": "Stored value\n\nAlt text for the asset",
                "type": "string"
              }
            },
            {
              "name": "relativePath",
              "required": false,
              "schema": {
                "fullComment": "Stored value\n\nRelative path, relative to the location the asset is defined in.\n\nOnly available if the asset was already processed by a backend. Before backend processing, only `temporaryDestination` is available.\n\nChanging the `relativePath` shouldn't do anything, it can only be changed by backend processing by giving a new `temporaryDestination`, or by changing the `name`.",
                "type": "string"
              }
            },
            {
              "name": "name",
              "required": false,
              "schema": {
                "fullComment": "Not stored\n\nNot given by the backend data, but can be SENT to the backend.\n\nShould not be stored, but if you change this value and send it to the backend, it should rename the file and thus the relativePath stored should change.\n\nNB: I'm not sure how to solve having multiple references to a single file. If this occurs, which is hard to prevent if allowing manual editing of data, it may be hard to prevent dead links if someone changes the name of a file that is also refered to in other places. In this case, it would be ideal if all references also would be renamed, but it may be hard to find them. Even if we solve this, it's still possible to get dead links if someone renames the file (or removes it) manually. This should be taken into account, and may not break anything!",
                "nb": "I'm not sure how to solve having multiple references to a single file. If this occurs, which is hard to prevent if allowing manual editing of data, it may be hard to prevent dead links if someone changes the name of a file that is also refered to in other places. In this case, it would be ideal if all references also would be renamed, but it may be hard to find them. Even if we solve this, it's still possible to get dead links if someone renames the file (or removes it) manually. This should be taken into account, and may not break anything!",
                "type": "string"
              }
            },
            {
              "name": "temporaryDestination",
              "required": false,
              "schema": {
                "fullComment": "Not stored\n\nFilename after uploading in the temporary folder. should still be moved to its final location\n\nOnly available straight after uploading. After the function processes the asset, this is removed and a `relativePath` is created.",
                "type": "string"
              }
            },
            {
              "name": "projectRelativeReferencingFilePath",
              "required": false,
              "schema": {
                "fullComment": "Not stored\n\nNeeds to be there before calling `processAsset`. Should be augmented to the backendAsset in the frontend, before sending it to the backend.\n\nLocation of the place where the asset is referenced\n\n- markdown file (or folder where it is located)\n- typescript file (or folder where it is located)\n- database file (or folder where it is located)",
                "type": "string"
              }
            },
            {
              "name": "modelName",
              "required": false,
              "schema": {
                "fullComment": "Not stored\n\nNeeds to be there before calling `processAsset`. Should be augmented to the backendAsset in the frontend, before sending it to the backend.\n\nModel that the asset is related to",
                "type": "string"
              }
            },
            {
              "name": "absoluteUrl",
              "required": false,
              "schema": {
                "fullComment": "NOT STORED\n\nCan be available in case it's an asset from an external source URL for example within md.\n\nAlso can be set in case it's a static asset from a next project",
                "type": "string"
              }
            },
            {
              "name": "blobPath",
              "required": false,
              "schema": {
                "fullComment": "path to the local blob if uploading",
                "type": "string"
              }
            },
            {
              "name": "type",
              "required": false,
              "schema": {
                "enum": [
                  "video",
                  "audio",
                  "image",
                  "text",
                  "other"
                ],
                "fullComment": "can be calculated from the path, or come directly from the blob\n\nPossible Asset Types\n\nLater, maybe also support: \"markdown\",\"json\",\"typescript\"",
                "type": "string"
              }
            },
            {
              "name": "originalFilename",
              "required": false,
              "schema": {
                "fullComment": "if the file was selected from the system, this should be the original filename, including extension",
                "type": "string"
              }
            },
            {
              "name": "sizeBytes",
              "required": false,
              "schema": {
                "fullComment": "can be calculated from the file stats.",
                "type": "number"
              }
            },
            {
              "name": "blob",
              "required": false,
              "schema": {
                "fullComment": "Blob that is available after selecting from the local file system",
                "properties": [
                  {
                    "name": "size",
                    "required": true,
                    "schema": {
                      "type": "number"
                    }
                  },
                  {
                    "name": "type",
                    "required": true,
                    "schema": {
                      "type": "string"
                    }
                  }
                ],
                "type": "object"
              }
            },
            {
              "name": "uploadProgress",
              "required": false,
              "schema": {
                "fullComment": "number between 0 and 1 indicating uploadProgress",
                "type": "number"
              }
            }
          ],
          "type": "object"
        },
        "required": true
      },
      {
        "name": "projectRelativeReferencingFilePath",
        "schema": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": true
      },
      {
        "name": "isNextStaticProductionBuild",
        "schema": {
          "type": "boolean"
        },
        "simplifiedSchema": {
          "type": "boolean"
        },
        "required": false
      }
    ]
  },
  {
    "name": "useAsset",
    "operationName": "asset-view",
    "parameters": [
      {
        "name": "asset",
        "schema": {
          "$ref": "#/definitions/Asset"
        },
        "simplifiedSchema": {
          "fullComment": "Asset you can upload\n\nThis is not a database model, it can exist in properties of any db model or type interface.\n\nOnly `alt` and `relativePath` are stored, the other parameters are optionally required for uploading and user interfaces, and are not always there\n\nNB: don't use this in your model, use `StoredAsset` instead.",
          "nb": "don't use this in your model, use `StoredAsset` instead.",
          "properties": [
            {
              "name": "alt",
              "required": false,
              "schema": {
                "fullComment": "Stored value\n\nAlt text for the asset",
                "type": "string"
              }
            },
            {
              "name": "relativePath",
              "required": false,
              "schema": {
                "fullComment": "Stored value\n\nRelative path, relative to the location the asset is defined in.\n\nOnly available if the asset was already processed by a backend. Before backend processing, only `temporaryDestination` is available.\n\nChanging the `relativePath` shouldn't do anything, it can only be changed by backend processing by giving a new `temporaryDestination`, or by changing the `name`.",
                "type": "string"
              }
            },
            {
              "name": "name",
              "required": false,
              "schema": {
                "fullComment": "Not stored\n\nNot given by the backend data, but can be SENT to the backend.\n\nShould not be stored, but if you change this value and send it to the backend, it should rename the file and thus the relativePath stored should change.\n\nNB: I'm not sure how to solve having multiple references to a single file. If this occurs, which is hard to prevent if allowing manual editing of data, it may be hard to prevent dead links if someone changes the name of a file that is also refered to in other places. In this case, it would be ideal if all references also would be renamed, but it may be hard to find them. Even if we solve this, it's still possible to get dead links if someone renames the file (or removes it) manually. This should be taken into account, and may not break anything!",
                "nb": "I'm not sure how to solve having multiple references to a single file. If this occurs, which is hard to prevent if allowing manual editing of data, it may be hard to prevent dead links if someone changes the name of a file that is also refered to in other places. In this case, it would be ideal if all references also would be renamed, but it may be hard to find them. Even if we solve this, it's still possible to get dead links if someone renames the file (or removes it) manually. This should be taken into account, and may not break anything!",
                "type": "string"
              }
            },
            {
              "name": "temporaryDestination",
              "required": false,
              "schema": {
                "fullComment": "Not stored\n\nFilename after uploading in the temporary folder. should still be moved to its final location\n\nOnly available straight after uploading. After the function processes the asset, this is removed and a `relativePath` is created.",
                "type": "string"
              }
            },
            {
              "name": "projectRelativeReferencingFilePath",
              "required": false,
              "schema": {
                "fullComment": "Not stored\n\nNeeds to be there before calling `processAsset`. Should be augmented to the backendAsset in the frontend, before sending it to the backend.\n\nLocation of the place where the asset is referenced\n\n- markdown file (or folder where it is located)\n- typescript file (or folder where it is located)\n- database file (or folder where it is located)",
                "type": "string"
              }
            },
            {
              "name": "modelName",
              "required": false,
              "schema": {
                "fullComment": "Not stored\n\nNeeds to be there before calling `processAsset`. Should be augmented to the backendAsset in the frontend, before sending it to the backend.\n\nModel that the asset is related to",
                "type": "string"
              }
            },
            {
              "name": "absoluteUrl",
              "required": false,
              "schema": {
                "fullComment": "NOT STORED\n\nCan be available in case it's an asset from an external source URL for example within md.\n\nAlso can be set in case it's a static asset from a next project",
                "type": "string"
              }
            },
            {
              "name": "blobPath",
              "required": false,
              "schema": {
                "fullComment": "path to the local blob if uploading",
                "type": "string"
              }
            },
            {
              "name": "type",
              "required": false,
              "schema": {
                "enum": [
                  "video",
                  "audio",
                  "image",
                  "text",
                  "other"
                ],
                "fullComment": "can be calculated from the path, or come directly from the blob\n\nPossible Asset Types\n\nLater, maybe also support: \"markdown\",\"json\",\"typescript\"",
                "type": "string"
              }
            },
            {
              "name": "originalFilename",
              "required": false,
              "schema": {
                "fullComment": "if the file was selected from the system, this should be the original filename, including extension",
                "type": "string"
              }
            },
            {
              "name": "sizeBytes",
              "required": false,
              "schema": {
                "fullComment": "can be calculated from the file stats.",
                "type": "number"
              }
            },
            {
              "name": "blob",
              "required": false,
              "schema": {
                "fullComment": "Blob that is available after selecting from the local file system",
                "properties": [
                  {
                    "name": "size",
                    "required": true,
                    "schema": {
                      "type": "number"
                    }
                  },
                  {
                    "name": "type",
                    "required": true,
                    "schema": {
                      "type": "string"
                    }
                  }
                ],
                "type": "object"
              }
            },
            {
              "name": "uploadProgress",
              "required": false,
              "schema": {
                "fullComment": "number between 0 and 1 indicating uploadProgress",
                "type": "number"
              }
            }
          ],
          "type": "object"
        },
        "required": false
      },
      {
        "name": "projectRelativeReferencingFilePath",
        "schema": {
          "type": [
            "string",
            "null"
          ]
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": false
      },
      {
        "name": "isNextStaticProductionBuild",
        "schema": {
          "type": "boolean"
        },
        "simplifiedSchema": {
          "type": "boolean"
        },
        "required": false
      }
    ]
  },
  {
    "name": "getFileCollectionWithContext",
    "operationName": "file-collection-functions",
    "parameters": [
      {
        "name": "functionContext",
        "schema": {
          "$ref": "#/definitions/FunctionContext"
        },
        "simplifiedSchema": {
          "fullComment": "Should be attached as first argument of the function, if the name of the function is in the format of:\n\n- `xyzWithContext`: attaches all context\n- `xyzWithContextRaw`: attaches all context, api returns just the result of the function without wrapping it in the `RealApiReturnType`. Needed in case you have a different server.js `server.reply`\n\nFor more info see `apiConvention`",
          "properties": [
            {
              "name": "tsFunction",
              "required": false,
              "schema": {
                "fullComment": "--- dbStorageMethod: jsonSingle\n---\n\nInterface for arrow functions and normal functions",
                "properties": [
                  {
                    "name": "explicitTypeName",
                    "required": false,
                    "schema": {
                      "fullComment": "If you give a function a type explicitly on its declaration, this type will be set here.",
                      "type": "string"
                    }
                  },
                  {
                    "name": "isExported",
                    "required": true,
                    "schema": {
                      "fullComment": "The function is immediately exported upon creation. If the os dev tools are being used, this means it is also exported from the operation",
                      "type": "boolean"
                    }
                  },
                  {
                    "name": "description",
                    "required": false,
                    "schema": {
                      "fullComment": "parsed comment from doc-comment\n\n",
                      "properties": [
                        {
                          "name": "fileName",
                          "required": true,
                          "schema": {
                            "type": "string"
                          }
                        },
                        {
                          "name": "params",
                          "required": true,
                          "schema": {
                            "properties": [
                              {
                                "name": "title",
                                "required": false,
                                "schema": {
                                  "type": "string"
                                }
                              },
                              {
                                "name": "author",
                                "required": false,
                                "schema": {
                                  "type": "string"
                                }
                              }
                            ],
                            "type": "object"
                          }
                        },
                        {
                          "name": "createdAt",
                          "required": true,
                          "schema": {
                            "fullComment": "",
                            "type": "number"
                          }
                        },
                        {
                          "name": "updatedAt",
                          "required": true,
                          "schema": {
                            "fullComment": "",
                            "type": "number"
                          }
                        },
                        {
                          "name": "modifiedAt",
                          "required": true,
                          "schema": {
                            "fullComment": "",
                            "type": "number"
                          }
                        },
                        {
                          "name": "openedAt",
                          "required": true,
                          "schema": {
                            "fullComment": "",
                            "type": "number"
                          }
                        },
                        {
                          "name": "content",
                          "required": true,
                          "schema": {
                            "fullComment": "",
                            "type": "string"
                          }
                        }
                      ],
                      "type": "object"
                    }
                  },
                  {
                    "name": "rawText",
                    "required": false,
                    "schema": {
                      "fullComment": "raw text of the function",
                      "type": "string"
                    }
                  },
                  {
                    "name": "commentsInside",
                    "required": true,
                    "schema": {
                      "fullComment": "all comments found in a function and the node that they belong to",
                      "items": [
                        {
                          "schema": {
                            "fullComment": "comments are basically one-or-multi-line human content inside of typescript files, so it's a very important to do something useful with them.\n\n\nThe convention should be that single-line comments should start with that. This then becomes the type of the comment. You can also put multiple prefixes at the start.\n\nExample:\n\n`// TODO: NB: this is a todo but its also important`\n\nMultiline comments can also have one or multiple types in their text, but they should not be split into multiple comments as the context could be needed some times.\n\n\n\nThere are also some other things comments can say about statements, but these should be inside the frontmatter, and are much more flexible.\n- classified[0-10] indicating level of classification. This way I can share subsets of the codebase, maybe...\n- privacy\n- ...?\n\nNB: with the current setup we can also parse `.md` files as being a TsComment, keep it that way!\n\nNB: comments are part of the code, so they should always be in English!",
                            "nb": "with the current setup we can also parse `.md` files as being a TsComment, keep it that way!",
                            "properties": [
                              {
                                "name": "operationName",
                                "required": true,
                                "schema": {
                                  "fullComment": "name of operation the model belongs to\n\n- calculated value (not stored in database)\n- can be `null` or an actual operationName that it was saved at\n- can be `undefined` when you are creating an item, because then it can be set for you",
                                  "type": "null"
                                }
                              },
                              {
                                "name": "projectRelativePath",
                                "required": true,
                                "schema": {
                                  "fullComment": "path to dbfile\n\n- calculated value (not stored in database)\n- relatively from the project (without slash at start)\n- can be `undefined` when you are creating an item, because then it can be set for you",
                                  "type": "string"
                                }
                              },
                              {
                                "name": "operationRelativePath",
                                "required": false,
                                "schema": {
                                  "fullComment": "path to db file\n\n- relatively from the operation root folder (without slash at start)\n- calculated value (not stored in database)\n- can be `undefined` if the db file does not belong to an operation\n- can be `undefined` when you are creating an item, because then it can be set for you",
                                  "type": "string"
                                }
                              },
                              {
                                "name": "id",
                                "required": true,
                                "schema": {
                                  "fullComment": "unique id of the model",
                                  "type": "string"
                                }
                              },
                              {
                                "name": "name",
                                "required": true,
                                "schema": {
                                  "fullComment": "name (identifier) of the model",
                                  "type": "string"
                                }
                              },
                              {
                                "name": "slug",
                                "required": true,
                                "schema": {
                                  "fullComment": "kebab-case variant of the name",
                                  "type": "string"
                                }
                              },
                              {
                                "name": "operationRelativeTypescriptFilePath",
                                "required": true,
                                "schema": {
                                  "fullComment": "relative file path from the operation that this indexed instance is referencing to\n\ne.g. src/general.ts\n\n(no preceding slash)",
                                  "type": "string"
                                }
                              },
                              {
                                "name": "comment",
                                "required": true,
                                "schema": {
                                  "fullComment": "the content of the comment in markdown, without frontmatter\n\n",
                                  "properties": [
                                    {
                                      "name": "fileName",
                                      "required": true,
                                      "schema": {
                                        "type": "string"
                                      }
                                    },
                                    {
                                      "name": "params",
                                      "required": true,
                                      "schema": {
                                        "properties": [
                                          {
                                            "name": "title",
                                            "required": false,
                                            "schema": {
                                              "type": "string"
                                            }
                                          },
                                          {
                                            "name": "author",
                                            "required": false,
                                            "schema": {
                                              "type": "string"
                                            }
                                          }
                                        ],
                                        "type": "object"
                                      }
                                    },
                                    {
                                      "name": "createdAt",
                                      "required": true,
                                      "schema": {
                                        "fullComment": "",
                                        "type": "number"
                                      }
                                    },
                                    {
                                      "name": "updatedAt",
                                      "required": true,
                                      "schema": {
                                        "fullComment": "",
                                        "type": "number"
                                      }
                                    },
                                    {
                                      "name": "modifiedAt",
                                      "required": true,
                                      "schema": {
                                        "fullComment": "",
                                        "type": "number"
                                      }
                                    },
                                    {
                                      "name": "openedAt",
                                      "required": true,
                                      "schema": {
                                        "fullComment": "",
                                        "type": "number"
                                      }
                                    },
                                    {
                                      "name": "content",
                                      "required": true,
                                      "schema": {
                                        "fullComment": "",
                                        "type": "string"
                                      }
                                    }
                                  ],
                                  "type": "object"
                                }
                              },
                              {
                                "name": "parameters",
                                "required": true,
                                "schema": {
                                  "fullComment": "parameters destructured from the frontmatter of the parsed markdown (if comment is not a oneliner, otherwise it'll be empty)\n\nOur version of frontmatter is a bit simpler than regular frontmatter\n\nNot sure if this is a good idea, but it keeps it simple for our OS\n\nall values parse in a similar way to csv\n\nmake sure that you use quotes if you want to store a string with commas, because commas in a parameter indicate that it is a string array\n\nNB: string arrays are comma separated values, where you can put values with special characters in between quotes",
                                  "nb": "string arrays are comma separated values, where you can put values with special characters in between quotes",
                                  "properties": [],
                                  "type": "object"
                                }
                              },
                              {
                                "name": "types",
                                "required": true,
                                "schema": {
                                  "fullComment": "These are the type indicators that were found in this single or multiline comment. Can be multiple.",
                                  "items": [
                                    {
                                      "schema": {
                                        "enum": [
                                          "todo",
                                          "discussion",
                                          "idea",
                                          "later",
                                          "nb",
                                          "title",
                                          "section",
                                          "description"
                                        ],
                                        "fullComment": "special line prefixes:\n\n**Developer related comments**\n\n- TODO: for developer to know what to do\n- DISCUSSION: for developer to state that discussion is needed\n- IDEA: for developer to state ideas\n- LATER: for developer to mark as thing that needs to be done later\n- NB: for developer to add a note\n\n**Form related comments**\n\n- TITLE: if available, will be used as title of form input (overwrites humanCase version of the property-name itself in that case)\n- SECTION: start a new section in the form from this point, the value behind here can be the title\n- DESCRIPTION: if available, will be used as description of the form input",
                                        "type": "string"
                                      },
                                      "name": "CommentType"
                                    }
                                  ],
                                  "type": "array"
                                }
                              },
                              {
                                "name": "firstLine",
                                "required": true,
                                "schema": {
                                  "fullComment": "first line of the comment",
                                  "type": "number"
                                }
                              },
                              {
                                "name": "lastLine",
                                "required": true,
                                "schema": {
                                  "fullComment": "last line of the comment",
                                  "type": "number"
                                }
                              },
                              {
                                "name": "statementName",
                                "required": false,
                                "schema": {
                                  "fullComment": "statement name the comment belongs to",
                                  "type": "string"
                                }
                              },
                              {
                                "name": "rawStatement",
                                "required": false,
                                "schema": {
                                  "fullComment": "raw statement text the comment belongs to",
                                  "type": "string"
                                }
                              }
                            ],
                            "type": "object"
                          },
                          "name": "TsComment"
                        }
                      ],
                      "type": "array"
                    }
                  },
                  {
                    "name": "returnType",
                    "required": true,
                    "schema": {
                      "fullComment": "return type JSON Schema definition\n\nall info that should always be collected when indexing any type interface",
                      "properties": [
                        {
                          "name": "typeDefinition",
                          "required": false,
                          "schema": {
                            "fullComment": "JSON schema definition of a type interface\n\n\nSome info about the Schema:\n\n- if the type is an object, there should be properties\n- if the type is an array, there should be items\n\n\n\n",
                            "properties": [
                              {
                                "name": "$id",
                                "required": false,
                                "schema": {
                                  "type": "string"
                                }
                              },
                              {
                                "name": "$ref",
                                "required": false,
                                "schema": {
                                  "type": "string"
                                }
                              },
                              {
                                "name": "$comment",
                                "required": false,
                                "schema": {
                                  "type": "string"
                                }
                              },
                              {
                                "name": "$defs",
                                "required": false,
                                "schema": {
                                  "properties": [],
                                  "type": "object"
                                }
                              },
                              {
                                "name": "type",
                                "required": false,
                                "schema": {
                                  "properties": [],
                                  "type": "object"
                                }
                              },
                              {
                                "name": "enum",
                                "required": false,
                                "schema": {
                                  "items": [
                                    {
                                      "schema": {
                                        "fullComment": "Primitive type",
                                        "properties": [],
                                        "type": "object"
                                      },
                                      "name": "JSONSchema7Type"
                                    }
                                  ],
                                  "type": "array"
                                }
                              },
                              {
                                "name": "const",
                                "required": false,
                                "schema": {
                                  "fullComment": "Primitive type",
                                  "properties": [],
                                  "type": "object"
                                }
                              },
                              {
                                "name": "multipleOf",
                                "required": false,
                                "schema": {
                                  "type": "number"
                                }
                              },
                              {
                                "name": "maximum",
                                "required": false,
                                "schema": {
                                  "type": "number"
                                }
                              },
                              {
                                "name": "exclusiveMaximum",
                                "required": false,
                                "schema": {
                                  "type": "number"
                                }
                              },
                              {
                                "name": "minimum",
                                "required": false,
                                "schema": {
                                  "type": "number"
                                }
                              },
                              {
                                "name": "exclusiveMinimum",
                                "required": false,
                                "schema": {
                                  "type": "number"
                                }
                              },
                              {
                                "name": "maxLength",
                                "required": false,
                                "schema": {
                                  "type": "number"
                                }
                              },
                              {
                                "name": "minLength",
                                "required": false,
                                "schema": {
                                  "type": "number"
                                }
                              },
                              {
                                "name": "pattern",
                                "required": false,
                                "schema": {
                                  "type": "string"
                                }
                              },
                              {
                                "name": "items",
                                "required": false,
                                "schema": {
                                  "properties": [],
                                  "type": "object"
                                }
                              },
                              {
                                "name": "additionalItems",
                                "required": false,
                                "schema": {
                                  "fullComment": "JSON Schema v7",
                                  "properties": [],
                                  "type": "object"
                                }
                              },
                              {
                                "name": "maxItems",
                                "required": false,
                                "schema": {
                                  "type": "number"
                                }
                              },
                              {
                                "name": "minItems",
                                "required": false,
                                "schema": {
                                  "type": "number"
                                }
                              },
                              {
                                "name": "uniqueItems",
                                "required": false,
                                "schema": {
                                  "type": "boolean"
                                }
                              },
                              {
                                "name": "contains",
                                "required": false,
                                "schema": {
                                  "circularRefName": "JSONSchema7",
                                  "properties": [],
                                  "type": "object"
                                }
                              },
                              {
                                "name": "maxProperties",
                                "required": false,
                                "schema": {
                                  "type": "number"
                                }
                              },
                              {
                                "name": "minProperties",
                                "required": false,
                                "schema": {
                                  "type": "number"
                                }
                              },
                              {
                                "name": "required",
                                "required": false,
                                "schema": {
                                  "items": [
                                    {
                                      "schema": {
                                        "type": "string"
                                      },
                                      "name": null
                                    }
                                  ],
                                  "type": "array"
                                }
                              },
                              {
                                "name": "properties",
                                "required": false,
                                "schema": {
                                  "properties": [],
                                  "type": "object"
                                }
                              },
                              {
                                "name": "patternProperties",
                                "required": false,
                                "schema": {
                                  "properties": [],
                                  "type": "object"
                                }
                              },
                              {
                                "name": "additionalProperties",
                                "required": false,
                                "schema": {
                                  "fullComment": "JSON Schema v7",
                                  "properties": [],
                                  "type": "object"
                                }
                              },
                              {
                                "name": "dependencies",
                                "required": false,
                                "schema": {
                                  "properties": [],
                                  "type": "object"
                                }
                              },
                              {
                                "name": "propertyNames",
                                "required": false,
                                "schema": {
                                  "fullComment": "JSON Schema v7",
                                  "properties": [],
                                  "type": "object"
                                }
                              },
                              {
                                "name": "if",
                                "required": false,
                                "schema": {
                                  "fullComment": "JSON Schema v7",
                                  "properties": [],
                                  "type": "object"
                                }
                              },
                              {
                                "name": "then",
                                "required": false,
                                "schema": {
                                  "fullComment": "JSON Schema v7",
                                  "properties": [],
                                  "type": "object"
                                }
                              },
                              {
                                "name": "else",
                                "required": false,
                                "schema": {
                                  "fullComment": "JSON Schema v7",
                                  "properties": [],
                                  "type": "object"
                                }
                              },
                              {
                                "name": "allOf",
                                "required": false,
                                "schema": {
                                  "items": [
                                    {
                                      "schema": {
                                        "fullComment": "JSON Schema v7",
                                        "properties": [],
                                        "type": "object"
                                      },
                                      "name": "JSONSchema7Definition"
                                    }
                                  ],
                                  "type": "array"
                                }
                              },
                              {
                                "name": "anyOf",
                                "required": false,
                                "schema": {
                                  "items": [
                                    {
                                      "schema": {
                                        "fullComment": "JSON Schema v7",
                                        "properties": [],
                                        "type": "object"
                                      },
                                      "name": "JSONSchema7Definition"
                                    }
                                  ],
                                  "type": "array"
                                }
                              },
                              {
                                "name": "oneOf",
                                "required": false,
                                "schema": {
                                  "items": [
                                    {
                                      "schema": {
                                        "fullComment": "JSON Schema v7",
                                        "properties": [],
                                        "type": "object"
                                      },
                                      "name": "JSONSchema7Definition"
                                    }
                                  ],
                                  "type": "array"
                                }
                              },
                              {
                                "name": "not",
                                "required": false,
                                "schema": {
                                  "fullComment": "JSON Schema v7",
                                  "properties": [],
                                  "type": "object"
                                }
                              },
                              {
                                "name": "format",
                                "required": false,
                                "schema": {
                                  "type": "string"
                                }
                              },
                              {
                                "name": "contentMediaType",
                                "required": false,
                                "schema": {
                                  "type": "string"
                                }
                              },
                              {
                                "name": "contentEncoding",
                                "required": false,
                                "schema": {
                                  "type": "string"
                                }
                              },
                              {
                                "name": "definitions",
                                "required": false,
                                "schema": {
                                  "properties": [],
                                  "type": "object"
                                }
                              },
                              {
                                "name": "title",
                                "required": false,
                                "schema": {
                                  "type": "string"
                                }
                              },
                              {
                                "name": "description",
                                "required": false,
                                "schema": {
                                  "type": "string"
                                }
                              },
                              {
                                "name": "default",
                                "required": false,
                                "schema": {
                                  "fullComment": "Primitive type",
                                  "properties": [],
                                  "type": "object"
                                }
                              },
                              {
                                "name": "readOnly",
                                "required": false,
                                "schema": {
                                  "type": "boolean"
                                }
                              },
                              {
                                "name": "writeOnly",
                                "required": false,
                                "schema": {
                                  "type": "boolean"
                                }
                              },
                              {
                                "name": "examples",
                                "required": false,
                                "schema": {
                                  "fullComment": "Primitive type",
                                  "properties": [],
                                  "type": "object"
                                }
                              }
                            ],
                            "type": "object"
                          }
                        },
                        {
                          "name": "simplifiedSchema",
                          "required": false,
                          "schema": {
                            "fullComment": "JSONSchema7 derivative that has the following capabilities and and characteristics...\n\n- does not include objects in objects that are also referenced to using xxxSlug or xxxId\n- recursively finds the references and expands them, unless the references are circular\n- easier to read\n- has all the information we need\n- is able to generate an object with values in the exact format the function needs it\n- is able to easily generate a form",
                            "properties": [
                              {
                                "name": "todo",
                                "required": false,
                                "schema": {
                                  "type": "string"
                                }
                              },
                              {
                                "name": "discussion",
                                "required": false,
                                "schema": {
                                  "type": "string"
                                }
                              },
                              {
                                "name": "idea",
                                "required": false,
                                "schema": {
                                  "type": "string"
                                }
                              },
                              {
                                "name": "later",
                                "required": false,
                                "schema": {
                                  "type": "string"
                                }
                              },
                              {
                                "name": "nb",
                                "required": false,
                                "schema": {
                                  "type": "string"
                                }
                              },
                              {
                                "name": "title",
                                "required": false,
                                "schema": {
                                  "type": "string"
                                }
                              },
                              {
                                "name": "section",
                                "required": false,
                                "schema": {
                                  "type": "string"
                                }
                              },
                              {
                                "name": "description",
                                "required": false,
                                "schema": {
                                  "type": "string"
                                }
                              },
                              {
                                "name": "type",
                                "required": true,
                                "schema": {
                                  "enum": [
                                    "string",
                                    "number",
                                    "boolean",
                                    "object",
                                    "array",
                                    "null"
                                  ],
                                  "fullComment": "- string\n- number\n- boolean\n- object\n- array\n- null\n\nNB: Omit doesn't work for the indexer! This would be the type: Omit<JSONSchema7TypeName, \"integer\">;\n\n",
                                  "nb": "Omit doesn't work for the indexer! This would be the type: Omit<JSONSchema7TypeName, \"integer\">;",
                                  "type": "string"
                                }
                              },
                              {
                                "name": "circularRefName",
                                "required": false,
                                "schema": {
                                  "fullComment": "sometimes we still need to reference to another schema because this thing is recursive. In that case the ref name will be here",
                                  "type": "string"
                                }
                              },
                              {
                                "name": "enum",
                                "required": false,
                                "schema": {
                                  "fullComment": "in case of enums this could appear... mostly strings, but e.g. numbers can also be an enum I think",
                                  "items": [
                                    {
                                      "schema": {
                                        "fullComment": "Primitive type",
                                        "properties": [],
                                        "type": "object"
                                      },
                                      "name": "JSONSchema7Type"
                                    }
                                  ],
                                  "type": "array"
                                }
                              },
                              {
                                "name": "properties",
                                "required": false,
                                "schema": {
                                  "fullComment": "in case of object, this will always appear",
                                  "items": [
                                    {
                                      "schema": {
                                        "fullComment": "",
                                        "properties": [
                                          {
                                            "name": "name",
                                            "required": true,
                                            "schema": {
                                              "type": "string"
                                            }
                                          },
                                          {
                                            "name": "schema",
                                            "required": true,
                                            "schema": {
                                              "circularRefName": "SimplifiedSchema",
                                              "properties": [],
                                              "type": "object"
                                            }
                                          },
                                          {
                                            "name": "required",
                                            "required": true,
                                            "schema": {
                                              "fullComment": "NB: can't we put this in the SimplifiedSchema itself?",
                                              "nb": "can't we put this in the SimplifiedSchema itself?",
                                              "type": "boolean"
                                            }
                                          }
                                        ],
                                        "type": "object"
                                      },
                                      "name": "SimplifiedSchemaProperty"
                                    }
                                  ],
                                  "type": "array"
                                }
                              },
                              {
                                "name": "items",
                                "required": false,
                                "schema": {
                                  "fullComment": "in case of arrays, this will always appear",
                                  "items": [
                                    {
                                      "schema": {
                                        "fullComment": "",
                                        "properties": [
                                          {
                                            "name": "name",
                                            "required": true,
                                            "schema": {
                                              "fullComment": "name in case of it being a reference, otherwise null",
                                              "type": "string"
                                            }
                                          },
                                          {
                                            "name": "schema",
                                            "required": true,
                                            "schema": {
                                              "circularRefName": "SimplifiedSchema",
                                              "properties": [],
                                              "type": "object"
                                            }
                                          }
                                        ],
                                        "type": "object"
                                      },
                                      "name": "SimplifiedSchemaItem"
                                    }
                                  ],
                                  "type": "array"
                                }
                              },
                              {
                                "name": "fullComment",
                                "required": false,
                                "schema": {
                                  "fullComment": "Full doccomment, parsed without all stars syntax.\n\nNB: besides this, every `CommentType` can optionally also be found as a property on the `SimplifiedSchema`",
                                  "nb": "besides this, every `CommentType` can optionally also be found as a property on the `SimplifiedSchema`",
                                  "type": "string"
                                }
                              }
                            ],
                            "type": "object"
                          }
                        },
                        {
                          "name": "isObject",
                          "required": true,
                          "schema": {
                            "fullComment": "if the type is an object, this is true. false if it's an array",
                            "type": "boolean"
                          }
                        },
                        {
                          "name": "isArray",
                          "required": true,
                          "schema": {
                            "fullComment": "if the type is an array, this is true",
                            "type": "boolean"
                          }
                        },
                        {
                          "name": "isPrimitive",
                          "required": true,
                          "schema": {
                            "fullComment": "if it's a primitive type like \"string\", \"number\", \"boolean\", \"null\" | \"undefined\"",
                            "type": "boolean"
                          }
                        },
                        {
                          "name": "isEnum",
                          "required": true,
                          "schema": {
                            "fullComment": "will be true for any primitive conjunction types",
                            "type": "boolean"
                          }
                        },
                        {
                          "name": "isEnumLiteral",
                          "required": true,
                          "schema": {
                            "fullComment": "will be true for string conjunction types",
                            "type": "boolean"
                          }
                        },
                        {
                          "name": "typeCoverage",
                          "required": true,
                          "schema": {
                            "fullComment": "quantification of coverage of the specified type or subtypes in our database.",
                            "type": "number"
                          }
                        },
                        {
                          "name": "rawType",
                          "required": true,
                          "schema": {
                            "fullComment": "raw type string",
                            "type": "string"
                          }
                        }
                      ],
                      "type": "object"
                    }
                  },
                  {
                    "name": "parameters",
                    "required": false,
                    "schema": {
                      "fullComment": "parameters the function takes as its arguments, if any",
                      "items": [
                        {
                          "schema": {
                            "fullComment": "",
                            "properties": [
                              {
                                "name": "name",
                                "required": true,
                                "schema": {
                                  "type": "string"
                                }
                              },
                              {
                                "name": "schema",
                                "required": false,
                                "schema": {
                                  "fullComment": "",
                                  "properties": [
                                    {
                                      "name": "$id",
                                      "required": false,
                                      "schema": {
                                        "type": "string"
                                      }
                                    },
                                    {
                                      "name": "$ref",
                                      "required": false,
                                      "schema": {
                                        "type": "string"
                                      }
                                    },
                                    {
                                      "name": "$comment",
                                      "required": false,
                                      "schema": {
                                        "type": "string"
                                      }
                                    },
                                    {
                                      "name": "$defs",
                                      "required": false,
                                      "schema": {
                                        "properties": [],
                                        "type": "object"
                                      }
                                    },
                                    {
                                      "name": "type",
                                      "required": false,
                                      "schema": {
                                        "properties": [],
                                        "type": "object"
                                      }
                                    },
                                    {
                                      "name": "enum",
                                      "required": false,
                                      "schema": {
                                        "items": [
                                          {
                                            "schema": {
                                              "fullComment": "Primitive type",
                                              "properties": [],
                                              "type": "object"
                                            },
                                            "name": "JSONSchema7Type"
                                          }
                                        ],
                                        "type": "array"
                                      }
                                    },
                                    {
                                      "name": "const",
                                      "required": false,
                                      "schema": {
                                        "fullComment": "Primitive type",
                                        "properties": [],
                                        "type": "object"
                                      }
                                    },
                                    {
                                      "name": "multipleOf",
                                      "required": false,
                                      "schema": {
                                        "type": "number"
                                      }
                                    },
                                    {
                                      "name": "maximum",
                                      "required": false,
                                      "schema": {
                                        "type": "number"
                                      }
                                    },
                                    {
                                      "name": "exclusiveMaximum",
                                      "required": false,
                                      "schema": {
                                        "type": "number"
                                      }
                                    },
                                    {
                                      "name": "minimum",
                                      "required": false,
                                      "schema": {
                                        "type": "number"
                                      }
                                    },
                                    {
                                      "name": "exclusiveMinimum",
                                      "required": false,
                                      "schema": {
                                        "type": "number"
                                      }
                                    },
                                    {
                                      "name": "maxLength",
                                      "required": false,
                                      "schema": {
                                        "type": "number"
                                      }
                                    },
                                    {
                                      "name": "minLength",
                                      "required": false,
                                      "schema": {
                                        "type": "number"
                                      }
                                    },
                                    {
                                      "name": "pattern",
                                      "required": false,
                                      "schema": {
                                        "type": "string"
                                      }
                                    },
                                    {
                                      "name": "items",
                                      "required": false,
                                      "schema": {
                                        "properties": [],
                                        "type": "object"
                                      }
                                    },
                                    {
                                      "name": "additionalItems",
                                      "required": false,
                                      "schema": {
                                        "fullComment": "JSON Schema v7",
                                        "properties": [],
                                        "type": "object"
                                      }
                                    },
                                    {
                                      "name": "maxItems",
                                      "required": false,
                                      "schema": {
                                        "type": "number"
                                      }
                                    },
                                    {
                                      "name": "minItems",
                                      "required": false,
                                      "schema": {
                                        "type": "number"
                                      }
                                    },
                                    {
                                      "name": "uniqueItems",
                                      "required": false,
                                      "schema": {
                                        "type": "boolean"
                                      }
                                    },
                                    {
                                      "name": "contains",
                                      "required": false,
                                      "schema": {
                                        "circularRefName": "JSONSchema7",
                                        "properties": [],
                                        "type": "object"
                                      }
                                    },
                                    {
                                      "name": "maxProperties",
                                      "required": false,
                                      "schema": {
                                        "type": "number"
                                      }
                                    },
                                    {
                                      "name": "minProperties",
                                      "required": false,
                                      "schema": {
                                        "type": "number"
                                      }
                                    },
                                    {
                                      "name": "required",
                                      "required": false,
                                      "schema": {
                                        "items": [
                                          {
                                            "schema": {
                                              "type": "string"
                                            },
                                            "name": null
                                          }
                                        ],
                                        "type": "array"
                                      }
                                    },
                                    {
                                      "name": "properties",
                                      "required": false,
                                      "schema": {
                                        "properties": [],
                                        "type": "object"
                                      }
                                    },
                                    {
                                      "name": "patternProperties",
                                      "required": false,
                                      "schema": {
                                        "properties": [],
                                        "type": "object"
                                      }
                                    },
                                    {
                                      "name": "additionalProperties",
                                      "required": false,
                                      "schema": {
                                        "fullComment": "JSON Schema v7",
                                        "properties": [],
                                        "type": "object"
                                      }
                                    },
                                    {
                                      "name": "dependencies",
                                      "required": false,
                                      "schema": {
                                        "properties": [],
                                        "type": "object"
                                      }
                                    },
                                    {
                                      "name": "propertyNames",
                                      "required": false,
                                      "schema": {
                                        "fullComment": "JSON Schema v7",
                                        "properties": [],
                                        "type": "object"
                                      }
                                    },
                                    {
                                      "name": "if",
                                      "required": false,
                                      "schema": {
                                        "fullComment": "JSON Schema v7",
                                        "properties": [],
                                        "type": "object"
                                      }
                                    },
                                    {
                                      "name": "then",
                                      "required": false,
                                      "schema": {
                                        "fullComment": "JSON Schema v7",
                                        "properties": [],
                                        "type": "object"
                                      }
                                    },
                                    {
                                      "name": "else",
                                      "required": false,
                                      "schema": {
                                        "fullComment": "JSON Schema v7",
                                        "properties": [],
                                        "type": "object"
                                      }
                                    },
                                    {
                                      "name": "allOf",
                                      "required": false,
                                      "schema": {
                                        "items": [
                                          {
                                            "schema": {
                                              "fullComment": "JSON Schema v7",
                                              "properties": [],
                                              "type": "object"
                                            },
                                            "name": "JSONSchema7Definition"
                                          }
                                        ],
                                        "type": "array"
                                      }
                                    },
                                    {
                                      "name": "anyOf",
                                      "required": false,
                                      "schema": {
                                        "items": [
                                          {
                                            "schema": {
                                              "fullComment": "JSON Schema v7",
                                              "properties": [],
                                              "type": "object"
                                            },
                                            "name": "JSONSchema7Definition"
                                          }
                                        ],
                                        "type": "array"
                                      }
                                    },
                                    {
                                      "name": "oneOf",
                                      "required": false,
                                      "schema": {
                                        "items": [
                                          {
                                            "schema": {
                                              "fullComment": "JSON Schema v7",
                                              "properties": [],
                                              "type": "object"
                                            },
                                            "name": "JSONSchema7Definition"
                                          }
                                        ],
                                        "type": "array"
                                      }
                                    },
                                    {
                                      "name": "not",
                                      "required": false,
                                      "schema": {
                                        "fullComment": "JSON Schema v7",
                                        "properties": [],
                                        "type": "object"
                                      }
                                    },
                                    {
                                      "name": "format",
                                      "required": false,
                                      "schema": {
                                        "type": "string"
                                      }
                                    },
                                    {
                                      "name": "contentMediaType",
                                      "required": false,
                                      "schema": {
                                        "type": "string"
                                      }
                                    },
                                    {
                                      "name": "contentEncoding",
                                      "required": false,
                                      "schema": {
                                        "type": "string"
                                      }
                                    },
                                    {
                                      "name": "definitions",
                                      "required": false,
                                      "schema": {
                                        "properties": [],
                                        "type": "object"
                                      }
                                    },
                                    {
                                      "name": "title",
                                      "required": false,
                                      "schema": {
                                        "type": "string"
                                      }
                                    },
                                    {
                                      "name": "description",
                                      "required": false,
                                      "schema": {
                                        "type": "string"
                                      }
                                    },
                                    {
                                      "name": "default",
                                      "required": false,
                                      "schema": {
                                        "fullComment": "Primitive type",
                                        "properties": [],
                                        "type": "object"
                                      }
                                    },
                                    {
                                      "name": "readOnly",
                                      "required": false,
                                      "schema": {
                                        "type": "boolean"
                                      }
                                    },
                                    {
                                      "name": "writeOnly",
                                      "required": false,
                                      "schema": {
                                        "type": "boolean"
                                      }
                                    },
                                    {
                                      "name": "examples",
                                      "required": false,
                                      "schema": {
                                        "fullComment": "Primitive type",
                                        "properties": [],
                                        "type": "object"
                                      }
                                    }
                                  ],
                                  "type": "object"
                                }
                              },
                              {
                                "name": "simplifiedSchema",
                                "required": false,
                                "schema": {
                                  "fullComment": "JSONSchema7 derivative that has the following capabilities and and characteristics...\n\n- does not include objects in objects that are also referenced to using xxxSlug or xxxId\n- recursively finds the references and expands them, unless the references are circular\n- easier to read\n- has all the information we need\n- is able to generate an object with values in the exact format the function needs it\n- is able to easily generate a form",
                                  "properties": [
                                    {
                                      "name": "todo",
                                      "required": false,
                                      "schema": {
                                        "type": "string"
                                      }
                                    },
                                    {
                                      "name": "discussion",
                                      "required": false,
                                      "schema": {
                                        "type": "string"
                                      }
                                    },
                                    {
                                      "name": "idea",
                                      "required": false,
                                      "schema": {
                                        "type": "string"
                                      }
                                    },
                                    {
                                      "name": "later",
                                      "required": false,
                                      "schema": {
                                        "type": "string"
                                      }
                                    },
                                    {
                                      "name": "nb",
                                      "required": false,
                                      "schema": {
                                        "type": "string"
                                      }
                                    },
                                    {
                                      "name": "title",
                                      "required": false,
                                      "schema": {
                                        "type": "string"
                                      }
                                    },
                                    {
                                      "name": "section",
                                      "required": false,
                                      "schema": {
                                        "type": "string"
                                      }
                                    },
                                    {
                                      "name": "description",
                                      "required": false,
                                      "schema": {
                                        "type": "string"
                                      }
                                    },
                                    {
                                      "name": "type",
                                      "required": true,
                                      "schema": {
                                        "enum": [
                                          "string",
                                          "number",
                                          "boolean",
                                          "object",
                                          "array",
                                          "null"
                                        ],
                                        "fullComment": "- string\n- number\n- boolean\n- object\n- array\n- null\n\nNB: Omit doesn't work for the indexer! This would be the type: Omit<JSONSchema7TypeName, \"integer\">;\n\n",
                                        "nb": "Omit doesn't work for the indexer! This would be the type: Omit<JSONSchema7TypeName, \"integer\">;",
                                        "type": "string"
                                      }
                                    },
                                    {
                                      "name": "circularRefName",
                                      "required": false,
                                      "schema": {
                                        "fullComment": "sometimes we still need to reference to another schema because this thing is recursive. In that case the ref name will be here",
                                        "type": "string"
                                      }
                                    },
                                    {
                                      "name": "enum",
                                      "required": false,
                                      "schema": {
                                        "fullComment": "in case of enums this could appear... mostly strings, but e.g. numbers can also be an enum I think",
                                        "items": [
                                          {
                                            "schema": {
                                              "fullComment": "Primitive type",
                                              "properties": [],
                                              "type": "object"
                                            },
                                            "name": "JSONSchema7Type"
                                          }
                                        ],
                                        "type": "array"
                                      }
                                    },
                                    {
                                      "name": "properties",
                                      "required": false,
                                      "schema": {
                                        "fullComment": "in case of object, this will always appear",
                                        "items": [
                                          {
                                            "schema": {
                                              "fullComment": "",
                                              "properties": [
                                                {
                                                  "name": "name",
                                                  "required": true,
                                                  "schema": {
                                                    "type": "string"
                                                  }
                                                },
                                                {
                                                  "name": "schema",
                                                  "required": true,
                                                  "schema": {
                                                    "circularRefName": "SimplifiedSchema",
                                                    "properties": [],
                                                    "type": "object"
                                                  }
                                                },
                                                {
                                                  "name": "required",
                                                  "required": true,
                                                  "schema": {
                                                    "fullComment": "NB: can't we put this in the SimplifiedSchema itself?",
                                                    "nb": "can't we put this in the SimplifiedSchema itself?",
                                                    "type": "boolean"
                                                  }
                                                }
                                              ],
                                              "type": "object"
                                            },
                                            "name": "SimplifiedSchemaProperty"
                                          }
                                        ],
                                        "type": "array"
                                      }
                                    },
                                    {
                                      "name": "items",
                                      "required": false,
                                      "schema": {
                                        "fullComment": "in case of arrays, this will always appear",
                                        "items": [
                                          {
                                            "schema": {
                                              "fullComment": "",
                                              "properties": [
                                                {
                                                  "name": "name",
                                                  "required": true,
                                                  "schema": {
                                                    "fullComment": "name in case of it being a reference, otherwise null",
                                                    "type": "string"
                                                  }
                                                },
                                                {
                                                  "name": "schema",
                                                  "required": true,
                                                  "schema": {
                                                    "circularRefName": "SimplifiedSchema",
                                                    "properties": [],
                                                    "type": "object"
                                                  }
                                                }
                                              ],
                                              "type": "object"
                                            },
                                            "name": "SimplifiedSchemaItem"
                                          }
                                        ],
                                        "type": "array"
                                      }
                                    },
                                    {
                                      "name": "fullComment",
                                      "required": false,
                                      "schema": {
                                        "fullComment": "Full doccomment, parsed without all stars syntax.\n\nNB: besides this, every `CommentType` can optionally also be found as a property on the `SimplifiedSchema`",
                                        "nb": "besides this, every `CommentType` can optionally also be found as a property on the `SimplifiedSchema`",
                                        "type": "string"
                                      }
                                    }
                                  ],
                                  "type": "object"
                                }
                              },
                              {
                                "name": "required",
                                "required": true,
                                "schema": {
                                  "type": "boolean"
                                }
                              }
                            ],
                            "type": "object"
                          },
                          "name": "FunctionParameter"
                        }
                      ],
                      "type": "array"
                    }
                  },
                  {
                    "name": "size",
                    "required": true,
                    "schema": {
                      "fullComment": "size of this function (comments + code)\n\ntype interface that can be used to summarize multiple files",
                      "properties": [
                        {
                          "name": "numberOfFiles",
                          "required": false,
                          "schema": {
                            "fullComment": "if this is about multiple files, the number of files is specified here",
                            "type": "number"
                          }
                        },
                        {
                          "name": "characters",
                          "required": true,
                          "schema": {
                            "fullComment": "amount of characters",
                            "type": "number"
                          }
                        },
                        {
                          "name": "lines",
                          "required": true,
                          "schema": {
                            "fullComment": "amount of lines",
                            "type": "number"
                          }
                        },
                        {
                          "name": "bytes",
                          "required": true,
                          "schema": {
                            "fullComment": "amount of bytes",
                            "type": "number"
                          }
                        },
                        {
                          "name": "linesPerFile",
                          "required": true,
                          "schema": {
                            "fullComment": "rounded, amount of lines per file (averaged)",
                            "type": "number"
                          }
                        },
                        {
                          "name": "charactersPerLine",
                          "required": true,
                          "schema": {
                            "fullComment": "rounded, amount of characters per line (averaged)",
                            "type": "number"
                          }
                        },
                        {
                          "name": "bytesPerCharacter",
                          "required": true,
                          "schema": {
                            "fullComment": "rounded, amount of bytes per character",
                            "type": "number"
                          }
                        }
                      ],
                      "type": "object"
                    }
                  },
                  {
                    "name": "commentSize",
                    "required": false,
                    "schema": {
                      "fullComment": "size of the comments of this function (including surrounding comments)\n\ntype interface that can be used to summarize multiple files",
                      "properties": [
                        {
                          "name": "numberOfFiles",
                          "required": false,
                          "schema": {
                            "fullComment": "if this is about multiple files, the number of files is specified here",
                            "type": "number"
                          }
                        },
                        {
                          "name": "characters",
                          "required": true,
                          "schema": {
                            "fullComment": "amount of characters",
                            "type": "number"
                          }
                        },
                        {
                          "name": "lines",
                          "required": true,
                          "schema": {
                            "fullComment": "amount of lines",
                            "type": "number"
                          }
                        },
                        {
                          "name": "bytes",
                          "required": true,
                          "schema": {
                            "fullComment": "amount of bytes",
                            "type": "number"
                          }
                        },
                        {
                          "name": "linesPerFile",
                          "required": true,
                          "schema": {
                            "fullComment": "rounded, amount of lines per file (averaged)",
                            "type": "number"
                          }
                        },
                        {
                          "name": "charactersPerLine",
                          "required": true,
                          "schema": {
                            "fullComment": "rounded, amount of characters per line (averaged)",
                            "type": "number"
                          }
                        },
                        {
                          "name": "bytesPerCharacter",
                          "required": true,
                          "schema": {
                            "fullComment": "rounded, amount of bytes per character",
                            "type": "number"
                          }
                        }
                      ],
                      "type": "object"
                    }
                  },
                  {
                    "name": "codeSize",
                    "required": false,
                    "schema": {
                      "fullComment": "size of the code inside the function (without comments)\n\ntype interface that can be used to summarize multiple files",
                      "properties": [
                        {
                          "name": "numberOfFiles",
                          "required": false,
                          "schema": {
                            "fullComment": "if this is about multiple files, the number of files is specified here",
                            "type": "number"
                          }
                        },
                        {
                          "name": "characters",
                          "required": true,
                          "schema": {
                            "fullComment": "amount of characters",
                            "type": "number"
                          }
                        },
                        {
                          "name": "lines",
                          "required": true,
                          "schema": {
                            "fullComment": "amount of lines",
                            "type": "number"
                          }
                        },
                        {
                          "name": "bytes",
                          "required": true,
                          "schema": {
                            "fullComment": "amount of bytes",
                            "type": "number"
                          }
                        },
                        {
                          "name": "linesPerFile",
                          "required": true,
                          "schema": {
                            "fullComment": "rounded, amount of lines per file (averaged)",
                            "type": "number"
                          }
                        },
                        {
                          "name": "charactersPerLine",
                          "required": true,
                          "schema": {
                            "fullComment": "rounded, amount of characters per line (averaged)",
                            "type": "number"
                          }
                        },
                        {
                          "name": "bytesPerCharacter",
                          "required": true,
                          "schema": {
                            "fullComment": "rounded, amount of bytes per character",
                            "type": "number"
                          }
                        }
                      ],
                      "type": "object"
                    }
                  },
                  {
                    "name": "cumulativeSize",
                    "required": false,
                    "schema": {
                      "fullComment": "tells you the size of itself and all its dependencies that are used that are also part of an operation, recursively\n\ntype interface that can be used to summarize multiple files",
                      "properties": [
                        {
                          "name": "numberOfFiles",
                          "required": false,
                          "schema": {
                            "fullComment": "if this is about multiple files, the number of files is specified here",
                            "type": "number"
                          }
                        },
                        {
                          "name": "characters",
                          "required": true,
                          "schema": {
                            "fullComment": "amount of characters",
                            "type": "number"
                          }
                        },
                        {
                          "name": "lines",
                          "required": true,
                          "schema": {
                            "fullComment": "amount of lines",
                            "type": "number"
                          }
                        },
                        {
                          "name": "bytes",
                          "required": true,
                          "schema": {
                            "fullComment": "amount of bytes",
                            "type": "number"
                          }
                        },
                        {
                          "name": "linesPerFile",
                          "required": true,
                          "schema": {
                            "fullComment": "rounded, amount of lines per file (averaged)",
                            "type": "number"
                          }
                        },
                        {
                          "name": "charactersPerLine",
                          "required": true,
                          "schema": {
                            "fullComment": "rounded, amount of characters per line (averaged)",
                            "type": "number"
                          }
                        },
                        {
                          "name": "bytesPerCharacter",
                          "required": true,
                          "schema": {
                            "fullComment": "rounded, amount of bytes per character",
                            "type": "number"
                          }
                        }
                      ],
                      "type": "object"
                    }
                  },
                  {
                    "name": "cumulativeCommentSize",
                    "required": false,
                    "schema": {
                      "fullComment": "type interface that can be used to summarize multiple files",
                      "properties": [
                        {
                          "name": "numberOfFiles",
                          "required": false,
                          "schema": {
                            "fullComment": "if this is about multiple files, the number of files is specified here",
                            "type": "number"
                          }
                        },
                        {
                          "name": "characters",
                          "required": true,
                          "schema": {
                            "fullComment": "amount of characters",
                            "type": "number"
                          }
                        },
                        {
                          "name": "lines",
                          "required": true,
                          "schema": {
                            "fullComment": "amount of lines",
                            "type": "number"
                          }
                        },
                        {
                          "name": "bytes",
                          "required": true,
                          "schema": {
                            "fullComment": "amount of bytes",
                            "type": "number"
                          }
                        },
                        {
                          "name": "linesPerFile",
                          "required": true,
                          "schema": {
                            "fullComment": "rounded, amount of lines per file (averaged)",
                            "type": "number"
                          }
                        },
                        {
                          "name": "charactersPerLine",
                          "required": true,
                          "schema": {
                            "fullComment": "rounded, amount of characters per line (averaged)",
                            "type": "number"
                          }
                        },
                        {
                          "name": "bytesPerCharacter",
                          "required": true,
                          "schema": {
                            "fullComment": "rounded, amount of bytes per character",
                            "type": "number"
                          }
                        }
                      ],
                      "type": "object"
                    }
                  },
                  {
                    "name": "cumulativeCodeSize",
                    "required": false,
                    "schema": {
                      "fullComment": "type interface that can be used to summarize multiple files",
                      "properties": [
                        {
                          "name": "numberOfFiles",
                          "required": false,
                          "schema": {
                            "fullComment": "if this is about multiple files, the number of files is specified here",
                            "type": "number"
                          }
                        },
                        {
                          "name": "characters",
                          "required": true,
                          "schema": {
                            "fullComment": "amount of characters",
                            "type": "number"
                          }
                        },
                        {
                          "name": "lines",
                          "required": true,
                          "schema": {
                            "fullComment": "amount of lines",
                            "type": "number"
                          }
                        },
                        {
                          "name": "bytes",
                          "required": true,
                          "schema": {
                            "fullComment": "amount of bytes",
                            "type": "number"
                          }
                        },
                        {
                          "name": "linesPerFile",
                          "required": true,
                          "schema": {
                            "fullComment": "rounded, amount of lines per file (averaged)",
                            "type": "number"
                          }
                        },
                        {
                          "name": "charactersPerLine",
                          "required": true,
                          "schema": {
                            "fullComment": "rounded, amount of characters per line (averaged)",
                            "type": "number"
                          }
                        },
                        {
                          "name": "bytesPerCharacter",
                          "required": true,
                          "schema": {
                            "fullComment": "rounded, amount of bytes per character",
                            "type": "number"
                          }
                        }
                      ],
                      "type": "object"
                    }
                  },
                  {
                    "name": "maxIndentationDepth",
                    "required": true,
                    "schema": {
                      "fullComment": "maximum amount of times indedented in this function\n\ngood for determining the complexity and finding code that can be simplified/destructured into smaller pieces",
                      "type": "number"
                    }
                  },
                  {
                    "name": "dependantFiles",
                    "required": false,
                    "schema": {
                      "fullComment": "finds all files that import this function\n\nNB: this is not indexed because this information has nothing to do with the operation itself, but the exposure to the broader monorepo. This is calculated on the fly.",
                      "nb": "this is not indexed because this information has nothing to do with the operation itself, but the exposure to the broader monorepo. This is calculated on the fly.",
                      "items": [
                        {
                          "schema": {
                            "type": "string"
                          },
                          "name": null
                        }
                      ],
                      "type": "array"
                    }
                  },
                  {
                    "name": "operationName",
                    "required": true,
                    "schema": {
                      "fullComment": "name of operation the model belongs to\n\n- calculated value (not stored in database)\n- can be `null` or an actual operationName that it was saved at\n- can be `undefined` when you are creating an item, because then it can be set for you",
                      "type": "null"
                    }
                  },
                  {
                    "name": "projectRelativePath",
                    "required": true,
                    "schema": {
                      "fullComment": "path to dbfile\n\n- calculated value (not stored in database)\n- relatively from the project (without slash at start)\n- can be `undefined` when you are creating an item, because then it can be set for you",
                      "type": "string"
                    }
                  },
                  {
                    "name": "operationRelativePath",
                    "required": false,
                    "schema": {
                      "fullComment": "path to db file\n\n- relatively from the operation root folder (without slash at start)\n- calculated value (not stored in database)\n- can be `undefined` if the db file does not belong to an operation\n- can be `undefined` when you are creating an item, because then it can be set for you",
                      "type": "string"
                    }
                  },
                  {
                    "name": "id",
                    "required": true,
                    "schema": {
                      "fullComment": "unique id of the model",
                      "type": "string"
                    }
                  },
                  {
                    "name": "name",
                    "required": true,
                    "schema": {
                      "fullComment": "name (identifier) of the model",
                      "type": "string"
                    }
                  },
                  {
                    "name": "slug",
                    "required": true,
                    "schema": {
                      "fullComment": "kebab-case variant of the name",
                      "type": "string"
                    }
                  },
                  {
                    "name": "operationRelativeTypescriptFilePath",
                    "required": true,
                    "schema": {
                      "fullComment": "relative file path from the operation that this indexed instance is referencing to\n\ne.g. src/general.ts\n\n(no preceding slash)",
                      "type": "string"
                    }
                  }
                ],
                "type": "object"
              }
            },
            {
              "name": "groups",
              "required": false,
              "schema": {
                "fullComment": "Groups the person(s) of the device belong to, including the inherited groups and `public` special group",
                "items": [
                  {
                    "schema": {
                      "fullComment": "TODO: change this into a hierarchical kvmd model.\n\nA `Person` is able to be part of one or multiple `Group`s. \n\nA `Device` without `Person` is just part of group `public` and can only access `public` info and features.\n\n`Group`s and individual `Person`s can be given `Authorization`\n\nGroups are the main way to provide authorizations to functions, databases, and files (code, data, and text)\n\n- To apply an authorization on a function, you can use the `.config.authorizations` parameter on the function\n- To apply an authorization on a file or folder, you can use the `authorizations` frontmatter\n- To apply an authorization on a database model, you can use the `authorizations` parameter on the `Dataset` or in the `TsInterface` frontmatter.\n\nThere are some special groups. These groups may have specific functionalities applied to them. Try to use these groups as much as possible, instead of creating your own groups:\n\n- `admin` has 100% access to everything\n- `public` is any user, even without signup\n- `trusted` is any trusted user. These may be allowed to do additional things",
                      "todo": "change this into a hierarchical kvmd model.",
                      "properties": [
                        {
                          "name": "slug",
                          "required": true,
                          "schema": {
                            "fullComment": "kebab-case of the name, should be unique\n\nuse this for any identifier that's not an Id-type. Usually this is a kebab-case version of a written text, but it can also be a file path, for example.",
                            "type": "string"
                          }
                        },
                        {
                          "name": "name",
                          "required": true,
                          "schema": {
                            "fullComment": "Name of the group (will set slug)\n\nNB: this can be used in functions to specify certain access to groups. It should there fore be unique and you should be careful when changing it!",
                            "nb": "this can be used in functions to specify certain access to groups. It should there fore be unique and you should be careful when changing it!",
                            "type": "string"
                          }
                        },
                        {
                          "name": "language",
                          "required": true,
                          "schema": {
                            "enum": [
                              "english",
                              "dutch",
                              "nepali",
                              "portuguese",
                              "brazilian",
                              "german",
                              "french",
                              "spanish",
                              "italian",
                              "norwegian",
                              "swedish",
                              "danish",
                              "vietnamese",
                              "indonesian",
                              "southAfrican",
                              "tokiPona",
                              "hindi",
                              "mandarin",
                              "arabic",
                              "bengali",
                              "urdu",
                              "japanese",
                              "swahili"
                            ],
                            "fullComment": "all currently supported languages",
                            "type": "string"
                          }
                        },
                        {
                          "name": "createdAt",
                          "required": true,
                          "schema": {
                            "fullComment": "Time\n\nTime can be stored in various ways but in my experience it is, again, best to keep it simple and just have one way to store time. I can think about this for hours, but my intuition goes towards using the same format as Date.now() because it is a very small format and is easy to read.\n\nIt is the amount of ms since 1970.\n\nI could argue to store it in seconds since 1970 since there are few applications of doing ms, but maybe we do, and it's just 30% bigger. No problem.\n\nTherefore, let's store all time values in the format Date.now()",
                            "type": "number"
                          }
                        },
                        {
                          "name": "updatedAt",
                          "required": true,
                          "schema": {
                            "fullComment": "Time\n\nTime can be stored in various ways but in my experience it is, again, best to keep it simple and just have one way to store time. I can think about this for hours, but my intuition goes towards using the same format as Date.now() because it is a very small format and is easy to read.\n\nIt is the amount of ms since 1970.\n\nI could argue to store it in seconds since 1970 since there are few applications of doing ms, but maybe we do, and it's just 30% bigger. No problem.\n\nTherefore, let's store all time values in the format Date.now()",
                            "type": "number"
                          }
                        },
                        {
                          "name": "deletedAt",
                          "required": true,
                          "schema": {
                            "fullComment": "Time\n\nTime can be stored in various ways but in my experience it is, again, best to keep it simple and just have one way to store time. I can think about this for hours, but my intuition goes towards using the same format as Date.now() because it is a very small format and is easy to read.\n\nIt is the amount of ms since 1970.\n\nI could argue to store it in seconds since 1970 since there are few applications of doing ms, but maybe we do, and it's just 30% bigger. No problem.\n\nTherefore, let's store all time values in the format Date.now()",
                            "type": "number"
                          }
                        },
                        {
                          "name": "createdFirstAt",
                          "required": true,
                          "schema": {
                            "fullComment": "in some cases, data can be created before it was created in our system. In this case, use CreatedFirstAt if this information is important.\n\nTime\n\nTime can be stored in various ways but in my experience it is, again, best to keep it simple and just have one way to store time. I can think about this for hours, but my intuition goes towards using the same format as Date.now() because it is a very small format and is easy to read.\n\nIt is the amount of ms since 1970.\n\nI could argue to store it in seconds since 1970 since there are few applications of doing ms, but maybe we do, and it's just 30% bigger. No problem.\n\nTherefore, let's store all time values in the format Date.now()",
                            "type": "number"
                          }
                        },
                        {
                          "name": "operationName",
                          "required": true,
                          "schema": {
                            "fullComment": "name of operation the model belongs to\n\n- calculated value (not stored in database)\n- can be `null` or an actual operationName that it was saved at\n- can be `undefined` when you are creating an item, because then it can be set for you",
                            "type": "null"
                          }
                        },
                        {
                          "name": "projectRelativePath",
                          "required": true,
                          "schema": {
                            "fullComment": "path to dbfile\n\n- calculated value (not stored in database)\n- relatively from the project (without slash at start)\n- can be `undefined` when you are creating an item, because then it can be set for you",
                            "type": "string"
                          }
                        },
                        {
                          "name": "operationRelativePath",
                          "required": false,
                          "schema": {
                            "fullComment": "path to db file\n\n- relatively from the operation root folder (without slash at start)\n- calculated value (not stored in database)\n- can be `undefined` if the db file does not belong to an operation\n- can be `undefined` when you are creating an item, because then it can be set for you",
                            "type": "string"
                          }
                        },
                        {
                          "name": "id",
                          "required": true,
                          "schema": {
                            "fullComment": "Should be an unique string By default, you can use `generateId()` to generate a random string of 16 characters. If you wish, you can also use any other string, as long as you are sure it's unique.\n\n# Background Info\n\nazAZ09 characters are easy to copy and provide 62 characters. the goal of an id is to be unique.\n\nthe advantage of a random id compared to an numeric id starting with 1 with auto increment is that you can set them up decentralised.\n\nthe change of duplicate ids gets bigger once you make them shorter the change of finding an existing id gets bigger once you make them shorter\n\nAn Id with 12 characters would provide 3.22e21 combinations.\n\nWhat is the change of duplicate ids? This depends on the amount of identifyable items in the data What is the change of guessing an id? This depends on speed of a brute force attack and the amount of available datapoints. If you can guess 10000 times per second, you can make 864.000.000 guesses. A billion guesses on a dataset of a billion datapoints yields 3226 correct ids on average.\n\nWhy make an id short? I don't know if there's an important reason.\n\nAll in all, I think we should make ids 24 characters by default. This would make it very easy to store, yet, with more than E42 combinations, make it nearly impossible to get duplication or brute force hits.\n\nAn id would look like this:\n\n``` { \"id\": \"sk2EcW9AkZpksk2EcW9AkZpk\" } ```\n\nLooks good to me! Don't think about it and just keep it simple. We can always migrate later to a bigger amount, but I don't see good reason to keep it smaller than this.",
                            "type": "string"
                          }
                        },
                        {
                          "name": "categoryStack",
                          "required": false,
                          "schema": {
                            "fullComment": "In case of jsonSingle storageMethod, the categoryStack is generated by the location of the file in the db model folder in the db folder.\n\nNB: Changing this value when updating/upserting, changes where the item is located!\n\nTaken from the location in the folder of the db-model.\n\nNB: Changing this value when updating/upserting, changes where the item is located!",
                            "nb": "Changing this value when updating/upserting, changes where the item is located!",
                            "items": [
                              {
                                "schema": {
                                  "type": "string"
                                },
                                "name": null
                              }
                            ],
                            "type": "array"
                          }
                        },
                        {
                          "name": "description",
                          "required": false,
                          "schema": {
                            "type": "string"
                          }
                        },
                        {
                          "name": "inherited_groupSlugs",
                          "required": false,
                          "schema": {
                            "fullComment": "Any group recursively inherits other groups until it finds itself being in a loop. This way you can have authorizations applied on multiple groups at once, more easily\n\nTODO: change this into parent_groupSlugs. it's just a hierarchical categorisation, in a way.",
                            "todo": "change this into parent_groupSlugs. it's just a hierarchical categorisation, in a way.",
                            "items": [
                              {
                                "schema": {
                                  "type": "string"
                                },
                                "name": null
                              }
                            ],
                            "type": "array"
                          }
                        },
                        {
                          "name": "customAuthorizations",
                          "required": false,
                          "schema": {
                            "fullComment": "DEPRECATED: not needed\n\nOptionally, provide custom authorization to a group",
                            "items": [
                              {
                                "schema": {
                                  "fullComment": "`Authorization` helps you provide certain access to files, data, functionality, and code. Authorization can be provided custom, or by indexation. The indexation of the codebase and text-files overwrites the custom authorization in the `Group`-model.\n\n## Different authorizations\n\nFor files (ts, md, json, etc...):\n\n- canWriteCreate\n- canWriteUpdate\n- canWriteDelete\n- canRead\n- canSearch (only search index)\n\nFor db model data subsets:\n\n- canWriteUpdate\n- canWriteCreate\n- canWriteDelete\n- canRead\n- canSearch (only search index)\n\nFor functions:\n\n- canExecute\n\nFor functions, interfaces, variables:\n\n- canRead (reading docs only. for source, you need to provide the file auth)\n- canSearch (only search index)",
                                  "properties": [
                                    {
                                      "name": "isProjectWide",
                                      "required": false,
                                      "schema": {
                                        "fullComment": "If true, this authorization is project-wide and applies to everything",
                                        "type": "boolean"
                                      }
                                    },
                                    {
                                      "name": "authorizedOperationName",
                                      "required": false,
                                      "schema": {
                                        "fullComment": "If selected, the authorization will apply to the whole operation",
                                        "type": "string"
                                      }
                                    },
                                    {
                                      "name": "tsFunctionId",
                                      "required": false,
                                      "schema": {
                                        "fullComment": "If selected, the authorization will apply to this function\n\nShould be an unique string By default, you can use `generateId()` to generate a random string of 16 characters. If you wish, you can also use any other string, as long as you are sure it's unique.\n\n# Background Info\n\nazAZ09 characters are easy to copy and provide 62 characters. the goal of an id is to be unique.\n\nthe advantage of a random id compared to an numeric id starting with 1 with auto increment is that you can set them up decentralised.\n\nthe change of duplicate ids gets bigger once you make them shorter the change of finding an existing id gets bigger once you make them shorter\n\nAn Id with 12 characters would provide 3.22e21 combinations.\n\nWhat is the change of duplicate ids? This depends on the amount of identifyable items in the data What is the change of guessing an id? This depends on speed of a brute force attack and the amount of available datapoints. If you can guess 10000 times per second, you can make 864.000.000 guesses. A billion guesses on a dataset of a billion datapoints yields 3226 correct ids on average.\n\nWhy make an id short? I don't know if there's an important reason.\n\nAll in all, I think we should make ids 24 characters by default. This would make it very easy to store, yet, with more than E42 combinations, make it nearly impossible to get duplication or brute force hits.\n\nAn id would look like this:\n\n``` { \"id\": \"sk2EcW9AkZpksk2EcW9AkZpk\" } ```\n\nLooks good to me! Don't think about it and just keep it simple. We can always migrate later to a bigger amount, but I don't see good reason to keep it smaller than this.",
                                        "type": "string"
                                      }
                                    },
                                    {
                                      "name": "tsVariableId",
                                      "required": false,
                                      "schema": {
                                        "fullComment": "If selected, the authorization will apply to this variable\n\nShould be an unique string By default, you can use `generateId()` to generate a random string of 16 characters. If you wish, you can also use any other string, as long as you are sure it's unique.\n\n# Background Info\n\nazAZ09 characters are easy to copy and provide 62 characters. the goal of an id is to be unique.\n\nthe advantage of a random id compared to an numeric id starting with 1 with auto increment is that you can set them up decentralised.\n\nthe change of duplicate ids gets bigger once you make them shorter the change of finding an existing id gets bigger once you make them shorter\n\nAn Id with 12 characters would provide 3.22e21 combinations.\n\nWhat is the change of duplicate ids? This depends on the amount of identifyable items in the data What is the change of guessing an id? This depends on speed of a brute force attack and the amount of available datapoints. If you can guess 10000 times per second, you can make 864.000.000 guesses. A billion guesses on a dataset of a billion datapoints yields 3226 correct ids on average.\n\nWhy make an id short? I don't know if there's an important reason.\n\nAll in all, I think we should make ids 24 characters by default. This would make it very easy to store, yet, with more than E42 combinations, make it nearly impossible to get duplication or brute force hits.\n\nAn id would look like this:\n\n``` { \"id\": \"sk2EcW9AkZpksk2EcW9AkZpk\" } ```\n\nLooks good to me! Don't think about it and just keep it simple. We can always migrate later to a bigger amount, but I don't see good reason to keep it smaller than this.",
                                        "type": "string"
                                      }
                                    },
                                    {
                                      "name": "tsInterfaceId",
                                      "required": false,
                                      "schema": {
                                        "fullComment": "If selected, the authorization will apply to this interface\n\nShould be an unique string By default, you can use `generateId()` to generate a random string of 16 characters. If you wish, you can also use any other string, as long as you are sure it's unique.\n\n# Background Info\n\nazAZ09 characters are easy to copy and provide 62 characters. the goal of an id is to be unique.\n\nthe advantage of a random id compared to an numeric id starting with 1 with auto increment is that you can set them up decentralised.\n\nthe change of duplicate ids gets bigger once you make them shorter the change of finding an existing id gets bigger once you make them shorter\n\nAn Id with 12 characters would provide 3.22e21 combinations.\n\nWhat is the change of duplicate ids? This depends on the amount of identifyable items in the data What is the change of guessing an id? This depends on speed of a brute force attack and the amount of available datapoints. If you can guess 10000 times per second, you can make 864.000.000 guesses. A billion guesses on a dataset of a billion datapoints yields 3226 correct ids on average.\n\nWhy make an id short? I don't know if there's an important reason.\n\nAll in all, I think we should make ids 24 characters by default. This would make it very easy to store, yet, with more than E42 combinations, make it nearly impossible to get duplication or brute force hits.\n\nAn id would look like this:\n\n``` { \"id\": \"sk2EcW9AkZpksk2EcW9AkZpk\" } ```\n\nLooks good to me! Don't think about it and just keep it simple. We can always migrate later to a bigger amount, but I don't see good reason to keep it smaller than this.",
                                        "type": "string"
                                      }
                                    },
                                    {
                                      "name": "datasetId",
                                      "required": false,
                                      "schema": {
                                        "fullComment": "If selected, the authorization will apply to this dataset\n\nShould be an unique string By default, you can use `generateId()` to generate a random string of 16 characters. If you wish, you can also use any other string, as long as you are sure it's unique.\n\n# Background Info\n\nazAZ09 characters are easy to copy and provide 62 characters. the goal of an id is to be unique.\n\nthe advantage of a random id compared to an numeric id starting with 1 with auto increment is that you can set them up decentralised.\n\nthe change of duplicate ids gets bigger once you make them shorter the change of finding an existing id gets bigger once you make them shorter\n\nAn Id with 12 characters would provide 3.22e21 combinations.\n\nWhat is the change of duplicate ids? This depends on the amount of identifyable items in the data What is the change of guessing an id? This depends on speed of a brute force attack and the amount of available datapoints. If you can guess 10000 times per second, you can make 864.000.000 guesses. A billion guesses on a dataset of a billion datapoints yields 3226 correct ids on average.\n\nWhy make an id short? I don't know if there's an important reason.\n\nAll in all, I think we should make ids 24 characters by default. This would make it very easy to store, yet, with more than E42 combinations, make it nearly impossible to get duplication or brute force hits.\n\nAn id would look like this:\n\n``` { \"id\": \"sk2EcW9AkZpksk2EcW9AkZpk\" } ```\n\nLooks good to me! Don't think about it and just keep it simple. We can always migrate later to a bigger amount, but I don't see good reason to keep it smaller than this.",
                                        "type": "string"
                                      }
                                    },
                                    {
                                      "name": "authorizedProjectRelativePath",
                                      "required": false,
                                      "schema": {
                                        "fullComment": "If selected, the authorization will apply to everything in this folder or to this specific file",
                                        "type": "string"
                                      }
                                    },
                                    {
                                      "name": "canExecute",
                                      "required": false,
                                      "schema": {
                                        "type": "boolean"
                                      }
                                    },
                                    {
                                      "name": "canWriteCreate",
                                      "required": false,
                                      "schema": {
                                        "type": "boolean"
                                      }
                                    },
                                    {
                                      "name": "canWriteUpdate",
                                      "required": false,
                                      "schema": {
                                        "type": "boolean"
                                      }
                                    },
                                    {
                                      "name": "canWriteDelete",
                                      "required": false,
                                      "schema": {
                                        "type": "boolean"
                                      }
                                    },
                                    {
                                      "name": "canRead",
                                      "required": false,
                                      "schema": {
                                        "type": "boolean"
                                      }
                                    },
                                    {
                                      "name": "canSearch",
                                      "required": false,
                                      "schema": {
                                        "type": "boolean"
                                      }
                                    }
                                  ],
                                  "type": "object"
                                },
                                "name": "Authorization"
                              }
                            ],
                            "type": "array"
                          }
                        },
                        {
                          "name": "indexedAuthorizationCalculated",
                          "required": false,
                          "schema": {
                            "items": [
                              {
                                "schema": {
                                  "fullComment": "Authorization model for indexed authorizations\n\nDon't edit this! If you wish to add authorizations to a group, either edit the code or text-files, or provide custom authorizations to the `Group`.",
                                  "properties": [
                                    {
                                      "name": "isProjectWide",
                                      "required": false,
                                      "schema": {
                                        "fullComment": "If true, this authorization is project-wide and applies to everything",
                                        "type": "boolean"
                                      }
                                    },
                                    {
                                      "name": "authorizedOperationName",
                                      "required": false,
                                      "schema": {
                                        "fullComment": "If selected, the authorization will apply to the whole operation",
                                        "type": "string"
                                      }
                                    },
                                    {
                                      "name": "tsFunctionId",
                                      "required": false,
                                      "schema": {
                                        "fullComment": "If selected, the authorization will apply to this function\n\nShould be an unique string By default, you can use `generateId()` to generate a random string of 16 characters. If you wish, you can also use any other string, as long as you are sure it's unique.\n\n# Background Info\n\nazAZ09 characters are easy to copy and provide 62 characters. the goal of an id is to be unique.\n\nthe advantage of a random id compared to an numeric id starting with 1 with auto increment is that you can set them up decentralised.\n\nthe change of duplicate ids gets bigger once you make them shorter the change of finding an existing id gets bigger once you make them shorter\n\nAn Id with 12 characters would provide 3.22e21 combinations.\n\nWhat is the change of duplicate ids? This depends on the amount of identifyable items in the data What is the change of guessing an id? This depends on speed of a brute force attack and the amount of available datapoints. If you can guess 10000 times per second, you can make 864.000.000 guesses. A billion guesses on a dataset of a billion datapoints yields 3226 correct ids on average.\n\nWhy make an id short? I don't know if there's an important reason.\n\nAll in all, I think we should make ids 24 characters by default. This would make it very easy to store, yet, with more than E42 combinations, make it nearly impossible to get duplication or brute force hits.\n\nAn id would look like this:\n\n``` { \"id\": \"sk2EcW9AkZpksk2EcW9AkZpk\" } ```\n\nLooks good to me! Don't think about it and just keep it simple. We can always migrate later to a bigger amount, but I don't see good reason to keep it smaller than this.",
                                        "type": "string"
                                      }
                                    },
                                    {
                                      "name": "tsVariableId",
                                      "required": false,
                                      "schema": {
                                        "fullComment": "If selected, the authorization will apply to this variable\n\nShould be an unique string By default, you can use `generateId()` to generate a random string of 16 characters. If you wish, you can also use any other string, as long as you are sure it's unique.\n\n# Background Info\n\nazAZ09 characters are easy to copy and provide 62 characters. the goal of an id is to be unique.\n\nthe advantage of a random id compared to an numeric id starting with 1 with auto increment is that you can set them up decentralised.\n\nthe change of duplicate ids gets bigger once you make them shorter the change of finding an existing id gets bigger once you make them shorter\n\nAn Id with 12 characters would provide 3.22e21 combinations.\n\nWhat is the change of duplicate ids? This depends on the amount of identifyable items in the data What is the change of guessing an id? This depends on speed of a brute force attack and the amount of available datapoints. If you can guess 10000 times per second, you can make 864.000.000 guesses. A billion guesses on a dataset of a billion datapoints yields 3226 correct ids on average.\n\nWhy make an id short? I don't know if there's an important reason.\n\nAll in all, I think we should make ids 24 characters by default. This would make it very easy to store, yet, with more than E42 combinations, make it nearly impossible to get duplication or brute force hits.\n\nAn id would look like this:\n\n``` { \"id\": \"sk2EcW9AkZpksk2EcW9AkZpk\" } ```\n\nLooks good to me! Don't think about it and just keep it simple. We can always migrate later to a bigger amount, but I don't see good reason to keep it smaller than this.",
                                        "type": "string"
                                      }
                                    },
                                    {
                                      "name": "tsInterfaceId",
                                      "required": false,
                                      "schema": {
                                        "fullComment": "If selected, the authorization will apply to this interface\n\nShould be an unique string By default, you can use `generateId()` to generate a random string of 16 characters. If you wish, you can also use any other string, as long as you are sure it's unique.\n\n# Background Info\n\nazAZ09 characters are easy to copy and provide 62 characters. the goal of an id is to be unique.\n\nthe advantage of a random id compared to an numeric id starting with 1 with auto increment is that you can set them up decentralised.\n\nthe change of duplicate ids gets bigger once you make them shorter the change of finding an existing id gets bigger once you make them shorter\n\nAn Id with 12 characters would provide 3.22e21 combinations.\n\nWhat is the change of duplicate ids? This depends on the amount of identifyable items in the data What is the change of guessing an id? This depends on speed of a brute force attack and the amount of available datapoints. If you can guess 10000 times per second, you can make 864.000.000 guesses. A billion guesses on a dataset of a billion datapoints yields 3226 correct ids on average.\n\nWhy make an id short? I don't know if there's an important reason.\n\nAll in all, I think we should make ids 24 characters by default. This would make it very easy to store, yet, with more than E42 combinations, make it nearly impossible to get duplication or brute force hits.\n\nAn id would look like this:\n\n``` { \"id\": \"sk2EcW9AkZpksk2EcW9AkZpk\" } ```\n\nLooks good to me! Don't think about it and just keep it simple. We can always migrate later to a bigger amount, but I don't see good reason to keep it smaller than this.",
                                        "type": "string"
                                      }
                                    },
                                    {
                                      "name": "datasetId",
                                      "required": false,
                                      "schema": {
                                        "fullComment": "If selected, the authorization will apply to this dataset\n\nShould be an unique string By default, you can use `generateId()` to generate a random string of 16 characters. If you wish, you can also use any other string, as long as you are sure it's unique.\n\n# Background Info\n\nazAZ09 characters are easy to copy and provide 62 characters. the goal of an id is to be unique.\n\nthe advantage of a random id compared to an numeric id starting with 1 with auto increment is that you can set them up decentralised.\n\nthe change of duplicate ids gets bigger once you make them shorter the change of finding an existing id gets bigger once you make them shorter\n\nAn Id with 12 characters would provide 3.22e21 combinations.\n\nWhat is the change of duplicate ids? This depends on the amount of identifyable items in the data What is the change of guessing an id? This depends on speed of a brute force attack and the amount of available datapoints. If you can guess 10000 times per second, you can make 864.000.000 guesses. A billion guesses on a dataset of a billion datapoints yields 3226 correct ids on average.\n\nWhy make an id short? I don't know if there's an important reason.\n\nAll in all, I think we should make ids 24 characters by default. This would make it very easy to store, yet, with more than E42 combinations, make it nearly impossible to get duplication or brute force hits.\n\nAn id would look like this:\n\n``` { \"id\": \"sk2EcW9AkZpksk2EcW9AkZpk\" } ```\n\nLooks good to me! Don't think about it and just keep it simple. We can always migrate later to a bigger amount, but I don't see good reason to keep it smaller than this.",
                                        "type": "string"
                                      }
                                    },
                                    {
                                      "name": "authorizedProjectRelativePath",
                                      "required": false,
                                      "schema": {
                                        "fullComment": "If selected, the authorization will apply to everything in this folder or to this specific file",
                                        "type": "string"
                                      }
                                    },
                                    {
                                      "name": "canExecute",
                                      "required": false,
                                      "schema": {
                                        "type": "boolean"
                                      }
                                    },
                                    {
                                      "name": "canWriteCreate",
                                      "required": false,
                                      "schema": {
                                        "type": "boolean"
                                      }
                                    },
                                    {
                                      "name": "canWriteUpdate",
                                      "required": false,
                                      "schema": {
                                        "type": "boolean"
                                      }
                                    },
                                    {
                                      "name": "canWriteDelete",
                                      "required": false,
                                      "schema": {
                                        "type": "boolean"
                                      }
                                    },
                                    {
                                      "name": "canRead",
                                      "required": false,
                                      "schema": {
                                        "type": "boolean"
                                      }
                                    },
                                    {
                                      "name": "canSearch",
                                      "required": false,
                                      "schema": {
                                        "type": "boolean"
                                      }
                                    },
                                    {
                                      "name": "createdAt",
                                      "required": true,
                                      "schema": {
                                        "fullComment": "Time\n\nTime can be stored in various ways but in my experience it is, again, best to keep it simple and just have one way to store time. I can think about this for hours, but my intuition goes towards using the same format as Date.now() because it is a very small format and is easy to read.\n\nIt is the amount of ms since 1970.\n\nI could argue to store it in seconds since 1970 since there are few applications of doing ms, but maybe we do, and it's just 30% bigger. No problem.\n\nTherefore, let's store all time values in the format Date.now()",
                                        "type": "number"
                                      }
                                    },
                                    {
                                      "name": "updatedAt",
                                      "required": true,
                                      "schema": {
                                        "fullComment": "Time\n\nTime can be stored in various ways but in my experience it is, again, best to keep it simple and just have one way to store time. I can think about this for hours, but my intuition goes towards using the same format as Date.now() because it is a very small format and is easy to read.\n\nIt is the amount of ms since 1970.\n\nI could argue to store it in seconds since 1970 since there are few applications of doing ms, but maybe we do, and it's just 30% bigger. No problem.\n\nTherefore, let's store all time values in the format Date.now()",
                                        "type": "number"
                                      }
                                    },
                                    {
                                      "name": "deletedAt",
                                      "required": true,
                                      "schema": {
                                        "fullComment": "Time\n\nTime can be stored in various ways but in my experience it is, again, best to keep it simple and just have one way to store time. I can think about this for hours, but my intuition goes towards using the same format as Date.now() because it is a very small format and is easy to read.\n\nIt is the amount of ms since 1970.\n\nI could argue to store it in seconds since 1970 since there are few applications of doing ms, but maybe we do, and it's just 30% bigger. No problem.\n\nTherefore, let's store all time values in the format Date.now()",
                                        "type": "number"
                                      }
                                    },
                                    {
                                      "name": "createdFirstAt",
                                      "required": true,
                                      "schema": {
                                        "fullComment": "in some cases, data can be created before it was created in our system. In this case, use CreatedFirstAt if this information is important.\n\nTime\n\nTime can be stored in various ways but in my experience it is, again, best to keep it simple and just have one way to store time. I can think about this for hours, but my intuition goes towards using the same format as Date.now() because it is a very small format and is easy to read.\n\nIt is the amount of ms since 1970.\n\nI could argue to store it in seconds since 1970 since there are few applications of doing ms, but maybe we do, and it's just 30% bigger. No problem.\n\nTherefore, let's store all time values in the format Date.now()",
                                        "type": "number"
                                      }
                                    },
                                    {
                                      "name": "operationName",
                                      "required": true,
                                      "schema": {
                                        "fullComment": "name of operation the model belongs to\n\n- calculated value (not stored in database)\n- can be `null` or an actual operationName that it was saved at\n- can be `undefined` when you are creating an item, because then it can be set for you",
                                        "type": "null"
                                      }
                                    },
                                    {
                                      "name": "projectRelativePath",
                                      "required": true,
                                      "schema": {
                                        "fullComment": "path to dbfile\n\n- calculated value (not stored in database)\n- relatively from the project (without slash at start)\n- can be `undefined` when you are creating an item, because then it can be set for you",
                                        "type": "string"
                                      }
                                    },
                                    {
                                      "name": "operationRelativePath",
                                      "required": false,
                                      "schema": {
                                        "fullComment": "path to db file\n\n- relatively from the operation root folder (without slash at start)\n- calculated value (not stored in database)\n- can be `undefined` if the db file does not belong to an operation\n- can be `undefined` when you are creating an item, because then it can be set for you",
                                        "type": "string"
                                      }
                                    },
                                    {
                                      "name": "id",
                                      "required": true,
                                      "schema": {
                                        "fullComment": "Should be an unique string By default, you can use `generateId()` to generate a random string of 16 characters. If you wish, you can also use any other string, as long as you are sure it's unique.\n\n# Background Info\n\nazAZ09 characters are easy to copy and provide 62 characters. the goal of an id is to be unique.\n\nthe advantage of a random id compared to an numeric id starting with 1 with auto increment is that you can set them up decentralised.\n\nthe change of duplicate ids gets bigger once you make them shorter the change of finding an existing id gets bigger once you make them shorter\n\nAn Id with 12 characters would provide 3.22e21 combinations.\n\nWhat is the change of duplicate ids? This depends on the amount of identifyable items in the data What is the change of guessing an id? This depends on speed of a brute force attack and the amount of available datapoints. If you can guess 10000 times per second, you can make 864.000.000 guesses. A billion guesses on a dataset of a billion datapoints yields 3226 correct ids on average.\n\nWhy make an id short? I don't know if there's an important reason.\n\nAll in all, I think we should make ids 24 characters by default. This would make it very easy to store, yet, with more than E42 combinations, make it nearly impossible to get duplication or brute force hits.\n\nAn id would look like this:\n\n``` { \"id\": \"sk2EcW9AkZpksk2EcW9AkZpk\" } ```\n\nLooks good to me! Don't think about it and just keep it simple. We can always migrate later to a bigger amount, but I don't see good reason to keep it smaller than this.",
                                        "type": "string"
                                      }
                                    },
                                    {
                                      "name": "categoryStackCalculated",
                                      "required": false,
                                      "schema": {
                                        "fullComment": "In case of jsonSingle storageMethod, the categoryStack is generated by the location of the file in the db model folder in the db folder.\n\nNB: Changing this value when updating/upserting, changes where the item is located!\n\nTaken from the location in the folder of the db-model.\n\nNB: Changing this value when updating/upserting, changes where the item is located!",
                                        "nb": "Changing this value when updating/upserting, changes where the item is located!",
                                        "items": [
                                          {
                                            "schema": {
                                              "type": "string"
                                            },
                                            "name": null
                                          }
                                        ],
                                        "type": "array"
                                      }
                                    }
                                  ],
                                  "type": "object"
                                },
                                "name": "AuthorizationModel"
                              }
                            ],
                            "type": "array"
                          }
                        }
                      ],
                      "type": "object"
                    },
                    "name": "Group"
                  }
                ],
                "type": "array"
              }
            },
            {
              "name": "hasAuthorization",
              "required": true,
              "schema": {
                "fullComment": "Device has authorization to the function",
                "type": "boolean"
              }
            },
            {
              "name": "authToken",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "serverContext",
              "required": false,
              "schema": {
                "fullComment": "Original context coming from server.js\n\nNB: due to indexation problems the type has been removed. It can be casted to the `Context` type, which you can import from:\n\n`import { Context } from \"server/typings/common\";`",
                "nb": "due to indexation problems the type has been removed. It can be casted to the `Context` type, which you can import from:",
                "properties": [],
                "type": "object"
              }
            }
          ],
          "type": "object"
        },
        "required": true
      },
      {
        "name": "projectRelativeFilePath",
        "schema": {
          "type": "string",
          "description": "file path of which you want to see the file collection"
        },
        "simplifiedSchema": {
          "fullComment": "file path of which you want to see the file collection",
          "type": "string"
        },
        "required": true
      }
    ]
  },
  {
    "name": "getFolderFileCollections",
    "operationName": "file-collection-functions",
    "parameters": [
      {
        "name": "absoluteFolderPath",
        "schema": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": true
      },
      {
        "name": "projectRoot",
        "schema": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": true
      },
      {
        "name": "groupSlugs",
        "schema": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "simplifiedSchema": {
          "items": [
            {
              "schema": {
                "type": "string"
              },
              "name": null
            }
          ],
          "type": "array"
        },
        "required": true
      }
    ]
  },
  {
    "name": "getFileCollectionPaths",
    "operationName": "file-collection-util",
    "parameters": [
      {
        "name": "absoluteFilePath",
        "schema": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": true
      }
    ]
  },
  {
    "name": "getMarkdownIndexPath",
    "operationName": "file-collection-util",
    "parameters": [
      {
        "name": "absoluteFilePath",
        "schema": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": true
      },
      {
        "name": "shouldExist",
        "schema": {
          "type": "boolean"
        },
        "simplifiedSchema": {
          "type": "boolean"
        },
        "required": false
      }
    ]
  },
  {
    "name": "getMarkdownIndex",
    "operationName": "file-collection-util",
    "parameters": [
      {
        "name": "projectRelativePath",
        "schema": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": true
      }
    ]
  },
  {
    "name": "getOnlyUniqueFileCollectionsFromDirentsFilter",
    "operationName": "file-collection-util",
    "parameters": [
      {
        "name": "absoluteFolderPath",
        "schema": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": true
      }
    ]
  },
  {
    "name": "isFileCollection",
    "operationName": "file-collection-util",
    "parameters": [
      {
        "name": "absoluteFilePathA",
        "schema": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": true
      },
      {
        "name": "absoluteFilePathB",
        "schema": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": true
      }
    ]
  },
  {
    "name": "onlyUniqueFileCollectionsFilter",
    "operationName": "file-collection-util",
    "parameters": [
      {
        "name": "absoluteFilePath",
        "schema": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": true
      },
      {
        "name": "index",
        "schema": {
          "type": "number"
        },
        "simplifiedSchema": {
          "type": "number"
        },
        "required": true
      },
      {
        "name": "self",
        "schema": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "simplifiedSchema": {
          "items": [
            {
              "schema": {
                "type": "string"
              },
              "name": null
            }
          ],
          "type": "array"
        },
        "required": true
      }
    ]
  },
  {
    "name": "readFolderFileCollections",
    "operationName": "file-collection-util",
    "parameters": [
      {
        "name": "absoluteBaseFolderPath",
        "schema": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": true
      }
    ]
  },
  {
    "name": "renameFileCollection",
    "operationName": "file-collection-util",
    "parameters": [
      {
        "name": "projectRelativeFilePath",
        "schema": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": true
      },
      {
        "name": "newBaseName",
        "schema": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": true
      },
      {
        "name": "config",
        "schema": {
          "type": "object",
          "properties": {
            "isDryrun": {
              "type": "boolean"
            }
          },
          "additionalProperties": false
        },
        "simplifiedSchema": {
          "properties": [
            {
              "name": "isDryrun",
              "required": false,
              "schema": {
                "type": "boolean"
              }
            }
          ],
          "type": "object"
        },
        "required": false
      }
    ]
  },
  {
    "name": "updateMarkdownIndex",
    "operationName": "file-collection-util",
    "parameters": [
      {
        "name": "projectRelativeMarkdownFilePath",
        "schema": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": true
      },
      {
        "name": "partial",
        "schema": {
          "$ref": "#/definitions/NestedPartial%3CMarkdownIndex%3E"
        },
        "required": true
      }
    ]
  },
  {
    "name": "copyAllRelativeFiles",
    "operationName": "fs-util",
    "parameters": [
      {
        "name": "relativeFilePaths",
        "schema": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "simplifiedSchema": {
          "items": [
            {
              "schema": {
                "type": "string"
              },
              "name": null
            }
          ],
          "type": "array"
        },
        "required": true
      },
      {
        "name": "absoluteSourceRoot",
        "schema": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": true
      },
      {
        "name": "absoluteDestinationRoot",
        "schema": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": true
      },
      {
        "name": "force",
        "schema": {
          "type": "boolean",
          "description": "Overwrite existing file or directory"
        },
        "simplifiedSchema": {
          "fullComment": "Overwrite existing file or directory",
          "type": "boolean"
        },
        "required": false
      }
    ]
  },
  {
    "name": "findClosestAbsolutePath",
    "operationName": "fs-util",
    "parameters": [
      {
        "name": "absolutePath",
        "schema": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": true
      }
    ]
  },
  {
    "name": "findFileNameCaseInsensitive",
    "operationName": "fs-util",
    "parameters": [
      {
        "name": "folderPath",
        "schema": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": true
      },
      {
        "name": "fileName",
        "schema": {
          "type": "string",
          "description": "fileName with extension"
        },
        "simplifiedSchema": {
          "fullComment": "fileName with extension",
          "type": "string"
        },
        "required": true
      }
    ]
  },
  {
    "name": "getAllFoldersUntilFolder",
    "operationName": "fs-util",
    "parameters": [
      {
        "name": "folderPath",
        "schema": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": true
      }
    ]
  },
  {
    "name": "getFirstAvailableFilename",
    "operationName": "fs-util",
    "parameters": [
      {
        "name": "absoluteFilePath",
        "schema": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": true
      }
    ]
  },
  {
    "name": "getFirstFile",
    "operationName": "fs-util",
    "parameters": [
      {
        "name": "fullPath",
        "schema": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": true
      }
    ]
  },
  {
    "name": "getFolderSizeObject",
    "operationName": "fs-util",
    "parameters": [
      {
        "name": "absoluteFolderPath",
        "schema": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": true
      },
      {
        "name": "minimumReportSizeMb",
        "schema": {
          "type": "number",
          "description": "Folders smaller than this won't provide details"
        },
        "simplifiedSchema": {
          "fullComment": "Folders smaller than this won't provide details",
          "type": "number"
        },
        "required": false
      },
      {
        "name": "ignoreGenerated",
        "schema": {
          "type": "boolean"
        },
        "simplifiedSchema": {
          "type": "boolean"
        },
        "required": false
      }
    ]
  },
  {
    "name": "getFolderSize",
    "operationName": "fs-util",
    "parameters": [
      {
        "name": "absoluteFolderPath",
        "schema": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": true
      }
    ]
  },
  {
    "name": "getOneFolderUpPath",
    "operationName": "fs-util",
    "parameters": [
      {
        "name": "folderPath",
        "schema": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": true
      }
    ]
  },
  {
    "name": "parseMd",
    "operationName": "fs-util",
    "parameters": [
      {
        "name": "mdFilePath",
        "schema": {
          "$ref": "#/definitions/Path",
          "description": "path to a md file"
        },
        "simplifiedSchema": {
          "fullComment": "path to a md file\n\nunlike PathLike, this is only a string\n\nFor now, we don't have a clear convention whether or not this string should be absolute or anything.",
          "type": "string"
        },
        "required": true
      }
    ]
  },
  {
    "name": "readFrontmatter",
    "operationName": "fs-util",
    "parameters": [
      {
        "name": "absoluteFilePath",
        "schema": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": true
      }
    ]
  },
  {
    "name": "removeAllExcept",
    "operationName": "fs-util",
    "parameters": [
      {
        "name": "folderPath",
        "schema": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": true
      },
      {
        "name": "config",
        "schema": {
          "type": "object",
          "properties": {
            "ignore": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "array of relative folder paths and file paths that should not be removed (include the extensions!)"
            },
            "typeToRemove": {
              "type": "string",
              "enum": [
                "file",
                "folder"
              ]
            }
          },
          "additionalProperties": false
        },
        "simplifiedSchema": {
          "properties": [
            {
              "name": "ignore",
              "required": false,
              "schema": {
                "fullComment": "array of relative folder paths and file paths that should not be removed (include the extensions!)",
                "items": [
                  {
                    "schema": {
                      "type": "string"
                    },
                    "name": null
                  }
                ],
                "type": "array"
              }
            },
            {
              "name": "typeToRemove",
              "required": false,
              "schema": {
                "enum": [
                  "file",
                  "folder"
                ],
                "type": "string"
              }
            }
          ],
          "type": "object"
        },
        "required": false
      }
    ]
  },
  {
    "name": "renameAndCreate",
    "operationName": "fs-util",
    "parameters": [
      {
        "name": "oldPath",
        "schema": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": true
      },
      {
        "name": "newPath",
        "schema": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": true
      }
    ]
  },
  {
    "name": "returnReadmePathFromFolder",
    "operationName": "fs-util",
    "parameters": [
      {
        "name": "absoluteFolderPath",
        "schema": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": true
      }
    ]
  },
  {
    "name": "makeRelative",
    "operationName": "fs-util-js",
    "parameters": [
      {
        "name": "absolutePath",
        "schema": {
          "type": "string",
          "description": "absolute path of a file or folder without a slash at the end"
        },
        "simplifiedSchema": {
          "fullComment": "absolute path of a file or folder without a slash at the end",
          "type": "string"
        },
        "required": true
      },
      {
        "name": "baseFolderPath",
        "schema": {
          "type": "string",
          "description": "folder path without a slash at the end"
        },
        "simplifiedSchema": {
          "fullComment": "folder path without a slash at the end",
          "type": "string"
        },
        "required": true
      }
    ]
  },
  {
    "name": "getAssociatedMd",
    "operationName": "get-associated-md",
    "parameters": [
      {
        "name": "absoluteFilePath",
        "schema": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": true
      }
    ]
  },
  {
    "name": "getAvailableFolderPath",
    "operationName": "get-available-folder-path",
    "parameters": [
      {
        "name": "basePath",
        "schema": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": true
      },
      {
        "name": "folderName",
        "schema": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": true
      },
      {
        "name": "number",
        "schema": {
          "type": "number"
        },
        "simplifiedSchema": {
          "type": "number"
        },
        "required": false
      }
    ]
  },
  {
    "name": "getOperationBins",
    "operationName": "get-package-json",
    "parameters": [
      {
        "name": "operationFolderPath",
        "schema": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": true
      }
    ]
  },
  {
    "name": "getOperationPackageName",
    "operationName": "get-package-json",
    "parameters": [
      {
        "name": "operationFolderPath",
        "schema": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": true
      }
    ]
  },
  {
    "name": "getPackageSourcePaths",
    "operationName": "get-package-source-paths",
    "parameters": [
      {
        "name": "{\n  operationBasePath,\n  ignoreIndexFiles,\n  allTypes,\n}",
        "schema": {
          "type": "object",
          "properties": {
            "operationBasePath": {
              "type": "string"
            },
            "ignoreIndexFiles": {
              "type": "boolean"
            },
            "allTypes": {
              "type": "boolean",
              "description": "by default, only searches for ts and tsx files, if this is true, it will search for any type"
            }
          },
          "required": [
            "operationBasePath"
          ],
          "additionalProperties": false
        },
        "simplifiedSchema": {
          "properties": [
            {
              "name": "operationBasePath",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "ignoreIndexFiles",
              "required": false,
              "schema": {
                "type": "boolean"
              }
            },
            {
              "name": "allTypes",
              "required": false,
              "schema": {
                "fullComment": "by default, only searches for ts and tsx files, if this is true, it will search for any type",
                "type": "boolean"
              }
            }
          ],
          "type": "object"
        },
        "required": true
      }
    ]
  },
  {
    "name": "calculatePathMetaData",
    "operationName": "path-util",
    "parameters": [
      {
        "name": "absolutePath",
        "schema": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": true
      }
    ]
  },
  {
    "name": "categorizeFiles",
    "operationName": "path-util",
    "parameters": [
      {
        "name": "{\n  basePath,\n  type,\n  ignoreIndexFiles,\n}",
        "schema": {
          "type": "object",
          "properties": {
            "basePath": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              ]
            },
            "ignoreIndexFiles": {
              "type": "boolean",
              "description": "ignore index files or not"
            },
            "type": {
              "type": "string",
              "enum": [
                "code",
                "data",
                "text"
              ],
              "description": "if given, only search for files of a specific containing data type"
            }
          },
          "required": [
            "basePath"
          ],
          "additionalProperties": false
        },
        "simplifiedSchema": {
          "properties": [
            {
              "name": "basePath",
              "required": true,
              "schema": {
                "properties": [],
                "type": "object"
              }
            },
            {
              "name": "ignoreIndexFiles",
              "required": false,
              "schema": {
                "fullComment": "ignore index files or not",
                "type": "boolean"
              }
            },
            {
              "name": "type",
              "required": false,
              "schema": {
                "enum": [
                  "code",
                  "data",
                  "text"
                ],
                "fullComment": "if given, only search for files of a specific containing data type",
                "type": "string"
              }
            }
          ],
          "type": "object"
        },
        "required": true
      }
    ]
  },
  {
    "name": "getPathMainComment",
    "operationName": "path-util",
    "parameters": [
      {
        "name": "absolutePath",
        "schema": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": true
      }
    ]
  },
  {
    "name": "getSizeSummary",
    "operationName": "path-util",
    "parameters": [
      {
        "name": "filePath",
        "schema": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": true
      }
    ]
  },
  {
    "name": "sumSizeSummary",
    "operationName": "path-util",
    "parameters": [
      {
        "name": "filePaths",
        "schema": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "simplifiedSchema": {
          "items": [
            {
              "schema": {
                "type": "string"
              },
              "name": null
            }
          ],
          "type": "array"
        },
        "required": true
      }
    ]
  },
  {
    "name": "findTemplates",
    "operationName": "rename-template-files",
    "parameters": [
      {
        "name": "basePath",
        "schema": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": true
      },
      {
        "name": "doNotExploreChildFolders",
        "schema": {
          "type": "boolean"
        },
        "simplifiedSchema": {
          "type": "boolean"
        },
        "required": false
      }
    ]
  },
  {
    "name": "setJsonKey",
    "operationName": "set-json-key",
    "parameters": [
      {
        "name": "{\n  jsonPath,\n  keyLocation,\n  value,\n  debug,\n}",
        "schema": {
          "type": "object",
          "properties": {
            "jsonPath": {
              "type": "string"
            },
            "keyLocation": {
              "type": "string"
            },
            "value": {
              "type": "string"
            },
            "debug": {
              "type": "boolean"
            }
          },
          "required": [
            "jsonPath",
            "keyLocation",
            "value"
          ],
          "additionalProperties": false
        },
        "simplifiedSchema": {
          "properties": [
            {
              "name": "jsonPath",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "keyLocation",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "value",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "debug",
              "required": false,
              "schema": {
                "type": "boolean"
              }
            }
          ],
          "type": "object"
        },
        "required": true
      }
    ]
  },
  {
    "name": "writeToAssets",
    "operationName": "write-to-assets",
    "parameters": [
      {
        "name": "filePath",
        "schema": {
          "type": "string",
          "description": "Insert `__filename` here or the typescript file path"
        },
        "simplifiedSchema": {
          "fullComment": "Insert `__filename` here or the typescript file path",
          "type": "string"
        },
        "required": true
      },
      {
        "name": "data",
        "schema": {
          "description": "The data you want to write to a file, can also be a promise"
        },
        "simplifiedSchema": {
          "fullComment": "The data you want to write to a file, can also be a promise",
          "properties": [],
          "type": "object"
        },
        "required": true
      },
      {
        "name": "assetsFileName",
        "schema": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": false
      },
      {
        "name": "hideLog",
        "schema": {
          "type": "boolean"
        },
        "simplifiedSchema": {
          "type": "boolean"
        },
        "required": false
      }
    ]
  },
  {
    "name": "makeFileType",
    "operationName": "make-file-type",
    "parameters": [
      {
        "name": "filePath",
        "schema": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": true
      }
    ]
  },
  {
    "name": "exploreOperation",
    "operationName": "explore-project",
    "parameters": [
      {
        "name": "operationBasePath",
        "schema": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": true
      }
    ]
  },
  {
    "name": "getExplorationType",
    "operationName": "explore-project",
    "parameters": [
      {
        "name": "absolutePath",
        "schema": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": true
      },
      {
        "name": "operationFolders",
        "schema": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "simplifiedSchema": {
          "items": [
            {
              "schema": {
                "type": "string"
              },
              "name": null
            }
          ],
          "type": "array"
        },
        "required": true
      }
    ]
  },
  {
    "name": "getFileWithExtension",
    "operationName": "explore-project",
    "parameters": [
      {
        "name": "absolutePath",
        "schema": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": true
      }
    ]
  },
  {
    "name": "getFrontmattersMappedObject",
    "operationName": "explore-project",
    "parameters": [
      {
        "name": "projectRoot",
        "schema": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": true
      },
      {
        "name": "markdownPaths",
        "schema": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "simplifiedSchema": {
          "items": [
            {
              "schema": {
                "type": "string"
              },
              "name": null
            }
          ],
          "type": "array"
        },
        "required": false
      }
    ]
  },
  {
    "name": "getInstanceNames",
    "operationName": "explore-project",
    "parameters": [
      {
        "name": "array",
        "schema": {
          "type": "array",
          "items": {}
        },
        "simplifiedSchema": {
          "items": [
            {
              "schema": {
                "properties": [],
                "type": "object"
              },
              "name": null
            }
          ],
          "type": "array"
        },
        "required": true
      },
      {
        "name": "relativePathFromProjectRoot",
        "schema": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": true
      }
    ]
  },
  {
    "name": "hasSameProjectPath",
    "operationName": "explore-project",
    "parameters": [
      {
        "name": "projectRelativePath",
        "schema": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": true
      }
    ]
  },
  {
    "name": "findOperationBasePathWithClassification",
    "operationName": "get-path",
    "parameters": [
      {
        "name": "startPath",
        "schema": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": true
      }
    ]
  },
  {
    "name": "findOperationBasePath",
    "operationName": "get-path",
    "parameters": [
      {
        "name": "startPath",
        "schema": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": true
      }
    ]
  },
  {
    "name": "getOperationClassification",
    "operationName": "get-path",
    "parameters": [
      {
        "name": "folderPath",
        "schema": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": true
      }
    ]
  },
  {
    "name": "getOperationPathParse",
    "operationName": "get-path",
    "parameters": [
      {
        "name": "absolutePath",
        "schema": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": true
      }
    ]
  },
  {
    "name": "getOperationRelativePath",
    "operationName": "get-path",
    "parameters": [
      {
        "name": "absolutePath",
        "schema": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": true
      },
      {
        "name": "operationBasePath",
        "schema": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": true
      }
    ]
  },
  {
    "name": "getPathParse",
    "operationName": "get-path",
    "parameters": [
      {
        "name": "absolutePath",
        "schema": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": true
      }
    ]
  },
  {
    "name": "getProjectRoot",
    "operationName": "get-path",
    "parameters": [
      {
        "name": "fullSourcePath",
        "schema": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": false
      }
    ]
  },
  {
    "name": "getRelativeLinkPath",
    "operationName": "get-path",
    "parameters": [
      {
        "name": "absoluteFromFilePath",
        "schema": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": true
      },
      {
        "name": "absoluteToFilePath",
        "schema": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": true
      },
      {
        "name": "debug",
        "schema": {
          "type": "boolean"
        },
        "simplifiedSchema": {
          "type": "boolean"
        },
        "required": false
      }
    ]
  },
  {
    "name": "getRelativePath",
    "operationName": "get-path",
    "parameters": [
      {
        "name": "absolutePath",
        "schema": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": true
      },
      {
        "name": "relativeFrom",
        "schema": {
          "type": "string",
          "const": "project-root"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": true
      }
    ]
  },
  {
    "name": "getSrcRelativeFileId",
    "operationName": "get-path",
    "parameters": [
      {
        "name": "operationRelativePath",
        "schema": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": true
      }
    ]
  },
  {
    "name": "getSubExtensions",
    "operationName": "get-path",
    "parameters": [
      {
        "name": "absolutePath",
        "schema": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": true
      }
    ]
  },
  {
    "name": "hasProjectRootFile",
    "operationName": "get-path",
    "parameters": [
      {
        "name": "absolutePath",
        "schema": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": true
      }
    ]
  },
  {
    "name": "isBundle",
    "operationName": "get-path",
    "parameters": [
      {
        "name": "folderPath",
        "schema": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": false
      }
    ]
  },
  {
    "name": "isOperation",
    "operationName": "get-path",
    "parameters": [
      {
        "name": "absoluteFolderPath",
        "schema": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": true
      }
    ]
  },
  {
    "name": "isWorkspaceRoot",
    "operationName": "get-path",
    "parameters": [
      {
        "name": "folderPath",
        "schema": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": true
      }
    ]
  },
  {
    "name": "findAllTodoFolderPaths",
    "operationName": "k-explore",
    "parameters": [
      {
        "name": "basePath",
        "schema": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": true
      },
      {
        "name": "ignoreOperations",
        "schema": {
          "type": "boolean"
        },
        "simplifiedSchema": {
          "type": "boolean"
        },
        "required": false
      }
    ]
  },
  {
    "name": "getFolderTypescriptFiles",
    "operationName": "k-explore",
    "parameters": [
      {
        "name": "folderPath",
        "schema": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": true
      },
      {
        "name": "includeStats",
        "schema": {
          "type": "boolean"
        },
        "simplifiedSchema": {
          "type": "boolean"
        },
        "required": true
      }
    ]
  },
  {
    "name": "getOperationMetaData",
    "operationName": "operation-util",
    "parameters": [
      {
        "name": "operationBasePath",
        "schema": {
          "type": "string",
          "description": "any path in an operation"
        },
        "simplifiedSchema": {
          "fullComment": "any path in an operation",
          "type": "string"
        },
        "required": true
      }
    ]
  },
  {
    "name": "recalculateOperationIndexJson",
    "operationName": "operation-util",
    "parameters": [
      {
        "name": "operationBasePath",
        "schema": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": true
      },
      {
        "name": "manualProjectRoot",
        "schema": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": false
      }
    ]
  },
  {
    "name": "exitIfOperationsChange",
    "operationName": "watch-operations",
    "parameters": [
      {
        "name": "allOperationSourcePaths",
        "schema": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "simplifiedSchema": {
          "items": [
            {
              "schema": {
                "type": "string"
              },
              "name": null
            }
          ],
          "type": "array"
        },
        "required": true
      },
      {
        "name": "manualProjectRoot",
        "schema": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": false
      }
    ]
  },
  {
    "name": "fileExplorerOpen",
    "operationName": "file-explorer-open",
    "parameters": [
      {
        "name": "projectRelativePath",
        "schema": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": true
      }
    ]
  },
  {
    "name": "importGhostBlogs",
    "operationName": "import-notes",
    "parameters": [
      {
        "name": "absoluteGhostJsonFilePath",
        "schema": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": true
      },
      {
        "name": "destinationFolderPath",
        "schema": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": true
      }
    ]
  },
  {
    "name": "getFolderNames",
    "operationName": "play-music",
    "parameters": [
      {
        "name": "absoluteFolderPath",
        "schema": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": true
      }
    ]
  },
  {
    "name": "exploreBadNamingFiles",
    "operationName": "watch-bad-naming",
    "parameters": [
      {
        "name": "absoluteFolderPath",
        "schema": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": true
      }
    ]
  },
  {
    "name": "isBadName",
    "operationName": "watch-bad-naming",
    "parameters": [
      {
        "name": "absolutePath",
        "schema": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": true
      }
    ]
  },
  {
    "name": "renameAllBadlyNamedFiles",
    "operationName": "watch-bad-naming",
    "parameters": [
      {
        "name": "absoluteFolderPath",
        "schema": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": true
      }
    ]
  },
  {
    "name": "renameBadlyNamedFile",
    "operationName": "watch-bad-naming",
    "parameters": [
      {
        "name": "absoluteFilePath",
        "schema": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": true
      }
    ]
  },
  {
    "name": "makeMarkdownIndex",
    "operationName": "watch-markdown",
    "parameters": [
      {
        "name": "absoluteMarkdownFilePath",
        "schema": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": true
      }
    ]
  },
  {
    "name": "getRecordingType",
    "operationName": "watch-mp3-transcriptions",
    "parameters": [
      {
        "name": "absoluteTranscriptionFilePath",
        "schema": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": true
      }
    ]
  },
  {
    "name": "transcriptionToGptChunks",
    "operationName": "watch-mp3-transcriptions",
    "parameters": [
      {
        "name": "transcriptionAbsoluteFilePath",
        "schema": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": true
      },
      {
        "name": "maxGptNodeTokenSize",
        "schema": {
          "type": "number"
        },
        "simplifiedSchema": {
          "type": "number"
        },
        "required": true
      }
    ]
  },
  {
    "name": "createTranscriptionJson",
    "operationName": "whisper-local",
    "parameters": [
      {
        "name": "audioFilePath",
        "schema": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": true
      }
    ]
  },
  {
    "name": "isWav16bit",
    "operationName": "whisper-local",
    "parameters": [
      {
        "name": "absolutePath",
        "schema": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": true
      }
    ]
  },
  {
    "name": "readTranscriptionCsv",
    "operationName": "whisper-local",
    "parameters": [
      {
        "name": "csvPath",
        "schema": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": true
      }
    ]
  },
  {
    "name": "isGeneratedOperation",
    "operationName": "filename-conventions",
    "parameters": [
      {
        "name": "operationBasePath",
        "schema": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": true
      }
    ]
  },
  {
    "name": "isLocked",
    "operationName": "lock-util",
    "parameters": [
      {
        "name": "absolutePath",
        "schema": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": true
      }
    ]
  },
  {
    "name": "lock",
    "operationName": "lock-util",
    "parameters": [
      {
        "name": "aboluteLockableFilePath",
        "schema": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": true
      },
      {
        "name": "status",
        "schema": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": false
      }
    ]
  },
  {
    "name": "unlock",
    "operationName": "lock-util",
    "parameters": [
      {
        "name": "absoluteLockedFilePath",
        "schema": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": true
      }
    ]
  },
  {
    "name": "calculateToPath",
    "operationName": "generate-bundle",
    "parameters": [
      {
        "name": "operationName",
        "schema": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": true
      },
      {
        "name": "destinationFolderPath",
        "schema": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": true
      },
      {
        "name": "folder",
        "schema": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": true
      },
      {
        "name": "keepStructure",
        "schema": {
          "type": "boolean"
        },
        "simplifiedSchema": {
          "type": "boolean"
        },
        "required": false
      }
    ]
  },
  {
    "name": "copyFromRepoToNiche",
    "operationName": "generate-bundle",
    "parameters": [
      {
        "name": "repoFolder",
        "schema": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": true
      },
      {
        "name": "destinationFolderPath",
        "schema": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": true
      },
      {
        "name": "thisNicheFolderPath",
        "schema": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": true
      }
    ]
  },
  {
    "name": "copyOperation",
    "operationName": "generate-bundle",
    "parameters": [
      {
        "name": "{\n  bundleConfig,\n  destinationFolderPath,\n  operationName,\n  folder,\n}",
        "schema": {
          "type": "object",
          "properties": {
            "operationName": {
              "type": "string"
            },
            "folder": {
              "type": "string",
              "enum": [
                "packages",
                "apps",
                "modules"
              ]
            },
            "bundleConfig": {
              "$ref": "#/definitions/BundleConfig"
            },
            "destinationFolderPath": {
              "type": "string"
            }
          },
          "required": [
            "operationName",
            "folder",
            "bundleConfig",
            "destinationFolderPath"
          ],
          "additionalProperties": false
        },
        "simplifiedSchema": {
          "properties": [
            {
              "name": "operationName",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "folder",
              "required": true,
              "schema": {
                "enum": [
                  "packages",
                  "apps",
                  "modules"
                ],
                "type": "string"
              }
            },
            {
              "name": "bundleConfig",
              "required": true,
              "schema": {
                "fullComment": "--- dbStorageMethod: jsonSingle\n---\n\nConfiguration options for bundles. Used with `generateBundle`\n\nEverything in this model will be copied over to the created bundle, except for `createBundleConfig` and `customisableBundleConfig`.",
                "properties": [
                  {
                    "name": "name",
                    "required": true,
                    "schema": {
                      "type": "string"
                    }
                  },
                  {
                    "name": "deploymentHostname",
                    "required": false,
                    "schema": {
                      "fullComment": "Used to determine which call to actions are relevant (must be hostname without schema (name + tld))",
                      "type": "string"
                    }
                  },
                  {
                    "name": "description",
                    "required": false,
                    "schema": {
                      "fullComment": "a description about this bundle",
                      "type": "string"
                    }
                  },
                  {
                    "name": "emoji",
                    "required": false,
                    "schema": {
                      "type": "string"
                    }
                  },
                  {
                    "name": "primaryColor",
                    "required": false,
                    "schema": {
                      "type": "string"
                    }
                  },
                  {
                    "name": "gitRepoUrl",
                    "required": false,
                    "schema": {
                      "fullComment": "NB: later we may also want to automate the server and frontend deployment setup. for that we need credentials and automation",
                      "nb": "later we may also want to automate the server and frontend deployment setup. for that we need credentials and automation",
                      "type": "string"
                    }
                  },
                  {
                    "name": "isGitRepoPublic",
                    "required": false,
                    "schema": {
                      "fullComment": "if true, your gitrepo is marked as pubilc and thus users will be linked to it sometimes",
                      "type": "boolean"
                    }
                  },
                  {
                    "name": "bundleMarkdownReaderConfig",
                    "required": false,
                    "schema": {
                      "fullComment": "configurate your markdown reader\n\n",
                      "properties": [
                        {
                          "name": "docsInRoot",
                          "required": false,
                          "schema": {
                            "fullComment": "When set to `true`, docs are not shown in docs folder but in the root menu of the site",
                            "type": "boolean"
                          }
                        },
                        {
                          "name": "showTodos",
                          "required": false,
                          "schema": {
                            "fullComment": "Show todo menu",
                            "type": "boolean"
                          }
                        },
                        {
                          "name": "omitModulesMenu",
                          "required": false,
                          "schema": {
                            "fullComment": "`modules` will be hidden from markdown reader menu",
                            "type": "boolean"
                          }
                        },
                        {
                          "name": "omitAppsMenu",
                          "required": false,
                          "schema": {
                            "fullComment": "`apps` will be hidden from markdown reader menui",
                            "type": "boolean"
                          }
                        },
                        {
                          "name": "omitDictionaryMenu",
                          "required": false,
                          "schema": {
                            "fullComment": "if true, dictionary is omitted from menu",
                            "type": "boolean"
                          }
                        },
                        {
                          "name": "omitPackagesMenu",
                          "required": false,
                          "schema": {
                            "fullComment": "`packages` will be hidden from markdown reader menu",
                            "type": "boolean"
                          }
                        },
                        {
                          "name": "customOperationNames",
                          "required": false,
                          "schema": {
                            "fullComment": "if given, the operations menu will show with these operations",
                            "items": [
                              {
                                "schema": {
                                  "type": "string"
                                },
                                "name": null
                              }
                            ],
                            "type": "array"
                          }
                        }
                      ],
                      "type": "object"
                    }
                  },
                  {
                    "name": "slug",
                    "required": true,
                    "schema": {
                      "fullComment": "kebab-case of the name, should be unique\n\nuse this for any identifier that's not an Id-type. Usually this is a kebab-case version of a written text, but it can also be a file path, for example.",
                      "type": "string"
                    }
                  },
                  {
                    "name": "language",
                    "required": true,
                    "schema": {
                      "enum": [
                        "english",
                        "dutch",
                        "nepali",
                        "portuguese",
                        "brazilian",
                        "german",
                        "french",
                        "spanish",
                        "italian",
                        "norwegian",
                        "swedish",
                        "danish",
                        "vietnamese",
                        "indonesian",
                        "southAfrican",
                        "tokiPona",
                        "hindi",
                        "mandarin",
                        "arabic",
                        "bengali",
                        "urdu",
                        "japanese",
                        "swahili"
                      ],
                      "fullComment": "all currently supported languages",
                      "type": "string"
                    }
                  },
                  {
                    "name": "createdAt",
                    "required": true,
                    "schema": {
                      "fullComment": "Time\n\nTime can be stored in various ways but in my experience it is, again, best to keep it simple and just have one way to store time. I can think about this for hours, but my intuition goes towards using the same format as Date.now() because it is a very small format and is easy to read.\n\nIt is the amount of ms since 1970.\n\nI could argue to store it in seconds since 1970 since there are few applications of doing ms, but maybe we do, and it's just 30% bigger. No problem.\n\nTherefore, let's store all time values in the format Date.now()",
                      "type": "number"
                    }
                  },
                  {
                    "name": "updatedAt",
                    "required": true,
                    "schema": {
                      "fullComment": "Time\n\nTime can be stored in various ways but in my experience it is, again, best to keep it simple and just have one way to store time. I can think about this for hours, but my intuition goes towards using the same format as Date.now() because it is a very small format and is easy to read.\n\nIt is the amount of ms since 1970.\n\nI could argue to store it in seconds since 1970 since there are few applications of doing ms, but maybe we do, and it's just 30% bigger. No problem.\n\nTherefore, let's store all time values in the format Date.now()",
                      "type": "number"
                    }
                  },
                  {
                    "name": "deletedAt",
                    "required": true,
                    "schema": {
                      "fullComment": "Time\n\nTime can be stored in various ways but in my experience it is, again, best to keep it simple and just have one way to store time. I can think about this for hours, but my intuition goes towards using the same format as Date.now() because it is a very small format and is easy to read.\n\nIt is the amount of ms since 1970.\n\nI could argue to store it in seconds since 1970 since there are few applications of doing ms, but maybe we do, and it's just 30% bigger. No problem.\n\nTherefore, let's store all time values in the format Date.now()",
                      "type": "number"
                    }
                  },
                  {
                    "name": "createdFirstAt",
                    "required": true,
                    "schema": {
                      "fullComment": "in some cases, data can be created before it was created in our system. In this case, use CreatedFirstAt if this information is important.\n\nTime\n\nTime can be stored in various ways but in my experience it is, again, best to keep it simple and just have one way to store time. I can think about this for hours, but my intuition goes towards using the same format as Date.now() because it is a very small format and is easy to read.\n\nIt is the amount of ms since 1970.\n\nI could argue to store it in seconds since 1970 since there are few applications of doing ms, but maybe we do, and it's just 30% bigger. No problem.\n\nTherefore, let's store all time values in the format Date.now()",
                      "type": "number"
                    }
                  },
                  {
                    "name": "operationName",
                    "required": true,
                    "schema": {
                      "fullComment": "name of operation the model belongs to\n\n- calculated value (not stored in database)\n- can be `null` or an actual operationName that it was saved at\n- can be `undefined` when you are creating an item, because then it can be set for you",
                      "type": "null"
                    }
                  },
                  {
                    "name": "projectRelativePath",
                    "required": true,
                    "schema": {
                      "fullComment": "path to dbfile\n\n- calculated value (not stored in database)\n- relatively from the project (without slash at start)\n- can be `undefined` when you are creating an item, because then it can be set for you",
                      "type": "string"
                    }
                  },
                  {
                    "name": "operationRelativePath",
                    "required": false,
                    "schema": {
                      "fullComment": "path to db file\n\n- relatively from the operation root folder (without slash at start)\n- calculated value (not stored in database)\n- can be `undefined` if the db file does not belong to an operation\n- can be `undefined` when you are creating an item, because then it can be set for you",
                      "type": "string"
                    }
                  },
                  {
                    "name": "id",
                    "required": true,
                    "schema": {
                      "fullComment": "Should be an unique string By default, you can use `generateId()` to generate a random string of 16 characters. If you wish, you can also use any other string, as long as you are sure it's unique.\n\n# Background Info\n\nazAZ09 characters are easy to copy and provide 62 characters. the goal of an id is to be unique.\n\nthe advantage of a random id compared to an numeric id starting with 1 with auto increment is that you can set them up decentralised.\n\nthe change of duplicate ids gets bigger once you make them shorter the change of finding an existing id gets bigger once you make them shorter\n\nAn Id with 12 characters would provide 3.22e21 combinations.\n\nWhat is the change of duplicate ids? This depends on the amount of identifyable items in the data What is the change of guessing an id? This depends on speed of a brute force attack and the amount of available datapoints. If you can guess 10000 times per second, you can make 864.000.000 guesses. A billion guesses on a dataset of a billion datapoints yields 3226 correct ids on average.\n\nWhy make an id short? I don't know if there's an important reason.\n\nAll in all, I think we should make ids 24 characters by default. This would make it very easy to store, yet, with more than E42 combinations, make it nearly impossible to get duplication or brute force hits.\n\nAn id would look like this:\n\n``` { \"id\": \"sk2EcW9AkZpksk2EcW9AkZpk\" } ```\n\nLooks good to me! Don't think about it and just keep it simple. We can always migrate later to a bigger amount, but I don't see good reason to keep it smaller than this.",
                      "type": "string"
                    }
                  },
                  {
                    "name": "categoryStack",
                    "required": false,
                    "schema": {
                      "fullComment": "In case of jsonSingle storageMethod, the categoryStack is generated by the location of the file in the db model folder in the db folder.\n\nNB: Changing this value when updating/upserting, changes where the item is located!\n\nTaken from the location in the folder of the db-model.\n\nNB: Changing this value when updating/upserting, changes where the item is located!",
                      "nb": "Changing this value when updating/upserting, changes where the item is located!",
                      "items": [
                        {
                          "schema": {
                            "type": "string"
                          },
                          "name": null
                        }
                      ],
                      "type": "array"
                    }
                  },
                  {
                    "name": "customisableBundleConfig",
                    "required": true,
                    "schema": {
                      "fullComment": "CustomisableBundleConfig is customisable for individual bundle creations\n\nNB: This is NOT copied into the bundle itself\n\nconfiguration that can be applied when generating a new bundle\n\nIt can be put in the BundleConfig, but it can also be set manually for an individual Bundle Generation.",
                      "nb": "This is NOT copied into the bundle itself",
                      "properties": [
                        {
                          "name": "isOffline",
                          "required": false,
                          "schema": {
                            "fullComment": "if true, will not clone/pull/push and deploy. No internet is needed, will also not use any `.git` folder.",
                            "type": "boolean"
                          }
                        },
                        {
                          "name": "skipPull",
                          "required": false,
                          "schema": {
                            "fullComment": "skips the step where it gets the new stuff from github",
                            "type": "boolean"
                          }
                        },
                        {
                          "name": "skipPush",
                          "required": false,
                          "schema": {
                            "fullComment": "skips the step where it pushes the new bundle to remote",
                            "type": "boolean"
                          }
                        },
                        {
                          "name": "skipSyncNicheFolder",
                          "required": false,
                          "schema": {
                            "type": "boolean"
                          }
                        },
                        {
                          "name": "skipRebuildNicheOperations",
                          "required": false,
                          "schema": {
                            "type": "boolean"
                          }
                        },
                        {
                          "name": "skipUpsert",
                          "required": false,
                          "schema": {
                            "fullComment": "skips the step where it saves to the db",
                            "type": "boolean"
                          }
                        },
                        {
                          "name": "debug",
                          "required": false,
                          "schema": {
                            "type": "boolean"
                          }
                        },
                        {
                          "name": "description",
                          "required": false,
                          "schema": {
                            "fullComment": "descriptioin for git commit, if pushing. Default is \"monorepo update\"",
                            "type": "string"
                          }
                        },
                        {
                          "name": "branchName",
                          "required": false,
                          "schema": {
                            "fullComment": "optionally, specify a custom branch name to pull from / push to / checkout (default is \"main\")",
                            "type": "string"
                          }
                        },
                        {
                          "name": "publicEnvironmentVariables",
                          "required": false,
                          "schema": {
                            "fullComment": "",
                            "properties": [],
                            "type": "object"
                          }
                        },
                        {
                          "name": "privateEnvironmentVariables",
                          "required": false,
                          "schema": {
                            "fullComment": "NB: should not end up in public repos!\n\n",
                            "nb": "should not end up in public repos!",
                            "properties": [],
                            "type": "object"
                          }
                        },
                        {
                          "name": "gitUserEmail",
                          "required": false,
                          "schema": {
                            "fullComment": "Configuration for your commit (needed for vercel deployment)",
                            "type": "string"
                          }
                        },
                        {
                          "name": "gitUserName",
                          "required": false,
                          "schema": {
                            "type": "string"
                          }
                        }
                      ],
                      "type": "object"
                    }
                  },
                  {
                    "name": "createBundleConfig",
                    "required": true,
                    "schema": {
                      "fullComment": "Config needed for creating the bundle, not for the bundle itself\n\nNB: NOT Copied to the bundle itself\n\n",
                      "nb": "NOT Copied to the bundle itself",
                      "properties": [
                        {
                          "name": "inheritFrom_bundleConfigSlugs",
                          "required": false,
                          "schema": {
                            "fullComment": "You can specify `Slug`s of other `BundleConfig`s here that this bundle should inherit from, recursively.\n\nWorks a little like https://www.typescriptlang.org/tsconfig#extends\n\nWill only inherit the apps, packages, and modules, nothing else.\n\n# How it works\n\n1) finds all unique `BundleConfig`s that need to be inherited, recursively, 2) make a `BundleSummary` of every `BundleConfig` 3) merge the `BundleSummary`s and omit duplicates\n\nTODO: Implement this",
                            "todo": "Implement this",
                            "items": [
                              {
                                "schema": {
                                  "fullComment": "use this for any identifier that's not an Id-type. Usually this is a kebab-case version of a written text, but it can also be a file path, for example.",
                                  "type": "string"
                                },
                                "name": "Slug"
                              }
                            ],
                            "type": "array"
                          }
                        },
                        {
                          "name": "keepStructure",
                          "required": false,
                          "schema": {
                            "fullComment": "If true, the structure of operation locations is kept the same but still inside packages/apps/modules.",
                            "type": "boolean"
                          }
                        },
                        {
                          "name": "keepCodestories",
                          "required": false,
                          "schema": {
                            "type": "boolean"
                          }
                        },
                        {
                          "name": "informationStrategy",
                          "required": false,
                          "schema": {
                            "enum": [
                              "ignore",
                              "push",
                              "pullReplace",
                              "pullMerge"
                            ],
                            "fullComment": "Default information strategy\n\npush (default): take needed information from project and push to bundle (removing the existing info)\n\npullReplace: pull bundle and keep its information intact, not taking anything new from the OS, replacing all the information we had from these models in the OS\n\npullMerge: pull bundle and use its information in conjunction with the information we had in the OS. This option will merge both information sources, removing duplicate IDs\n\nignore: don't put any data in the bundle!",
                            "type": "string"
                          }
                        },
                        {
                          "name": "modelInformationStrategy",
                          "required": false,
                          "schema": {
                            "fullComment": "Information strategy per model\n\nFor example, this would ensure your diaries are not copied over to the bundle:\n\n```json { \"Diary\": \"ignore\" } ```\n\nIf you want to be certain something isn't included, instead of putting it into the model specific information strategy, you can also just put it in an operation that isn't required in the bundle.\n\nThis parameter is especially useful if you want to change a information stategy for one model in specific.",
                            "properties": [],
                            "type": "object"
                          }
                        },
                        {
                          "name": "additional_datasetSlugs",
                          "required": false,
                          "schema": {
                            "fullComment": "After applying the `informationStrategy`, and `modelInformationStrategy`, these datasets will be added or overwriting the data",
                            "items": [
                              {
                                "schema": {
                                  "fullComment": "use this for any identifier that's not an Id-type. Usually this is a kebab-case version of a written text, but it can also be a file path, for example.",
                                  "type": "string"
                                },
                                "name": "Slug"
                              }
                            ],
                            "type": "array"
                          }
                        },
                        {
                          "name": "filter_datasetSlugs",
                          "required": false,
                          "schema": {
                            "fullComment": "After applying the `informationStrategy`, and `modelInformationStrategy`, these datasets will be found in the then available data in the bundle, and will be filtered out.",
                            "items": [
                              {
                                "schema": {
                                  "fullComment": "use this for any identifier that's not an Id-type. Usually this is a kebab-case version of a written text, but it can also be a file path, for example.",
                                  "type": "string"
                                },
                                "name": "Slug"
                              }
                            ],
                            "type": "array"
                          }
                        },
                        {
                          "name": "isDraft",
                          "required": false,
                          "schema": {
                            "fullComment": "If true, this bundleconfig will be skipped when using `generateAllBundles`",
                            "type": "boolean"
                          }
                        },
                        {
                          "name": "keepTodos",
                          "required": false,
                          "schema": {
                            "fullComment": "if true, todos are also copied into their original location, which is in `packages` if it's not in an operation, or in the operation in any of the folders if it's an operation.\n\nThe markdown-reader will then add them to a todo menu.\n\nNB: Only works in conjunction with `keepStructure`",
                            "nb": "Only works in conjunction with `keepStructure`",
                            "type": "boolean"
                          }
                        },
                        {
                          "name": "bundles",
                          "required": true,
                          "schema": {
                            "items": [
                              {
                                "schema": {
                                  "fullComment": "This type can specify a frontend and backend that belong to each other. it doesn't include all operations that the ui or server are dependent on, they are calculated separately",
                                  "properties": [
                                    {
                                      "name": "slug",
                                      "required": true,
                                      "schema": {
                                        "fullComment": "kebab-case of the name, should be unique\n\nuse this for any identifier that's not an Id-type. Usually this is a kebab-case version of a written text, but it can also be a file path, for example.",
                                        "type": "string"
                                      }
                                    },
                                    {
                                      "name": "name",
                                      "required": true,
                                      "schema": {
                                        "type": "string"
                                      }
                                    },
                                    {
                                      "name": "language",
                                      "required": true,
                                      "schema": {
                                        "enum": [
                                          "english",
                                          "dutch",
                                          "nepali",
                                          "portuguese",
                                          "brazilian",
                                          "german",
                                          "french",
                                          "spanish",
                                          "italian",
                                          "norwegian",
                                          "swedish",
                                          "danish",
                                          "vietnamese",
                                          "indonesian",
                                          "southAfrican",
                                          "tokiPona",
                                          "hindi",
                                          "mandarin",
                                          "arabic",
                                          "bengali",
                                          "urdu",
                                          "japanese",
                                          "swahili"
                                        ],
                                        "fullComment": "all currently supported languages",
                                        "type": "string"
                                      }
                                    },
                                    {
                                      "name": "createdAt",
                                      "required": true,
                                      "schema": {
                                        "fullComment": "Time\n\nTime can be stored in various ways but in my experience it is, again, best to keep it simple and just have one way to store time. I can think about this for hours, but my intuition goes towards using the same format as Date.now() because it is a very small format and is easy to read.\n\nIt is the amount of ms since 1970.\n\nI could argue to store it in seconds since 1970 since there are few applications of doing ms, but maybe we do, and it's just 30% bigger. No problem.\n\nTherefore, let's store all time values in the format Date.now()",
                                        "type": "number"
                                      }
                                    },
                                    {
                                      "name": "updatedAt",
                                      "required": true,
                                      "schema": {
                                        "fullComment": "Time\n\nTime can be stored in various ways but in my experience it is, again, best to keep it simple and just have one way to store time. I can think about this for hours, but my intuition goes towards using the same format as Date.now() because it is a very small format and is easy to read.\n\nIt is the amount of ms since 1970.\n\nI could argue to store it in seconds since 1970 since there are few applications of doing ms, but maybe we do, and it's just 30% bigger. No problem.\n\nTherefore, let's store all time values in the format Date.now()",
                                        "type": "number"
                                      }
                                    },
                                    {
                                      "name": "deletedAt",
                                      "required": true,
                                      "schema": {
                                        "fullComment": "Time\n\nTime can be stored in various ways but in my experience it is, again, best to keep it simple and just have one way to store time. I can think about this for hours, but my intuition goes towards using the same format as Date.now() because it is a very small format and is easy to read.\n\nIt is the amount of ms since 1970.\n\nI could argue to store it in seconds since 1970 since there are few applications of doing ms, but maybe we do, and it's just 30% bigger. No problem.\n\nTherefore, let's store all time values in the format Date.now()",
                                        "type": "number"
                                      }
                                    },
                                    {
                                      "name": "createdFirstAt",
                                      "required": true,
                                      "schema": {
                                        "fullComment": "in some cases, data can be created before it was created in our system. In this case, use CreatedFirstAt if this information is important.\n\nTime\n\nTime can be stored in various ways but in my experience it is, again, best to keep it simple and just have one way to store time. I can think about this for hours, but my intuition goes towards using the same format as Date.now() because it is a very small format and is easy to read.\n\nIt is the amount of ms since 1970.\n\nI could argue to store it in seconds since 1970 since there are few applications of doing ms, but maybe we do, and it's just 30% bigger. No problem.\n\nTherefore, let's store all time values in the format Date.now()",
                                        "type": "number"
                                      }
                                    },
                                    {
                                      "name": "operationName",
                                      "required": true,
                                      "schema": {
                                        "fullComment": "name of operation the model belongs to\n\n- calculated value (not stored in database)\n- can be `null` or an actual operationName that it was saved at\n- can be `undefined` when you are creating an item, because then it can be set for you",
                                        "type": "null"
                                      }
                                    },
                                    {
                                      "name": "projectRelativePath",
                                      "required": true,
                                      "schema": {
                                        "fullComment": "path to dbfile\n\n- calculated value (not stored in database)\n- relatively from the project (without slash at start)\n- can be `undefined` when you are creating an item, because then it can be set for you",
                                        "type": "string"
                                      }
                                    },
                                    {
                                      "name": "operationRelativePath",
                                      "required": false,
                                      "schema": {
                                        "fullComment": "path to db file\n\n- relatively from the operation root folder (without slash at start)\n- calculated value (not stored in database)\n- can be `undefined` if the db file does not belong to an operation\n- can be `undefined` when you are creating an item, because then it can be set for you",
                                        "type": "string"
                                      }
                                    },
                                    {
                                      "name": "id",
                                      "required": true,
                                      "schema": {
                                        "fullComment": "Should be an unique string By default, you can use `generateId()` to generate a random string of 16 characters. If you wish, you can also use any other string, as long as you are sure it's unique.\n\n# Background Info\n\nazAZ09 characters are easy to copy and provide 62 characters. the goal of an id is to be unique.\n\nthe advantage of a random id compared to an numeric id starting with 1 with auto increment is that you can set them up decentralised.\n\nthe change of duplicate ids gets bigger once you make them shorter the change of finding an existing id gets bigger once you make them shorter\n\nAn Id with 12 characters would provide 3.22e21 combinations.\n\nWhat is the change of duplicate ids? This depends on the amount of identifyable items in the data What is the change of guessing an id? This depends on speed of a brute force attack and the amount of available datapoints. If you can guess 10000 times per second, you can make 864.000.000 guesses. A billion guesses on a dataset of a billion datapoints yields 3226 correct ids on average.\n\nWhy make an id short? I don't know if there's an important reason.\n\nAll in all, I think we should make ids 24 characters by default. This would make it very easy to store, yet, with more than E42 combinations, make it nearly impossible to get duplication or brute force hits.\n\nAn id would look like this:\n\n``` { \"id\": \"sk2EcW9AkZpksk2EcW9AkZpk\" } ```\n\nLooks good to me! Don't think about it and just keep it simple. We can always migrate later to a bigger amount, but I don't see good reason to keep it smaller than this.",
                                        "type": "string"
                                      }
                                    },
                                    {
                                      "name": "categoryStackCalculated",
                                      "required": false,
                                      "schema": {
                                        "fullComment": "In case of jsonSingle storageMethod, the categoryStack is generated by the location of the file in the db model folder in the db folder.\n\nNB: Changing this value when updating/upserting, changes where the item is located!\n\nTaken from the location in the folder of the db-model.\n\nNB: Changing this value when updating/upserting, changes where the item is located!",
                                        "nb": "Changing this value when updating/upserting, changes where the item is located!",
                                        "items": [
                                          {
                                            "schema": {
                                              "type": "string"
                                            },
                                            "name": null
                                          }
                                        ],
                                        "type": "array"
                                      }
                                    },
                                    {
                                      "name": "operations",
                                      "required": false,
                                      "schema": {
                                        "fullComment": "any operation names that are not necesarily dependencies of the named front-back bundle but still need to be available.",
                                        "items": [
                                          {
                                            "schema": {
                                              "fullComment": "",
                                              "properties": [
                                                {
                                                  "name": "operationName",
                                                  "required": true,
                                                  "schema": {
                                                    "type": "string"
                                                  }
                                                },
                                                {
                                                  "name": "privacy",
                                                  "required": true,
                                                  "schema": {
                                                    "enum": [
                                                      "public",
                                                      "private"
                                                    ],
                                                    "fullComment": "if public, everything will be kept\n\nif private, src and todo will be removed from bundle, unless it's a ui-es6 operation, because src is needed then. In that case, only \"todo\" will be deleted.",
                                                    "type": "string"
                                                  }
                                                }
                                              ],
                                              "type": "object"
                                            },
                                            "name": "OperationPrivacy"
                                          }
                                        ],
                                        "type": "array"
                                      }
                                    },
                                    {
                                      "name": "uiOperationName",
                                      "required": false,
                                      "schema": {
                                        "fullComment": "(optional) main shared ui package of the frontend",
                                        "type": "string"
                                      }
                                    },
                                    {
                                      "name": "appShellOperationNames",
                                      "required": false,
                                      "schema": {
                                        "fullComment": "which app shell(s) or app operations are there for the frontend?",
                                        "items": [
                                          {
                                            "schema": {
                                              "type": "string"
                                            },
                                            "name": null
                                          }
                                        ],
                                        "type": "array"
                                      }
                                    },
                                    {
                                      "name": "serverOperationName",
                                      "required": false,
                                      "schema": {
                                        "fullComment": "operation name for server, if this UI is connected to one",
                                        "type": "string"
                                      }
                                    },
                                    {
                                      "name": "productionWebUrl",
                                      "required": false,
                                      "schema": {
                                        "fullComment": "if there is a ui and it has a web-shell, and it is deployed somewhere into production, add the deployed domain here.",
                                        "type": "string"
                                      }
                                    },
                                    {
                                      "name": "productionApiUrl",
                                      "required": false,
                                      "schema": {
                                        "fullComment": "if there is one, it should be specified here (without trailing slash)",
                                        "type": "string"
                                      }
                                    },
                                    {
                                      "name": "endpointsAuthToken",
                                      "required": false,
                                      "schema": {
                                        "fullComment": "if this is provided, all endpoints require this auth token to be provided, or the endpoints do not work\n\nif you wish to have a more extensive authentication method for your endpoints, make sure to create your own auth layer",
                                        "type": "string"
                                      }
                                    }
                                  ],
                                  "type": "object"
                                },
                                "name": "FrontBackBundle"
                              }
                            ],
                            "type": "array"
                          }
                        },
                        {
                          "name": "dependencies",
                          "required": false,
                          "schema": {
                            "fullComment": "Generated, private by default. If they're already here, uses private/public setting as given.\n\nWhen generating, removes the ones that are not dependencies (of dependencies) of your standalone apps",
                            "items": [
                              {
                                "schema": {
                                  "fullComment": "",
                                  "properties": [
                                    {
                                      "name": "operationName",
                                      "required": true,
                                      "schema": {
                                        "type": "string"
                                      }
                                    },
                                    {
                                      "name": "privacy",
                                      "required": true,
                                      "schema": {
                                        "enum": [
                                          "public",
                                          "private"
                                        ],
                                        "fullComment": "if public, everything will be kept\n\nif private, src and todo will be removed from bundle, unless it's a ui-es6 operation, because src is needed then. In that case, only \"todo\" will be deleted.",
                                        "type": "string"
                                      }
                                    }
                                  ],
                                  "type": "object"
                                },
                                "name": "OperationPrivacy"
                              }
                            ],
                            "type": "array"
                          }
                        },
                        {
                          "name": "docsRelativeFolderPath",
                          "required": false,
                          "schema": {
                            "fullComment": "optional. Could also find the main file from here and use that as README.md\n\nMust be a relative path from project root. Can be multiple!",
                            "properties": [],
                            "type": "object"
                          }
                        },
                        {
                          "name": "imagesProjectRelativeFolderPaths",
                          "required": false,
                          "schema": {
                            "fullComment": "paths to image folders that should randomly be used as default headers or footers in the generated markdown.",
                            "items": [
                              {
                                "schema": {
                                  "fullComment": "later this could be known by the frontend so it will render a ui to select a folder\n\nWe need to figure out how we can know all type types in between when getting the type definition schema, not only the final type. If I'm lucky there is a way to find it as a #ref in a consistent way.",
                                  "type": "string"
                                },
                                "name": "ProjectRelativeFolderPath"
                              }
                            ],
                            "type": "array"
                          }
                        },
                        {
                          "name": "readmeRelativeFilePath",
                          "required": false,
                          "schema": {
                            "fullComment": "Optional. path to a readme file for the monorepo root.\n\nIf not given, and if you did provide a path for docs, the main docs intro file will be taken\n\nMust be a relative path from project  root\n\n",
                            "type": "string"
                          }
                        },
                        {
                          "name": "foldersFromRepo",
                          "required": false,
                          "schema": {
                            "fullComment": "if given, it will fetch these folders from the repo and paste them in the bundle whenever the bundle is generated\n\ncan be handy if you're working with someone else...\n\nShould later be deprecated and p2p operation-sync should be used",
                            "items": [
                              {
                                "schema": {
                                  "type": "string"
                                },
                                "name": null
                              }
                            ],
                            "type": "array"
                          }
                        }
                      ],
                      "type": "object"
                    }
                  },
                  {
                    "name": "paymentPlanId",
                    "required": false,
                    "schema": {
                      "type": "string"
                    }
                  }
                ],
                "type": "object"
              }
            },
            {
              "name": "destinationFolderPath",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "type": "object"
        },
        "required": true
      }
    ]
  },
  {
    "name": "copyReadmesBeforeFolderToBundle",
    "operationName": "generate-bundle",
    "parameters": [
      {
        "name": "fromPath",
        "schema": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": true
      },
      {
        "name": "destinationFolderPath",
        "schema": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": true
      },
      {
        "name": "folder",
        "schema": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": true
      }
    ]
  },
  {
    "name": "copyTodosIntoBundle",
    "operationName": "generate-bundle",
    "parameters": [
      {
        "name": "destinationFolderPath",
        "schema": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": true
      }
    ]
  },
  {
    "name": "yarnInstall",
    "operationName": "generate-bundle",
    "parameters": [
      {
        "name": "isOffline",
        "schema": {
          "type": "boolean"
        },
        "simplifiedSchema": {
          "type": "boolean"
        },
        "required": false
      },
      {
        "name": "destinationFolderPath",
        "schema": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": true
      }
    ]
  },
  {
    "name": "installNodeModules",
    "operationName": "install-node-modules",
    "parameters": [
      {
        "name": "{\n  nodeModulesFolderPath,\n}",
        "schema": {
          "type": "object",
          "properties": {
            "nodeModulesFolderPath": {
              "type": "string"
            }
          },
          "required": [
            "nodeModulesFolderPath"
          ],
          "additionalProperties": false
        },
        "simplifiedSchema": {
          "properties": [
            {
              "name": "nodeModulesFolderPath",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "type": "object"
        },
        "required": true
      }
    ]
  },
  {
    "name": "yarnInstallNewDistribution",
    "operationName": "yarn-install-new-distribution",
    "parameters": [
      {
        "name": "{\n  zipPath,\n}",
        "schema": {
          "type": "object",
          "properties": {
            "zipPath": {
              "type": "string"
            }
          },
          "required": [
            "zipPath"
          ],
          "additionalProperties": false
        },
        "simplifiedSchema": {
          "properties": [
            {
              "name": "zipPath",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "type": "object"
        },
        "required": true
      }
    ]
  },
  {
    "name": "getAllMarkdownFiles",
    "operationName": "markdown-translator",
    "parameters": [
      {
        "name": "basePath",
        "schema": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": true
      }
    ]
  },
  {
    "name": "parseMarkdownWordByWord",
    "operationName": "markdown-translator",
    "parameters": [
      {
        "name": "filePath",
        "schema": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": true
      }
    ]
  },
  {
    "name": "startTranslation",
    "operationName": "markdown-translator",
    "parameters": [
      {
        "name": "markdownPath",
        "schema": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": true
      },
      {
        "name": "keyValueWords",
        "schema": {},
        "simplifiedSchema": {
          "properties": [],
          "type": "object"
        },
        "required": true
      }
    ]
  },
  {
    "name": "unzip",
    "operationName": "unzip",
    "parameters": [
      {
        "name": "{\n  zipPath,\n  outputPath,\n}",
        "schema": {
          "type": "object",
          "properties": {
            "zipPath": {
              "type": "string"
            },
            "outputPath": {
              "type": "string",
              "description": "defaults to cwd"
            }
          },
          "required": [
            "zipPath"
          ],
          "additionalProperties": false
        },
        "simplifiedSchema": {
          "properties": [
            {
              "name": "zipPath",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "outputPath",
              "required": false,
              "schema": {
                "fullComment": "defaults to cwd",
                "type": "string"
              }
            }
          ],
          "type": "object"
        },
        "required": true
      }
    ]
  },
  {
    "name": "zip",
    "operationName": "zip",
    "parameters": [
      {
        "name": "{\n  baseFolderPath,\n  folderName,\n  zipName,\n  debug,\n  requirePassword,\n}",
        "schema": {
          "type": "object",
          "properties": {
            "baseFolderPath": {
              "type": "string"
            },
            "folderName": {
              "type": "string"
            },
            "zipName": {
              "type": "string"
            },
            "debug": {
              "type": "boolean"
            },
            "requirePassword": {
              "type": "boolean"
            }
          },
          "required": [
            "baseFolderPath",
            "folderName",
            "zipName"
          ],
          "additionalProperties": false
        },
        "simplifiedSchema": {
          "properties": [
            {
              "name": "baseFolderPath",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "folderName",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "zipName",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "debug",
              "required": false,
              "schema": {
                "type": "boolean"
              }
            },
            {
              "name": "requirePassword",
              "required": false,
              "schema": {
                "type": "boolean"
              }
            }
          ],
          "type": "object"
        },
        "required": true
      }
    ]
  },
  {
    "name": "compressConvert",
    "operationName": "ffmpeg-util",
    "parameters": [
      {
        "name": "absoluteSourceFilePath",
        "schema": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": true
      },
      {
        "name": "config",
        "schema": {
          "type": "object",
          "properties": {
            "isStatusLogged": {
              "type": "boolean"
            },
            "outputFolderPath": {
              "type": "string",
              "description": "If given, outputted file will be put in this folder"
            },
            "name": {
              "type": "string",
              "description": "If given, name will change into this"
            },
            "fps": {
              "type": "number",
              "description": "frames per second (only for targetformat mp4)"
            },
            "sizeWidthPx": {
              "type": "number",
              "description": "width pixels, will preserve same size if not given"
            },
            "aspectRatio": {
              "type": "object",
              "properties": {
                "x": {
                  "type": "number"
                },
                "y": {
                  "type": "number"
                }
              },
              "required": [
                "x",
                "y"
              ],
              "additionalProperties": false,
              "description": "if not given, will preserve ratio"
            },
            "quality": {
              "type": "number",
              "description": "quality number in range: 0-100"
            },
            "targetFormat": {
              "type": "string",
              "enum": [
                "webp",
                "png",
                "mp4",
                "mp3",
                "wav"
              ]
            },
            "is16bitWav": {
              "type": "boolean",
              "description": "If true, and targetformat is wav, will convert to 16bit wav (uses `-ar 16000 -ac 1 -codec:a pcm_s16le` as extra options)\n\nUseful for whisper.cpp"
            },
            "keepOriginal": {
              "type": "boolean",
              "description": "if true, original won't be thrown away afterwards"
            },
            "isDebug": {
              "type": "boolean"
            }
          },
          "additionalProperties": false
        },
        "simplifiedSchema": {
          "properties": [
            {
              "name": "isStatusLogged",
              "required": false,
              "schema": {
                "type": "boolean"
              }
            },
            {
              "name": "outputFolderPath",
              "required": false,
              "schema": {
                "fullComment": "If given, outputted file will be put in this folder",
                "type": "string"
              }
            },
            {
              "name": "name",
              "required": false,
              "schema": {
                "fullComment": "If given, name will change into this",
                "type": "string"
              }
            },
            {
              "name": "fps",
              "required": false,
              "schema": {
                "fullComment": "frames per second (only for targetformat mp4)",
                "type": "number"
              }
            },
            {
              "name": "sizeWidthPx",
              "required": false,
              "schema": {
                "fullComment": "width pixels, will preserve same size if not given",
                "type": "number"
              }
            },
            {
              "name": "aspectRatio",
              "required": false,
              "schema": {
                "fullComment": "if not given, will preserve ratio",
                "properties": [
                  {
                    "name": "x",
                    "required": true,
                    "schema": {
                      "type": "number"
                    }
                  },
                  {
                    "name": "y",
                    "required": true,
                    "schema": {
                      "type": "number"
                    }
                  }
                ],
                "type": "object"
              }
            },
            {
              "name": "quality",
              "required": false,
              "schema": {
                "fullComment": "quality number in range: 0-100",
                "type": "number"
              }
            },
            {
              "name": "targetFormat",
              "required": false,
              "schema": {
                "enum": [
                  "webp",
                  "png",
                  "mp4",
                  "mp3",
                  "wav"
                ],
                "type": "string"
              }
            },
            {
              "name": "is16bitWav",
              "required": false,
              "schema": {
                "fullComment": "If true, and targetformat is wav, will convert to 16bit wav (uses `-ar 16000 -ac 1 -codec:a pcm_s16le` as extra options)\n\nUseful for whisper.cpp",
                "type": "boolean"
              }
            },
            {
              "name": "keepOriginal",
              "required": false,
              "schema": {
                "fullComment": "if true, original won't be thrown away afterwards",
                "type": "boolean"
              }
            },
            {
              "name": "isDebug",
              "required": false,
              "schema": {
                "type": "boolean"
              }
            }
          ],
          "type": "object"
        },
        "required": false
      }
    ]
  },
  {
    "name": "compressImages",
    "operationName": "ffmpeg-util",
    "parameters": [
      {
        "name": "absoluteBasePath",
        "schema": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": true
      },
      {
        "name": "sizeWidthPx",
        "schema": {
          "type": "number"
        },
        "simplifiedSchema": {
          "type": "number"
        },
        "required": false
      },
      {
        "name": "quality",
        "schema": {
          "type": "number"
        },
        "simplifiedSchema": {
          "type": "number"
        },
        "required": false
      }
    ]
  },
  {
    "name": "compressMp4",
    "operationName": "ffmpeg-util",
    "parameters": [
      {
        "name": "absolutePath",
        "schema": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": true
      }
    ]
  },
  {
    "name": "convertToMp3",
    "operationName": "ffmpeg-util",
    "parameters": [
      {
        "name": "sourcePath",
        "schema": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": true
      },
      {
        "name": "destinationPath",
        "schema": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": true
      },
      {
        "name": "config",
        "schema": {
          "type": "object",
          "properties": {
            "toWav": {
              "type": "boolean"
            }
          },
          "additionalProperties": false
        },
        "simplifiedSchema": {
          "properties": [
            {
              "name": "toWav",
              "required": false,
              "schema": {
                "type": "boolean"
              }
            }
          ],
          "type": "object"
        },
        "required": false
      }
    ]
  },
  {
    "name": "convertToMp4",
    "operationName": "ffmpeg-util",
    "parameters": [
      {
        "name": "sourcePath",
        "schema": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": true
      },
      {
        "name": "destinationPath",
        "schema": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": true
      }
    ]
  },
  {
    "name": "copyReaderStaticAssets",
    "operationName": "collect-static-assets",
    "parameters": [
      {
        "name": "operationBasePath",
        "schema": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": true
      },
      {
        "name": "allWebPages",
        "schema": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/WebPage%3Cunknown%3E"
          },
          "description": "non-reader webPages will be filtered out by checking if the projectRelativeFilePath exists on pageData and has the extension .md"
        },
        "simplifiedSchema": {
          "fullComment": "non-reader webPages will be filtered out by checking if the projectRelativeFilePath exists on pageData and has the extension .md",
          "items": [],
          "type": "array"
        },
        "required": true
      }
    ]
  },
  {
    "name": "findStaticAssets",
    "operationName": "collect-static-assets",
    "parameters": [
      {
        "name": "absoluteMarkdownFilePath",
        "schema": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": true
      }
    ]
  },
  {
    "name": "docToMd",
    "operationName": "doc-to-md",
    "parameters": [
      {
        "name": "absoluteDocFilePath",
        "schema": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": true
      },
      {
        "name": "isForce",
        "schema": {
          "type": "boolean"
        },
        "simplifiedSchema": {
          "type": "boolean"
        },
        "required": false
      }
    ]
  },
  {
    "name": "docxToMd",
    "operationName": "doc-to-md",
    "parameters": [
      {
        "name": "absoluteDocxFilePath",
        "schema": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": true
      },
      {
        "name": "isForce",
        "schema": {
          "type": "boolean"
        },
        "simplifiedSchema": {
          "type": "boolean"
        },
        "required": false
      }
    ]
  },
  {
    "name": "makeCodestory",
    "operationName": "make-codestory",
    "parameters": [
      {
        "name": "absolutePath",
        "schema": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": true
      },
      {
        "name": "mappedObject",
        "schema": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/CodespanItemInfo"
          }
        },
        "simplifiedSchema": {
          "properties": [],
          "type": "object"
        },
        "required": true
      },
      {
        "name": "isDebug",
        "schema": {
          "type": "boolean"
        },
        "simplifiedSchema": {
          "type": "boolean"
        },
        "required": false
      }
    ]
  },
  {
    "name": "generateStaticSite",
    "operationName": "markdown-parsings",
    "parameters": [
      {
        "name": "{\n  projectRelativeMdFilePath,\n  singlePage,\n}",
        "schema": {
          "type": "object",
          "properties": {
            "singlePage": {
              "type": "boolean"
            },
            "projectRelativeMdFilePath": {
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "simplifiedSchema": {
          "properties": [
            {
              "name": "singlePage",
              "required": false,
              "schema": {
                "type": "boolean"
              }
            },
            {
              "name": "projectRelativeMdFilePath",
              "required": false,
              "schema": {
                "type": "string"
              }
            }
          ],
          "type": "object"
        },
        "required": true
      }
    ]
  },
  {
    "name": "getMarkdownContents",
    "operationName": "markdown-parsings",
    "parameters": [
      {
        "name": "absoluteFolderPath",
        "schema": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": true
      }
    ]
  },
  {
    "name": "getPublicMarkdownNestedPathObject",
    "operationName": "markdown-parsings",
    "parameters": [
      {
        "name": "absoluteFolderPath",
        "schema": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": true
      }
    ]
  },
  {
    "name": "markdownToSayable",
    "operationName": "markdown-parsings",
    "parameters": [
      {
        "name": "{\n  markdown,\n  markdownFilePath,\n}",
        "schema": {
          "type": "object",
          "properties": {
            "markdownFilePath": {
              "type": "string"
            },
            "markdown": {
              "$ref": "#/definitions/MarkdownParse"
            }
          },
          "required": [
            "markdownFilePath",
            "markdown"
          ],
          "additionalProperties": false
        },
        "simplifiedSchema": {
          "properties": [
            {
              "name": "markdownFilePath",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "markdown",
              "required": true,
              "schema": {
                "fullComment": "",
                "properties": [
                  {
                    "name": "fileName",
                    "required": false,
                    "schema": {
                      "fullComment": "if available, this can be the filename of the markdown in this markdown-parse. Can be used for things like merging",
                      "type": "string"
                    }
                  },
                  {
                    "name": "createdAt",
                    "required": false,
                    "schema": {
                      "type": "number"
                    }
                  },
                  {
                    "name": "openedAt",
                    "required": false,
                    "schema": {
                      "type": "number"
                    }
                  },
                  {
                    "name": "updatedAt",
                    "required": false,
                    "schema": {
                      "type": "number"
                    }
                  },
                  {
                    "name": "deletedAt",
                    "required": false,
                    "schema": {
                      "type": "number"
                    }
                  },
                  {
                    "name": "createdFirstAt",
                    "required": false,
                    "schema": {
                      "type": "number"
                    }
                  },
                  {
                    "name": "parameters",
                    "required": true,
                    "schema": {
                      "fullComment": "parameters found in frontmatter\n\nOur version of frontmatter is a bit simpler than regular frontmatter\n\nNot sure if this is a good idea, but it keeps it simple for our OS\n\nall values parse in a similar way to csv\n\nmake sure that you use quotes if you want to store a string with commas, because commas in a parameter indicate that it is a string array\n\nNB: string arrays are comma separated values, where you can put values with special characters in between quotes",
                      "nb": "string arrays are comma separated values, where you can put values with special characters in between quotes",
                      "properties": [],
                      "type": "object"
                    }
                  },
                  {
                    "name": "content",
                    "required": false,
                    "schema": {
                      "fullComment": "structured content based on h1, h2, h3, etc (paragraphs, recursive)",
                      "items": [
                        {
                          "schema": {
                            "fullComment": "",
                            "properties": [
                              {
                                "name": "level",
                                "required": true,
                                "schema": {
                                  "fullComment": "0 is a paragraph 1-6 is h1 until h6",
                                  "type": "number"
                                }
                              },
                              {
                                "name": "content",
                                "required": false,
                                "schema": {
                                  "type": "string"
                                }
                              },
                              {
                                "name": "markdownEmbed",
                                "required": false,
                                "schema": {
                                  "fullComment": "Anything in the format `![alt](src)`\n\nNB: I need to be very clear how this one works",
                                  "nb": "I need to be very clear how this one works",
                                  "properties": [
                                    {
                                      "name": "alt",
                                      "required": true,
                                      "schema": {
                                        "type": "string"
                                      }
                                    },
                                    {
                                      "name": "src",
                                      "required": true,
                                      "schema": {
                                        "type": "string"
                                      }
                                    },
                                    {
                                      "name": "type",
                                      "required": true,
                                      "schema": {
                                        "enum": [
                                          "video",
                                          "audio",
                                          "image",
                                          "text",
                                          "other"
                                        ],
                                        "fullComment": "Possible Asset Types\n\nLater, maybe also support: \"markdown\",\"json\",\"typescript\"",
                                        "type": "string"
                                      }
                                    }
                                  ],
                                  "type": "object"
                                }
                              },
                              {
                                "name": "markdownLink",
                                "required": false,
                                "schema": {
                                  "fullComment": "Anything in the format `[alt](href)`\n\nIt needs to be clear how this works. There is a convention for this, and I should implement that as good as possible, and document it here",
                                  "properties": [
                                    {
                                      "name": "alt",
                                      "required": true,
                                      "schema": {
                                        "type": "string"
                                      }
                                    },
                                    {
                                      "name": "href",
                                      "required": true,
                                      "schema": {
                                        "type": "string"
                                      }
                                    },
                                    {
                                      "name": "type",
                                      "required": true,
                                      "schema": {
                                        "enum": [
                                          "video",
                                          "audio",
                                          "image",
                                          "text",
                                          "other"
                                        ],
                                        "fullComment": "Can be inferred from href\n\nPossible Asset Types\n\nLater, maybe also support: \"markdown\",\"json\",\"typescript\"",
                                        "type": "string"
                                      }
                                    }
                                  ],
                                  "type": "object"
                                }
                              },
                              {
                                "name": "title",
                                "required": false,
                                "schema": {
                                  "fullComment": "NB: title can also be an empty string (\"\")",
                                  "nb": "title can also be an empty string (\"\")",
                                  "type": "string"
                                }
                              },
                              {
                                "name": "children",
                                "required": false,
                                "schema": {
                                  "fullComment": "all content until the next title. it's either a content array if there's any titles found, or a string[] if it's paragraphs",
                                  "items": [
                                    {
                                      "schema": {
                                        "circularRefName": "MarkdownChunk",
                                        "properties": [],
                                        "type": "object"
                                      },
                                      "name": "MarkdownChunk"
                                    }
                                  ],
                                  "type": "array"
                                }
                              }
                            ],
                            "type": "object"
                          },
                          "name": "MarkdownChunk"
                        }
                      ],
                      "type": "array"
                    }
                  },
                  {
                    "name": "raw",
                    "required": true,
                    "schema": {
                      "fullComment": "raw markdown without frontmatter",
                      "type": "string"
                    }
                  }
                ],
                "type": "object"
              }
            }
          ],
          "type": "object"
        },
        "required": true
      }
    ]
  },
  {
    "name": "mdToPdf",
    "operationName": "markdown-parsings",
    "parameters": [
      {
        "name": "{\n  absoluteFilePath,\n  markdown,\n  markdownParse,\n  pdfAbsoluteFilePath,\n}",
        "schema": {
          "type": "object",
          "properties": {
            "absoluteFilePath": {
              "type": "string"
            },
            "markdown": {
              "type": "string"
            },
            "markdownParse": {
              "$ref": "#/definitions/MarkdownParse"
            },
            "pdfAbsoluteFilePath": {
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "simplifiedSchema": {
          "properties": [
            {
              "name": "absoluteFilePath",
              "required": false,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "markdown",
              "required": false,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "markdownParse",
              "required": false,
              "schema": {
                "fullComment": "",
                "properties": [
                  {
                    "name": "fileName",
                    "required": false,
                    "schema": {
                      "fullComment": "if available, this can be the filename of the markdown in this markdown-parse. Can be used for things like merging",
                      "type": "string"
                    }
                  },
                  {
                    "name": "createdAt",
                    "required": false,
                    "schema": {
                      "type": "number"
                    }
                  },
                  {
                    "name": "openedAt",
                    "required": false,
                    "schema": {
                      "type": "number"
                    }
                  },
                  {
                    "name": "updatedAt",
                    "required": false,
                    "schema": {
                      "type": "number"
                    }
                  },
                  {
                    "name": "deletedAt",
                    "required": false,
                    "schema": {
                      "type": "number"
                    }
                  },
                  {
                    "name": "createdFirstAt",
                    "required": false,
                    "schema": {
                      "type": "number"
                    }
                  },
                  {
                    "name": "parameters",
                    "required": true,
                    "schema": {
                      "fullComment": "parameters found in frontmatter\n\nOur version of frontmatter is a bit simpler than regular frontmatter\n\nNot sure if this is a good idea, but it keeps it simple for our OS\n\nall values parse in a similar way to csv\n\nmake sure that you use quotes if you want to store a string with commas, because commas in a parameter indicate that it is a string array\n\nNB: string arrays are comma separated values, where you can put values with special characters in between quotes",
                      "nb": "string arrays are comma separated values, where you can put values with special characters in between quotes",
                      "properties": [],
                      "type": "object"
                    }
                  },
                  {
                    "name": "content",
                    "required": false,
                    "schema": {
                      "fullComment": "structured content based on h1, h2, h3, etc (paragraphs, recursive)",
                      "items": [
                        {
                          "schema": {
                            "fullComment": "",
                            "properties": [
                              {
                                "name": "level",
                                "required": true,
                                "schema": {
                                  "fullComment": "0 is a paragraph 1-6 is h1 until h6",
                                  "type": "number"
                                }
                              },
                              {
                                "name": "content",
                                "required": false,
                                "schema": {
                                  "type": "string"
                                }
                              },
                              {
                                "name": "markdownEmbed",
                                "required": false,
                                "schema": {
                                  "fullComment": "Anything in the format `![alt](src)`\n\nNB: I need to be very clear how this one works",
                                  "nb": "I need to be very clear how this one works",
                                  "properties": [
                                    {
                                      "name": "alt",
                                      "required": true,
                                      "schema": {
                                        "type": "string"
                                      }
                                    },
                                    {
                                      "name": "src",
                                      "required": true,
                                      "schema": {
                                        "type": "string"
                                      }
                                    },
                                    {
                                      "name": "type",
                                      "required": true,
                                      "schema": {
                                        "enum": [
                                          "video",
                                          "audio",
                                          "image",
                                          "text",
                                          "other"
                                        ],
                                        "fullComment": "Possible Asset Types\n\nLater, maybe also support: \"markdown\",\"json\",\"typescript\"",
                                        "type": "string"
                                      }
                                    }
                                  ],
                                  "type": "object"
                                }
                              },
                              {
                                "name": "markdownLink",
                                "required": false,
                                "schema": {
                                  "fullComment": "Anything in the format `[alt](href)`\n\nIt needs to be clear how this works. There is a convention for this, and I should implement that as good as possible, and document it here",
                                  "properties": [
                                    {
                                      "name": "alt",
                                      "required": true,
                                      "schema": {
                                        "type": "string"
                                      }
                                    },
                                    {
                                      "name": "href",
                                      "required": true,
                                      "schema": {
                                        "type": "string"
                                      }
                                    },
                                    {
                                      "name": "type",
                                      "required": true,
                                      "schema": {
                                        "enum": [
                                          "video",
                                          "audio",
                                          "image",
                                          "text",
                                          "other"
                                        ],
                                        "fullComment": "Can be inferred from href\n\nPossible Asset Types\n\nLater, maybe also support: \"markdown\",\"json\",\"typescript\"",
                                        "type": "string"
                                      }
                                    }
                                  ],
                                  "type": "object"
                                }
                              },
                              {
                                "name": "title",
                                "required": false,
                                "schema": {
                                  "fullComment": "NB: title can also be an empty string (\"\")",
                                  "nb": "title can also be an empty string (\"\")",
                                  "type": "string"
                                }
                              },
                              {
                                "name": "children",
                                "required": false,
                                "schema": {
                                  "fullComment": "all content until the next title. it's either a content array if there's any titles found, or a string[] if it's paragraphs",
                                  "items": [
                                    {
                                      "schema": {
                                        "circularRefName": "MarkdownChunk",
                                        "properties": [],
                                        "type": "object"
                                      },
                                      "name": "MarkdownChunk"
                                    }
                                  ],
                                  "type": "array"
                                }
                              }
                            ],
                            "type": "object"
                          },
                          "name": "MarkdownChunk"
                        }
                      ],
                      "type": "array"
                    }
                  },
                  {
                    "name": "raw",
                    "required": true,
                    "schema": {
                      "fullComment": "raw markdown without frontmatter",
                      "type": "string"
                    }
                  }
                ],
                "type": "object"
              }
            },
            {
              "name": "pdfAbsoluteFilePath",
              "required": false,
              "schema": {
                "type": "string"
              }
            }
          ],
          "type": "object"
        },
        "required": true
      }
    ]
  },
  {
    "name": "print",
    "operationName": "markdown-parsings",
    "parameters": [
      {
        "name": "{ absoluteFilePath }",
        "schema": {
          "type": "object",
          "properties": {
            "absoluteFilePath": {
              "type": "string"
            }
          },
          "required": [
            "absoluteFilePath"
          ],
          "additionalProperties": false
        },
        "simplifiedSchema": {
          "properties": [
            {
              "name": "absoluteFilePath",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "type": "object"
        },
        "required": true
      }
    ]
  },
  {
    "name": "selectRandomOperation",
    "operationName": "markdown-parsings",
    "parameters": [
      {
        "name": "baseFolderPath",
        "schema": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": false
      }
    ]
  },
  {
    "name": "augmentShortMarkdown",
    "operationName": "short-markdown-parser-node",
    "parameters": [
      {
        "name": "shortMarkdown",
        "schema": {
          "$ref": "#/definitions/ShortMarkdown"
        },
        "simplifiedSchema": {
          "fullComment": "",
          "properties": [
            {
              "name": "audioWithViewsArray",
              "required": true,
              "schema": {
                "items": [
                  {
                    "schema": {
                      "fullComment": "",
                      "properties": [
                        {
                          "name": "audioPath",
                          "required": true,
                          "schema": {
                            "type": "string"
                          }
                        },
                        {
                          "name": "audioKey",
                          "required": false,
                          "schema": {
                            "fullComment": "Unique key for the audio",
                            "type": "string"
                          }
                        },
                        {
                          "name": "audioDurationMs",
                          "required": false,
                          "schema": {
                            "type": "number"
                          }
                        },
                        {
                          "name": "viewEmbeds",
                          "required": true,
                          "schema": {
                            "items": [
                              {
                                "schema": {
                                  "fullComment": "",
                                  "properties": [
                                    {
                                      "name": "audioKey",
                                      "required": false,
                                      "schema": {
                                        "fullComment": "Unique key for the belonging audio, used to find the desired audio",
                                        "type": "string"
                                      }
                                    },
                                    {
                                      "name": "title",
                                      "required": false,
                                      "schema": {
                                        "fullComment": "Either viewPath or title is required",
                                        "type": "string"
                                      }
                                    },
                                    {
                                      "name": "viewPath",
                                      "required": false,
                                      "schema": {
                                        "fullComment": "Either viewPath or title is required",
                                        "type": "string"
                                      }
                                    },
                                    {
                                      "name": "spokenText",
                                      "required": false,
                                      "schema": {
                                        "fullComment": "Text in the alt of the image or video, but only if the alt is wrapped in quotes (e.g. \"your spoken text\"). Can be parsed into an audio and subtitles, and also a duration.",
                                        "type": "string"
                                      }
                                    },
                                    {
                                      "name": "durationMs",
                                      "required": false,
                                      "schema": {
                                        "fullComment": "Added afterwards",
                                        "type": "number"
                                      }
                                    }
                                  ],
                                  "type": "object"
                                },
                                "name": "ViewEmbed"
                              }
                            ],
                            "type": "array"
                          }
                        }
                      ],
                      "type": "object"
                    },
                    "name": "AudioWithViews"
                  }
                ],
                "type": "array"
              }
            },
            {
              "name": "backgroundMusicTrack",
              "required": false,
              "schema": {
                "fullComment": "LATER:",
                "later": "",
                "items": [
                  {
                    "schema": {
                      "fullComment": "",
                      "properties": [
                        {
                          "name": "relativeAudioFilePath",
                          "required": true,
                          "schema": {
                            "type": "string"
                          }
                        },
                        {
                          "name": "durationMs",
                          "required": false,
                          "schema": {
                            "type": "number"
                          }
                        },
                        {
                          "name": "startMs",
                          "required": false,
                          "schema": {
                            "type": "number"
                          }
                        }
                      ],
                      "type": "object"
                    },
                    "name": "AudioTrackItem"
                  }
                ],
                "type": "array"
              }
            }
          ],
          "type": "object"
        },
        "required": true
      },
      {
        "name": "projectRelativeFilePath",
        "schema": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": true
      }
    ]
  },
  {
    "name": "generateAugmentedShortMarkdown",
    "operationName": "short-markdown-parser-node",
    "parameters": [
      {
        "name": "projectRelativeMarkdownFilePath",
        "schema": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": true
      }
    ]
  },
  {
    "name": "getOrGenerateShortMarkdown",
    "operationName": "short-markdown-parser-node",
    "parameters": [
      {
        "name": "projectRelativeMarkdownFilePath",
        "schema": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": true
      }
    ]
  },
  {
    "name": "readCsvFileSync",
    "operationName": "read-csv-file",
    "parameters": [
      {
        "name": "filePath",
        "schema": {
          "$ref": "#/definitions/Path"
        },
        "simplifiedSchema": {
          "fullComment": "unlike PathLike, this is only a string\n\nFor now, we don't have a clear convention whether or not this string should be absolute or anything.",
          "type": "string"
        },
        "required": true
      }
    ]
  },
  {
    "name": "readCsvFile",
    "operationName": "read-csv-file",
    "parameters": [
      {
        "name": "filePath",
        "schema": {
          "$ref": "#/definitions/Path"
        },
        "simplifiedSchema": {
          "fullComment": "unlike PathLike, this is only a string\n\nFor now, we don't have a clear convention whether or not this string should be absolute or anything.",
          "type": "string"
        },
        "required": false
      }
    ]
  },
  {
    "name": "readRawCsvFile",
    "operationName": "read-csv-file",
    "parameters": [
      {
        "name": "filePath",
        "schema": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": true
      }
    ]
  },
  {
    "name": "readJsonFileSync",
    "operationName": "read-json-file",
    "parameters": [
      {
        "name": "filePath",
        "schema": {
          "$ref": "#/definitions/Path"
        },
        "simplifiedSchema": {
          "fullComment": "unlike PathLike, this is only a string\n\nFor now, we don't have a clear convention whether or not this string should be absolute or anything.",
          "type": "string"
        },
        "required": true
      }
    ]
  },
  {
    "name": "readJsonFile",
    "operationName": "read-json-file",
    "parameters": [
      {
        "name": "filePath",
        "schema": {
          "$ref": "#/definitions/Path"
        },
        "simplifiedSchema": {
          "fullComment": "unlike PathLike, this is only a string\n\nFor now, we don't have a clear convention whether or not this string should be absolute or anything.",
          "type": "string"
        },
        "required": false
      }
    ]
  },
  {
    "name": "readProjectRelativeJsonFile",
    "operationName": "read-json-file",
    "parameters": [
      {
        "name": "projectRelativePath",
        "schema": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": true
      }
    ]
  },
  {
    "name": "readKvmdFile",
    "operationName": "read-kvmd-file",
    "parameters": [
      {
        "name": "filePath",
        "schema": {
          "$ref": "#/definitions/Path"
        },
        "simplifiedSchema": {
          "fullComment": "unlike PathLike, this is only a string\n\nFor now, we don't have a clear convention whether or not this string should be absolute or anything.",
          "type": "string"
        },
        "required": true
      },
      {
        "name": "dbFileLocation",
        "schema": {
          "$ref": "#/definitions/DbFileLocation",
          "description": "TODO: make this optional. if not provided, calculate it ourselves here."
        },
        "simplifiedSchema": {
          "fullComment": "TODO: make this optional. if not provided, calculate it ourselves here.\n\nObject used to hand over all information about the location of a db-file in a structured way",
          "todo": "make this optional. if not provided, calculate it ourselves here.",
          "properties": [
            {
              "name": "absolutePath",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "modelName",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "operationName",
              "required": true,
              "schema": {
                "fullComment": "name of operation the model belongs to\n\n- calculated value (not stored in database)\n- can be `null` or an actual operationName that it was saved at\n- can be `undefined` when you are creating an item, because then it can be set for you",
                "type": "null"
              }
            },
            {
              "name": "projectRelativePath",
              "required": true,
              "schema": {
                "fullComment": "path to dbfile\n\n- calculated value (not stored in database)\n- relatively from the project (without slash at start)\n- can be `undefined` when you are creating an item, because then it can be set for you",
                "type": "string"
              }
            },
            {
              "name": "operationRelativePath",
              "required": false,
              "schema": {
                "fullComment": "path to db file\n\n- relatively from the operation root folder (without slash at start)\n- calculated value (not stored in database)\n- can be `undefined` if the db file does not belong to an operation\n- can be `undefined` when you are creating an item, because then it can be set for you",
                "type": "string"
              }
            }
          ],
          "type": "object"
        },
        "required": true
      }
    ]
  },
  {
    "name": "readMarkdownFileToModel",
    "operationName": "read-markdown-file",
    "parameters": [
      {
        "name": "absoluteFilePath",
        "schema": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": true
      },
      {
        "name": "webOperationName",
        "schema": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": true
      },
      {
        "name": "markdownCallToActions",
        "schema": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MarkdownCallToAction"
          },
          "description": "Only the ones that are not from this domain without path (filter based on hostname/path)"
        },
        "simplifiedSchema": {
          "fullComment": "Only the ones that are not from this domain without path (filter based on hostname/path)",
          "items": [
            {
              "schema": {
                "fullComment": "",
                "properties": [
                  {
                    "name": "slug",
                    "required": true,
                    "schema": {
                      "fullComment": "kebab-case of the name, should be unique\n\nuse this for any identifier that's not an Id-type. Usually this is a kebab-case version of a written text, but it can also be a file path, for example.",
                      "type": "string"
                    }
                  },
                  {
                    "name": "name",
                    "required": true,
                    "schema": {
                      "type": "string"
                    }
                  },
                  {
                    "name": "language",
                    "required": true,
                    "schema": {
                      "enum": [
                        "english",
                        "dutch",
                        "nepali",
                        "portuguese",
                        "brazilian",
                        "german",
                        "french",
                        "spanish",
                        "italian",
                        "norwegian",
                        "swedish",
                        "danish",
                        "vietnamese",
                        "indonesian",
                        "southAfrican",
                        "tokiPona",
                        "hindi",
                        "mandarin",
                        "arabic",
                        "bengali",
                        "urdu",
                        "japanese",
                        "swahili"
                      ],
                      "fullComment": "all currently supported languages",
                      "type": "string"
                    }
                  },
                  {
                    "name": "createdAt",
                    "required": true,
                    "schema": {
                      "fullComment": "Time\n\nTime can be stored in various ways but in my experience it is, again, best to keep it simple and just have one way to store time. I can think about this for hours, but my intuition goes towards using the same format as Date.now() because it is a very small format and is easy to read.\n\nIt is the amount of ms since 1970.\n\nI could argue to store it in seconds since 1970 since there are few applications of doing ms, but maybe we do, and it's just 30% bigger. No problem.\n\nTherefore, let's store all time values in the format Date.now()",
                      "type": "number"
                    }
                  },
                  {
                    "name": "updatedAt",
                    "required": true,
                    "schema": {
                      "fullComment": "Time\n\nTime can be stored in various ways but in my experience it is, again, best to keep it simple and just have one way to store time. I can think about this for hours, but my intuition goes towards using the same format as Date.now() because it is a very small format and is easy to read.\n\nIt is the amount of ms since 1970.\n\nI could argue to store it in seconds since 1970 since there are few applications of doing ms, but maybe we do, and it's just 30% bigger. No problem.\n\nTherefore, let's store all time values in the format Date.now()",
                      "type": "number"
                    }
                  },
                  {
                    "name": "deletedAt",
                    "required": true,
                    "schema": {
                      "fullComment": "Time\n\nTime can be stored in various ways but in my experience it is, again, best to keep it simple and just have one way to store time. I can think about this for hours, but my intuition goes towards using the same format as Date.now() because it is a very small format and is easy to read.\n\nIt is the amount of ms since 1970.\n\nI could argue to store it in seconds since 1970 since there are few applications of doing ms, but maybe we do, and it's just 30% bigger. No problem.\n\nTherefore, let's store all time values in the format Date.now()",
                      "type": "number"
                    }
                  },
                  {
                    "name": "createdFirstAt",
                    "required": true,
                    "schema": {
                      "fullComment": "in some cases, data can be created before it was created in our system. In this case, use CreatedFirstAt if this information is important.\n\nTime\n\nTime can be stored in various ways but in my experience it is, again, best to keep it simple and just have one way to store time. I can think about this for hours, but my intuition goes towards using the same format as Date.now() because it is a very small format and is easy to read.\n\nIt is the amount of ms since 1970.\n\nI could argue to store it in seconds since 1970 since there are few applications of doing ms, but maybe we do, and it's just 30% bigger. No problem.\n\nTherefore, let's store all time values in the format Date.now()",
                      "type": "number"
                    }
                  },
                  {
                    "name": "operationName",
                    "required": true,
                    "schema": {
                      "fullComment": "name of operation the model belongs to\n\n- calculated value (not stored in database)\n- can be `null` or an actual operationName that it was saved at\n- can be `undefined` when you are creating an item, because then it can be set for you",
                      "type": "null"
                    }
                  },
                  {
                    "name": "projectRelativePath",
                    "required": true,
                    "schema": {
                      "fullComment": "path to dbfile\n\n- calculated value (not stored in database)\n- relatively from the project (without slash at start)\n- can be `undefined` when you are creating an item, because then it can be set for you",
                      "type": "string"
                    }
                  },
                  {
                    "name": "operationRelativePath",
                    "required": false,
                    "schema": {
                      "fullComment": "path to db file\n\n- relatively from the operation root folder (without slash at start)\n- calculated value (not stored in database)\n- can be `undefined` if the db file does not belong to an operation\n- can be `undefined` when you are creating an item, because then it can be set for you",
                      "type": "string"
                    }
                  },
                  {
                    "name": "id",
                    "required": true,
                    "schema": {
                      "fullComment": "Should be an unique string By default, you can use `generateId()` to generate a random string of 16 characters. If you wish, you can also use any other string, as long as you are sure it's unique.\n\n# Background Info\n\nazAZ09 characters are easy to copy and provide 62 characters. the goal of an id is to be unique.\n\nthe advantage of a random id compared to an numeric id starting with 1 with auto increment is that you can set them up decentralised.\n\nthe change of duplicate ids gets bigger once you make them shorter the change of finding an existing id gets bigger once you make them shorter\n\nAn Id with 12 characters would provide 3.22e21 combinations.\n\nWhat is the change of duplicate ids? This depends on the amount of identifyable items in the data What is the change of guessing an id? This depends on speed of a brute force attack and the amount of available datapoints. If you can guess 10000 times per second, you can make 864.000.000 guesses. A billion guesses on a dataset of a billion datapoints yields 3226 correct ids on average.\n\nWhy make an id short? I don't know if there's an important reason.\n\nAll in all, I think we should make ids 24 characters by default. This would make it very easy to store, yet, with more than E42 combinations, make it nearly impossible to get duplication or brute force hits.\n\nAn id would look like this:\n\n``` { \"id\": \"sk2EcW9AkZpksk2EcW9AkZpk\" } ```\n\nLooks good to me! Don't think about it and just keep it simple. We can always migrate later to a bigger amount, but I don't see good reason to keep it smaller than this.",
                      "type": "string"
                    }
                  },
                  {
                    "name": "categoryStack",
                    "required": false,
                    "schema": {
                      "fullComment": "In case of jsonSingle storageMethod, the categoryStack is generated by the location of the file in the db model folder in the db folder.\n\nNB: Changing this value when updating/upserting, changes where the item is located!\n\nTaken from the location in the folder of the db-model.\n\nNB: Changing this value when updating/upserting, changes where the item is located!",
                      "nb": "Changing this value when updating/upserting, changes where the item is located!",
                      "items": [
                        {
                          "schema": {
                            "type": "string"
                          },
                          "name": null
                        }
                      ],
                      "type": "array"
                    }
                  },
                  {
                    "name": "path",
                    "required": false,
                    "schema": {
                      "fullComment": "DESCRIPTION: Absolute queryPath to the CTA. Leave empty for going to the homepage. Empty paths will be omitted on the domains where you are already on that domain... If there's a path, will be omitted on other domains (`MarkdownCallToAction`s with a different hostname)",
                      "description": "Absolute queryPath to the CTA. Leave empty for going to the homepage. Empty paths will be omitted on the domains where you are already on that domain... If there's a path, will be omitted on other domains (`MarkdownCallToAction`s with a different hostname)",
                      "type": "string"
                    }
                  },
                  {
                    "name": "hostname",
                    "required": true,
                    "schema": {
                      "fullComment": "DESCRIPTION: Hostname as described in `https://www.w3schools.com/js/js_window_location.asp`.",
                      "description": "Hostname as described in `https://www.w3schools.com/js/js_window_location.asp`.",
                      "type": "string"
                    }
                  },
                  {
                    "name": "title",
                    "required": false,
                    "schema": {
                      "type": "string"
                    }
                  },
                  {
                    "name": "description",
                    "required": false,
                    "schema": {
                      "fullComment": "Will be shown in markdown",
                      "type": "string"
                    }
                  },
                  {
                    "name": "ctaButtonText",
                    "required": false,
                    "schema": {
                      "fullComment": "Can have a default if not provided",
                      "type": "string"
                    }
                  },
                  {
                    "name": "onlyFooter",
                    "required": false,
                    "schema": {
                      "fullComment": "if true, CTA will only be placed in footer",
                      "type": "boolean"
                    }
                  },
                  {
                    "name": "onlyHeader",
                    "required": false,
                    "schema": {
                      "type": "boolean"
                    }
                  },
                  {
                    "name": "isMinimised",
                    "required": false,
                    "schema": {
                      "fullComment": "If true, will be rendered in a <details>, if possible.",
                      "type": "boolean"
                    }
                  },
                  {
                    "name": "bannerImage",
                    "required": false,
                    "schema": {
                      "fullComment": "Part of the asset that should be sent to the backend. The rest should frontend-only\n\nSome values are stored, some are not",
                      "properties": [
                        {
                          "name": "alt",
                          "required": false,
                          "schema": {
                            "fullComment": "Stored value\n\nAlt text for the asset",
                            "type": "string"
                          }
                        },
                        {
                          "name": "relativePath",
                          "required": false,
                          "schema": {
                            "fullComment": "Stored value\n\nRelative path, relative to the location the asset is defined in.\n\nOnly available if the asset was already processed by a backend. Before backend processing, only `temporaryDestination` is available.\n\nChanging the `relativePath` shouldn't do anything, it can only be changed by backend processing by giving a new `temporaryDestination`, or by changing the `name`.",
                            "type": "string"
                          }
                        },
                        {
                          "name": "name",
                          "required": false,
                          "schema": {
                            "fullComment": "Not stored\n\nNot given by the backend data, but can be SENT to the backend.\n\nShould not be stored, but if you change this value and send it to the backend, it should rename the file and thus the relativePath stored should change.\n\nNB: I'm not sure how to solve having multiple references to a single file. If this occurs, which is hard to prevent if allowing manual editing of data, it may be hard to prevent dead links if someone changes the name of a file that is also refered to in other places. In this case, it would be ideal if all references also would be renamed, but it may be hard to find them. Even if we solve this, it's still possible to get dead links if someone renames the file (or removes it) manually. This should be taken into account, and may not break anything!",
                            "nb": "I'm not sure how to solve having multiple references to a single file. If this occurs, which is hard to prevent if allowing manual editing of data, it may be hard to prevent dead links if someone changes the name of a file that is also refered to in other places. In this case, it would be ideal if all references also would be renamed, but it may be hard to find them. Even if we solve this, it's still possible to get dead links if someone renames the file (or removes it) manually. This should be taken into account, and may not break anything!",
                            "type": "string"
                          }
                        },
                        {
                          "name": "temporaryDestination",
                          "required": false,
                          "schema": {
                            "fullComment": "Not stored\n\nFilename after uploading in the temporary folder. should still be moved to its final location\n\nOnly available straight after uploading. After the function processes the asset, this is removed and a `relativePath` is created.",
                            "type": "string"
                          }
                        },
                        {
                          "name": "projectRelativeReferencingFilePath",
                          "required": false,
                          "schema": {
                            "fullComment": "Not stored\n\nNeeds to be there before calling `processAsset`. Should be augmented to the backendAsset in the frontend, before sending it to the backend.\n\nLocation of the place where the asset is referenced\n\n- markdown file (or folder where it is located)\n- typescript file (or folder where it is located)\n- database file (or folder where it is located)",
                            "type": "string"
                          }
                        },
                        {
                          "name": "modelName",
                          "required": false,
                          "schema": {
                            "fullComment": "Not stored\n\nNeeds to be there before calling `processAsset`. Should be augmented to the backendAsset in the frontend, before sending it to the backend.\n\nModel that the asset is related to",
                            "type": "string"
                          }
                        },
                        {
                          "name": "absoluteUrl",
                          "required": false,
                          "schema": {
                            "fullComment": "NOT STORED\n\nCan be available in case it's an asset from an external source URL for example within md.\n\nAlso can be set in case it's a static asset from a next project",
                            "type": "string"
                          }
                        }
                      ],
                      "type": "object"
                    }
                  }
                ],
                "type": "object"
              },
              "name": "MarkdownCallToAction"
            }
          ],
          "type": "array"
        },
        "required": true
      }
    ]
  },
  {
    "name": "readMarkdownFile",
    "operationName": "read-markdown-file",
    "parameters": [
      {
        "name": "filePath",
        "schema": {
          "$ref": "#/definitions/Path"
        },
        "simplifiedSchema": {
          "fullComment": "unlike PathLike, this is only a string\n\nFor now, we don't have a clear convention whether or not this string should be absolute or anything.",
          "type": "string"
        },
        "required": true
      }
    ]
  },
  {
    "name": "getFolderTypescriptIndex",
    "operationName": "read-typescript-file",
    "parameters": [
      {
        "name": "{\n  basePath,\n  filter,\n  sort,\n  type,\n  filePath,\n}",
        "schema": {
          "type": "object",
          "properties": {
            "filePath": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              ],
              "description": "if given, basePath is ignored"
            },
            "basePath": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              ],
              "description": "is ignored if filePath is provided\n\nif this path is a single path anywhere in an operaiton, it will only take that operation\n\notherwise, it will find all operation folders in that path"
            },
            "type": {
              "type": [
                "string",
                "null"
              ],
              "enum": [
                "TsBuildError",
                "TsLintWarning",
                "TsFunction",
                "TsVariable",
                "TsInterface",
                "TsComment",
                "TsImport",
                "TsExport",
                null
              ],
              "description": "if specified, only returns one specific type\n\nreturns all types by default"
            },
            "filter": {
              "$ref": "#/definitions/IndexFilter"
            },
            "sort": {
              "type": "string",
              "description": "TODO: make functions be sortable:\n- alphabetic\n- input type\n- output type\n- usage amount"
            }
          },
          "additionalProperties": false
        },
        "simplifiedSchema": {
          "properties": [
            {
              "name": "filePath",
              "required": false,
              "schema": {
                "fullComment": "if given, basePath is ignored",
                "properties": [],
                "type": "object"
              }
            },
            {
              "name": "basePath",
              "required": false,
              "schema": {
                "fullComment": "is ignored if filePath is provided\n\nif this path is a single path anywhere in an operaiton, it will only take that operation\n\notherwise, it will find all operation folders in that path",
                "properties": [],
                "type": "object"
              }
            },
            {
              "name": "type",
              "required": false,
              "schema": {
                "enum": [
                  "TsBuildError",
                  "TsLintWarning",
                  "TsFunction",
                  "TsVariable",
                  "TsInterface",
                  "TsComment",
                  "TsImport",
                  "TsExport",
                  null
                ],
                "fullComment": "if specified, only returns one specific type\n\nreturns all types by default",
                "type": "string"
              }
            },
            {
              "name": "filter",
              "required": false,
              "schema": {
                "fullComment": "",
                "properties": [
                  {
                    "name": "hasCommentTypes",
                    "required": false,
                    "schema": {
                      "fullComment": "if set, only returns comments containing specific types",
                      "items": [
                        {
                          "schema": {
                            "enum": [
                              "todo",
                              "discussion",
                              "idea",
                              "later",
                              "nb",
                              "title",
                              "section",
                              "description"
                            ],
                            "fullComment": "special line prefixes:\n\n**Developer related comments**\n\n- TODO: for developer to know what to do\n- DISCUSSION: for developer to state that discussion is needed\n- IDEA: for developer to state ideas\n- LATER: for developer to mark as thing that needs to be done later\n- NB: for developer to add a note\n\n**Form related comments**\n\n- TITLE: if available, will be used as title of form input (overwrites humanCase version of the property-name itself in that case)\n- SECTION: start a new section in the form from this point, the value behind here can be the title\n- DESCRIPTION: if available, will be used as description of the form input",
                            "type": "string"
                          },
                          "name": "CommentType"
                        }
                      ],
                      "type": "array"
                    }
                  },
                  {
                    "name": "interfaceIsDbModel",
                    "required": false,
                    "schema": {
                      "fullComment": "if true, only returns interfaces which are db models",
                      "type": "boolean"
                    }
                  }
                ],
                "type": "object"
              }
            },
            {
              "name": "sort",
              "required": false,
              "schema": {
                "fullComment": "TODO: make functions be sortable:\n- alphabetic\n- input type\n- output type\n- usage amount",
                "todo": "make functions be sortable:",
                "type": "string"
              }
            }
          ],
          "type": "object"
        },
        "required": true
      }
    ]
  },
  {
    "name": "getOperationIndexModel",
    "operationName": "read-typescript-file",
    "parameters": [
      {
        "name": "operationBasePath",
        "schema": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": true
      },
      {
        "name": "filePaths",
        "schema": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "if provided, db result will be filtered to specific filepaths"
        },
        "simplifiedSchema": {
          "fullComment": "if provided, db result will be filtered to specific filepaths",
          "items": [
            {
              "schema": {
                "type": "string"
              },
              "name": null
            }
          ],
          "type": "array"
        },
        "required": true
      }
    ]
  },
  {
    "name": "readTypescriptFile",
    "operationName": "read-typescript-file",
    "parameters": [
      {
        "name": "filePath",
        "schema": {
          "$ref": "#/definitions/Path"
        },
        "simplifiedSchema": {
          "fullComment": "unlike PathLike, this is only a string\n\nFor now, we don't have a clear convention whether or not this string should be absolute or anything.",
          "type": "string"
        },
        "required": true
      }
    ]
  },
  {
    "name": "makeSrcRelativeFolder",
    "operationName": "db-recipes",
    "parameters": [
      {
        "name": "operationRelativeTypescriptFilePath",
        "schema": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": true
      }
    ]
  },
  {
    "name": "waitForLockfile",
    "operationName": "fs-orm",
    "parameters": [
      {
        "name": "lockfilePath",
        "schema": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": true
      }
    ]
  },
  {
    "name": "getSrcRelativeFolderPath",
    "operationName": "function-functions-node",
    "parameters": [
      {
        "name": "operationRelativeSourcePath",
        "schema": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": true
      }
    ]
  },
  {
    "name": "docsGetPages",
    "operationName": "docs-get-pages",
    "parameters": [
      {
        "name": "basePaths",
        "schema": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "projectRelativeBasePath": {
                "type": "string"
              },
              "queryPath": {
                "type": "string"
              }
            },
            "required": [
              "projectRelativeBasePath",
              "queryPath"
            ],
            "additionalProperties": false
          }
        },
        "simplifiedSchema": {
          "items": [
            {
              "schema": {
                "properties": [
                  {
                    "name": "projectRelativeBasePath",
                    "required": true,
                    "schema": {
                      "type": "string"
                    }
                  },
                  {
                    "name": "queryPath",
                    "required": true,
                    "schema": {
                      "type": "string"
                    }
                  }
                ],
                "type": "object"
              },
              "name": null
            }
          ],
          "type": "array"
        },
        "required": true
      }
    ]
  },
  {
    "name": "getPublicMarkdownFilePaths",
    "operationName": "docs-get-pages",
    "parameters": [
      {
        "name": "baseFolderPath",
        "schema": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": true
      },
      {
        "name": "includeFoldersWithResults",
        "schema": {
          "type": "boolean"
        },
        "simplifiedSchema": {
          "type": "boolean"
        },
        "required": false
      }
    ]
  },
  {
    "name": "removeExtensionsFromPath",
    "operationName": "docs-get-pages",
    "parameters": [
      {
        "name": "relativePath",
        "schema": {
          "type": "string",
          "description": "should also work for filenames"
        },
        "simplifiedSchema": {
          "fullComment": "should also work for filenames",
          "type": "string"
        },
        "required": true
      }
    ]
  },
  {
    "name": "stripReadmeFromFolder",
    "operationName": "docs-get-pages",
    "parameters": [
      {
        "name": "filePath",
        "schema": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": true
      }
    ]
  },
  {
    "name": "docsGetStaticPaths",
    "operationName": "markdown-reader-functions",
    "parameters": [
      {
        "name": "context",
        "schema": {
          "$ref": "#/definitions/GetStaticPathsContext"
        },
        "simplifiedSchema": {
          "fullComment": "",
          "properties": [
            {
              "name": "locales",
              "required": false,
              "schema": {
                "items": [
                  {
                    "schema": {
                      "type": "string"
                    },
                    "name": null
                  }
                ],
                "type": "array"
              }
            },
            {
              "name": "defaultLocale",
              "required": false,
              "schema": {
                "type": "string"
              }
            }
          ],
          "type": "object"
        },
        "required": true
      },
      {
        "name": "basePaths",
        "schema": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "projectRelativeBasePath": {
                "type": "string"
              },
              "queryPath": {
                "type": "string"
              }
            },
            "required": [
              "projectRelativeBasePath",
              "queryPath"
            ],
            "additionalProperties": false
          }
        },
        "simplifiedSchema": {
          "items": [
            {
              "schema": {
                "properties": [
                  {
                    "name": "projectRelativeBasePath",
                    "required": true,
                    "schema": {
                      "type": "string"
                    }
                  },
                  {
                    "name": "queryPath",
                    "required": true,
                    "schema": {
                      "type": "string"
                    }
                  }
                ],
                "type": "object"
              },
              "name": null
            }
          ],
          "type": "array"
        },
        "required": true
      }
    ]
  },
  {
    "name": "docsGetStaticProps",
    "operationName": "markdown-reader-functions",
    "parameters": [
      {
        "name": "context",
        "schema": {
          "$ref": "#/definitions/GetStaticPropsContext"
        },
        "simplifiedSchema": {
          "fullComment": "",
          "properties": [
            {
              "name": "params",
              "required": false,
              "schema": {
                "fullComment": "",
                "properties": [],
                "type": "object"
              }
            },
            {
              "name": "preview",
              "required": false,
              "schema": {
                "type": "boolean"
              }
            },
            {
              "name": "previewData",
              "required": false,
              "schema": {
                "properties": [],
                "type": "object"
              }
            },
            {
              "name": "locale",
              "required": false,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "locales",
              "required": false,
              "schema": {
                "items": [
                  {
                    "schema": {
                      "type": "string"
                    },
                    "name": null
                  }
                ],
                "type": "array"
              }
            },
            {
              "name": "defaultLocale",
              "required": false,
              "schema": {
                "type": "string"
              }
            }
          ],
          "type": "object"
        },
        "required": true
      },
      {
        "name": "basePaths",
        "schema": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "projectRelativeBasePath": {
                "type": "string"
              },
              "queryPath": {
                "type": "string"
              }
            },
            "required": [
              "projectRelativeBasePath",
              "queryPath"
            ],
            "additionalProperties": false
          }
        },
        "simplifiedSchema": {
          "items": [
            {
              "schema": {
                "properties": [
                  {
                    "name": "projectRelativeBasePath",
                    "required": true,
                    "schema": {
                      "type": "string"
                    }
                  },
                  {
                    "name": "queryPath",
                    "required": true,
                    "schema": {
                      "type": "string"
                    }
                  }
                ],
                "type": "object"
              },
              "name": null
            }
          ],
          "type": "array"
        },
        "required": true
      },
      {
        "name": "webOperationName",
        "schema": {
          "type": "string",
          "description": "Operation of the website that is going to be deployed"
        },
        "simplifiedSchema": {
          "fullComment": "Operation of the website that is going to be deployed",
          "type": "string"
        },
        "required": true
      }
    ]
  },
  {
    "name": "getChildren",
    "operationName": "markdown-reader-functions",
    "parameters": [
      {
        "name": "webPages",
        "schema": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/WebPage%3Cany%3E"
          }
        },
        "simplifiedSchema": {
          "items": [],
          "type": "array"
        },
        "required": true
      },
      {
        "name": "queryPath",
        "schema": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": true
      }
    ]
  },
  {
    "name": "getFolderExplorationInfo",
    "operationName": "markdown-reader-functions",
    "parameters": [
      {
        "name": "webPages",
        "schema": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/WebPage%3Cany%3E"
          }
        },
        "simplifiedSchema": {
          "items": [],
          "type": "array"
        },
        "required": true
      },
      {
        "name": "queryPath",
        "schema": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": true
      },
      {
        "name": "projectRoot",
        "schema": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": true
      }
    ]
  },
  {
    "name": "getNestedPathObject",
    "operationName": "peer-functions",
    "parameters": [
      {
        "name": "baseFolderPath",
        "schema": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": true
      }
    ]
  },
  {
    "name": "setConfig",
    "operationName": "explorer-ui",
    "parameters": [
      {
        "name": "apiUrl",
        "schema": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": true
      },
      {
        "name": "disableAdmin",
        "schema": {
          "type": "boolean"
        },
        "simplifiedSchema": {
          "type": "boolean"
        },
        "required": true
      },
      {
        "name": "customCustomProjectRelativeBasePaths",
        "schema": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "TITLE: CustomProject relative base path of your file system to show"
        },
        "simplifiedSchema": {
          "fullComment": "TITLE: CustomProject relative base path of your file system to show",
          "title": "CustomProject relative base path of your file system to show",
          "items": [
            {
              "schema": {
                "type": "string"
              },
              "name": null
            }
          ],
          "type": "array"
        },
        "required": true
      }
    ]
  },
  {
    "name": "canExecuteFileFunctionWithContext",
    "operationName": "writer-functions",
    "parameters": [
      {
        "name": "functionContext",
        "schema": {
          "$ref": "#/definitions/FunctionContext"
        },
        "simplifiedSchema": {
          "fullComment": "Should be attached as first argument of the function, if the name of the function is in the format of:\n\n- `xyzWithContext`: attaches all context\n- `xyzWithContextRaw`: attaches all context, api returns just the result of the function without wrapping it in the `RealApiReturnType`. Needed in case you have a different server.js `server.reply`\n\nFor more info see `apiConvention`",
          "properties": [
            {
              "name": "tsFunction",
              "required": false,
              "schema": {
                "fullComment": "--- dbStorageMethod: jsonSingle\n---\n\nInterface for arrow functions and normal functions",
                "properties": [
                  {
                    "name": "explicitTypeName",
                    "required": false,
                    "schema": {
                      "fullComment": "If you give a function a type explicitly on its declaration, this type will be set here.",
                      "type": "string"
                    }
                  },
                  {
                    "name": "isExported",
                    "required": true,
                    "schema": {
                      "fullComment": "The function is immediately exported upon creation. If the os dev tools are being used, this means it is also exported from the operation",
                      "type": "boolean"
                    }
                  },
                  {
                    "name": "description",
                    "required": false,
                    "schema": {
                      "fullComment": "parsed comment from doc-comment\n\n",
                      "properties": [
                        {
                          "name": "fileName",
                          "required": true,
                          "schema": {
                            "type": "string"
                          }
                        },
                        {
                          "name": "params",
                          "required": true,
                          "schema": {
                            "properties": [
                              {
                                "name": "title",
                                "required": false,
                                "schema": {
                                  "type": "string"
                                }
                              },
                              {
                                "name": "author",
                                "required": false,
                                "schema": {
                                  "type": "string"
                                }
                              }
                            ],
                            "type": "object"
                          }
                        },
                        {
                          "name": "createdAt",
                          "required": true,
                          "schema": {
                            "fullComment": "",
                            "type": "number"
                          }
                        },
                        {
                          "name": "updatedAt",
                          "required": true,
                          "schema": {
                            "fullComment": "",
                            "type": "number"
                          }
                        },
                        {
                          "name": "modifiedAt",
                          "required": true,
                          "schema": {
                            "fullComment": "",
                            "type": "number"
                          }
                        },
                        {
                          "name": "openedAt",
                          "required": true,
                          "schema": {
                            "fullComment": "",
                            "type": "number"
                          }
                        },
                        {
                          "name": "content",
                          "required": true,
                          "schema": {
                            "fullComment": "",
                            "type": "string"
                          }
                        }
                      ],
                      "type": "object"
                    }
                  },
                  {
                    "name": "rawText",
                    "required": false,
                    "schema": {
                      "fullComment": "raw text of the function",
                      "type": "string"
                    }
                  },
                  {
                    "name": "commentsInside",
                    "required": true,
                    "schema": {
                      "fullComment": "all comments found in a function and the node that they belong to",
                      "items": [
                        {
                          "schema": {
                            "fullComment": "comments are basically one-or-multi-line human content inside of typescript files, so it's a very important to do something useful with them.\n\n\nThe convention should be that single-line comments should start with that. This then becomes the type of the comment. You can also put multiple prefixes at the start.\n\nExample:\n\n`// TODO: NB: this is a todo but its also important`\n\nMultiline comments can also have one or multiple types in their text, but they should not be split into multiple comments as the context could be needed some times.\n\n\n\nThere are also some other things comments can say about statements, but these should be inside the frontmatter, and are much more flexible.\n- classified[0-10] indicating level of classification. This way I can share subsets of the codebase, maybe...\n- privacy\n- ...?\n\nNB: with the current setup we can also parse `.md` files as being a TsComment, keep it that way!\n\nNB: comments are part of the code, so they should always be in English!",
                            "nb": "with the current setup we can also parse `.md` files as being a TsComment, keep it that way!",
                            "properties": [
                              {
                                "name": "operationName",
                                "required": true,
                                "schema": {
                                  "fullComment": "name of operation the model belongs to\n\n- calculated value (not stored in database)\n- can be `null` or an actual operationName that it was saved at\n- can be `undefined` when you are creating an item, because then it can be set for you",
                                  "type": "null"
                                }
                              },
                              {
                                "name": "projectRelativePath",
                                "required": true,
                                "schema": {
                                  "fullComment": "path to dbfile\n\n- calculated value (not stored in database)\n- relatively from the project (without slash at start)\n- can be `undefined` when you are creating an item, because then it can be set for you",
                                  "type": "string"
                                }
                              },
                              {
                                "name": "operationRelativePath",
                                "required": false,
                                "schema": {
                                  "fullComment": "path to db file\n\n- relatively from the operation root folder (without slash at start)\n- calculated value (not stored in database)\n- can be `undefined` if the db file does not belong to an operation\n- can be `undefined` when you are creating an item, because then it can be set for you",
                                  "type": "string"
                                }
                              },
                              {
                                "name": "id",
                                "required": true,
                                "schema": {
                                  "fullComment": "unique id of the model",
                                  "type": "string"
                                }
                              },
                              {
                                "name": "name",
                                "required": true,
                                "schema": {
                                  "fullComment": "name (identifier) of the model",
                                  "type": "string"
                                }
                              },
                              {
                                "name": "slug",
                                "required": true,
                                "schema": {
                                  "fullComment": "kebab-case variant of the name",
                                  "type": "string"
                                }
                              },
                              {
                                "name": "operationRelativeTypescriptFilePath",
                                "required": true,
                                "schema": {
                                  "fullComment": "relative file path from the operation that this indexed instance is referencing to\n\ne.g. src/general.ts\n\n(no preceding slash)",
                                  "type": "string"
                                }
                              },
                              {
                                "name": "comment",
                                "required": true,
                                "schema": {
                                  "fullComment": "the content of the comment in markdown, without frontmatter\n\n",
                                  "properties": [
                                    {
                                      "name": "fileName",
                                      "required": true,
                                      "schema": {
                                        "type": "string"
                                      }
                                    },
                                    {
                                      "name": "params",
                                      "required": true,
                                      "schema": {
                                        "properties": [
                                          {
                                            "name": "title",
                                            "required": false,
                                            "schema": {
                                              "type": "string"
                                            }
                                          },
                                          {
                                            "name": "author",
                                            "required": false,
                                            "schema": {
                                              "type": "string"
                                            }
                                          }
                                        ],
                                        "type": "object"
                                      }
                                    },
                                    {
                                      "name": "createdAt",
                                      "required": true,
                                      "schema": {
                                        "fullComment": "",
                                        "type": "number"
                                      }
                                    },
                                    {
                                      "name": "updatedAt",
                                      "required": true,
                                      "schema": {
                                        "fullComment": "",
                                        "type": "number"
                                      }
                                    },
                                    {
                                      "name": "modifiedAt",
                                      "required": true,
                                      "schema": {
                                        "fullComment": "",
                                        "type": "number"
                                      }
                                    },
                                    {
                                      "name": "openedAt",
                                      "required": true,
                                      "schema": {
                                        "fullComment": "",
                                        "type": "number"
                                      }
                                    },
                                    {
                                      "name": "content",
                                      "required": true,
                                      "schema": {
                                        "fullComment": "",
                                        "type": "string"
                                      }
                                    }
                                  ],
                                  "type": "object"
                                }
                              },
                              {
                                "name": "parameters",
                                "required": true,
                                "schema": {
                                  "fullComment": "parameters destructured from the frontmatter of the parsed markdown (if comment is not a oneliner, otherwise it'll be empty)\n\nOur version of frontmatter is a bit simpler than regular frontmatter\n\nNot sure if this is a good idea, but it keeps it simple for our OS\n\nall values parse in a similar way to csv\n\nmake sure that you use quotes if you want to store a string with commas, because commas in a parameter indicate that it is a string array\n\nNB: string arrays are comma separated values, where you can put values with special characters in between quotes",
                                  "nb": "string arrays are comma separated values, where you can put values with special characters in between quotes",
                                  "properties": [],
                                  "type": "object"
                                }
                              },
                              {
                                "name": "types",
                                "required": true,
                                "schema": {
                                  "fullComment": "These are the type indicators that were found in this single or multiline comment. Can be multiple.",
                                  "items": [
                                    {
                                      "schema": {
                                        "enum": [
                                          "todo",
                                          "discussion",
                                          "idea",
                                          "later",
                                          "nb",
                                          "title",
                                          "section",
                                          "description"
                                        ],
                                        "fullComment": "special line prefixes:\n\n**Developer related comments**\n\n- TODO: for developer to know what to do\n- DISCUSSION: for developer to state that discussion is needed\n- IDEA: for developer to state ideas\n- LATER: for developer to mark as thing that needs to be done later\n- NB: for developer to add a note\n\n**Form related comments**\n\n- TITLE: if available, will be used as title of form input (overwrites humanCase version of the property-name itself in that case)\n- SECTION: start a new section in the form from this point, the value behind here can be the title\n- DESCRIPTION: if available, will be used as description of the form input",
                                        "type": "string"
                                      },
                                      "name": "CommentType"
                                    }
                                  ],
                                  "type": "array"
                                }
                              },
                              {
                                "name": "firstLine",
                                "required": true,
                                "schema": {
                                  "fullComment": "first line of the comment",
                                  "type": "number"
                                }
                              },
                              {
                                "name": "lastLine",
                                "required": true,
                                "schema": {
                                  "fullComment": "last line of the comment",
                                  "type": "number"
                                }
                              },
                              {
                                "name": "statementName",
                                "required": false,
                                "schema": {
                                  "fullComment": "statement name the comment belongs to",
                                  "type": "string"
                                }
                              },
                              {
                                "name": "rawStatement",
                                "required": false,
                                "schema": {
                                  "fullComment": "raw statement text the comment belongs to",
                                  "type": "string"
                                }
                              }
                            ],
                            "type": "object"
                          },
                          "name": "TsComment"
                        }
                      ],
                      "type": "array"
                    }
                  },
                  {
                    "name": "returnType",
                    "required": true,
                    "schema": {
                      "fullComment": "return type JSON Schema definition\n\nall info that should always be collected when indexing any type interface",
                      "properties": [
                        {
                          "name": "typeDefinition",
                          "required": false,
                          "schema": {
                            "fullComment": "JSON schema definition of a type interface\n\n\nSome info about the Schema:\n\n- if the type is an object, there should be properties\n- if the type is an array, there should be items\n\n\n\n",
                            "properties": [
                              {
                                "name": "$id",
                                "required": false,
                                "schema": {
                                  "type": "string"
                                }
                              },
                              {
                                "name": "$ref",
                                "required": false,
                                "schema": {
                                  "type": "string"
                                }
                              },
                              {
                                "name": "$comment",
                                "required": false,
                                "schema": {
                                  "type": "string"
                                }
                              },
                              {
                                "name": "$defs",
                                "required": false,
                                "schema": {
                                  "properties": [],
                                  "type": "object"
                                }
                              },
                              {
                                "name": "type",
                                "required": false,
                                "schema": {
                                  "properties": [],
                                  "type": "object"
                                }
                              },
                              {
                                "name": "enum",
                                "required": false,
                                "schema": {
                                  "items": [
                                    {
                                      "schema": {
                                        "fullComment": "Primitive type",
                                        "properties": [],
                                        "type": "object"
                                      },
                                      "name": "JSONSchema7Type"
                                    }
                                  ],
                                  "type": "array"
                                }
                              },
                              {
                                "name": "const",
                                "required": false,
                                "schema": {
                                  "fullComment": "Primitive type",
                                  "properties": [],
                                  "type": "object"
                                }
                              },
                              {
                                "name": "multipleOf",
                                "required": false,
                                "schema": {
                                  "type": "number"
                                }
                              },
                              {
                                "name": "maximum",
                                "required": false,
                                "schema": {
                                  "type": "number"
                                }
                              },
                              {
                                "name": "exclusiveMaximum",
                                "required": false,
                                "schema": {
                                  "type": "number"
                                }
                              },
                              {
                                "name": "minimum",
                                "required": false,
                                "schema": {
                                  "type": "number"
                                }
                              },
                              {
                                "name": "exclusiveMinimum",
                                "required": false,
                                "schema": {
                                  "type": "number"
                                }
                              },
                              {
                                "name": "maxLength",
                                "required": false,
                                "schema": {
                                  "type": "number"
                                }
                              },
                              {
                                "name": "minLength",
                                "required": false,
                                "schema": {
                                  "type": "number"
                                }
                              },
                              {
                                "name": "pattern",
                                "required": false,
                                "schema": {
                                  "type": "string"
                                }
                              },
                              {
                                "name": "items",
                                "required": false,
                                "schema": {
                                  "properties": [],
                                  "type": "object"
                                }
                              },
                              {
                                "name": "additionalItems",
                                "required": false,
                                "schema": {
                                  "fullComment": "JSON Schema v7",
                                  "properties": [],
                                  "type": "object"
                                }
                              },
                              {
                                "name": "maxItems",
                                "required": false,
                                "schema": {
                                  "type": "number"
                                }
                              },
                              {
                                "name": "minItems",
                                "required": false,
                                "schema": {
                                  "type": "number"
                                }
                              },
                              {
                                "name": "uniqueItems",
                                "required": false,
                                "schema": {
                                  "type": "boolean"
                                }
                              },
                              {
                                "name": "contains",
                                "required": false,
                                "schema": {
                                  "circularRefName": "JSONSchema7",
                                  "properties": [],
                                  "type": "object"
                                }
                              },
                              {
                                "name": "maxProperties",
                                "required": false,
                                "schema": {
                                  "type": "number"
                                }
                              },
                              {
                                "name": "minProperties",
                                "required": false,
                                "schema": {
                                  "type": "number"
                                }
                              },
                              {
                                "name": "required",
                                "required": false,
                                "schema": {
                                  "items": [
                                    {
                                      "schema": {
                                        "type": "string"
                                      },
                                      "name": null
                                    }
                                  ],
                                  "type": "array"
                                }
                              },
                              {
                                "name": "properties",
                                "required": false,
                                "schema": {
                                  "properties": [],
                                  "type": "object"
                                }
                              },
                              {
                                "name": "patternProperties",
                                "required": false,
                                "schema": {
                                  "properties": [],
                                  "type": "object"
                                }
                              },
                              {
                                "name": "additionalProperties",
                                "required": false,
                                "schema": {
                                  "fullComment": "JSON Schema v7",
                                  "properties": [],
                                  "type": "object"
                                }
                              },
                              {
                                "name": "dependencies",
                                "required": false,
                                "schema": {
                                  "properties": [],
                                  "type": "object"
                                }
                              },
                              {
                                "name": "propertyNames",
                                "required": false,
                                "schema": {
                                  "fullComment": "JSON Schema v7",
                                  "properties": [],
                                  "type": "object"
                                }
                              },
                              {
                                "name": "if",
                                "required": false,
                                "schema": {
                                  "fullComment": "JSON Schema v7",
                                  "properties": [],
                                  "type": "object"
                                }
                              },
                              {
                                "name": "then",
                                "required": false,
                                "schema": {
                                  "fullComment": "JSON Schema v7",
                                  "properties": [],
                                  "type": "object"
                                }
                              },
                              {
                                "name": "else",
                                "required": false,
                                "schema": {
                                  "fullComment": "JSON Schema v7",
                                  "properties": [],
                                  "type": "object"
                                }
                              },
                              {
                                "name": "allOf",
                                "required": false,
                                "schema": {
                                  "items": [
                                    {
                                      "schema": {
                                        "fullComment": "JSON Schema v7",
                                        "properties": [],
                                        "type": "object"
                                      },
                                      "name": "JSONSchema7Definition"
                                    }
                                  ],
                                  "type": "array"
                                }
                              },
                              {
                                "name": "anyOf",
                                "required": false,
                                "schema": {
                                  "items": [
                                    {
                                      "schema": {
                                        "fullComment": "JSON Schema v7",
                                        "properties": [],
                                        "type": "object"
                                      },
                                      "name": "JSONSchema7Definition"
                                    }
                                  ],
                                  "type": "array"
                                }
                              },
                              {
                                "name": "oneOf",
                                "required": false,
                                "schema": {
                                  "items": [
                                    {
                                      "schema": {
                                        "fullComment": "JSON Schema v7",
                                        "properties": [],
                                        "type": "object"
                                      },
                                      "name": "JSONSchema7Definition"
                                    }
                                  ],
                                  "type": "array"
                                }
                              },
                              {
                                "name": "not",
                                "required": false,
                                "schema": {
                                  "fullComment": "JSON Schema v7",
                                  "properties": [],
                                  "type": "object"
                                }
                              },
                              {
                                "name": "format",
                                "required": false,
                                "schema": {
                                  "type": "string"
                                }
                              },
                              {
                                "name": "contentMediaType",
                                "required": false,
                                "schema": {
                                  "type": "string"
                                }
                              },
                              {
                                "name": "contentEncoding",
                                "required": false,
                                "schema": {
                                  "type": "string"
                                }
                              },
                              {
                                "name": "definitions",
                                "required": false,
                                "schema": {
                                  "properties": [],
                                  "type": "object"
                                }
                              },
                              {
                                "name": "title",
                                "required": false,
                                "schema": {
                                  "type": "string"
                                }
                              },
                              {
                                "name": "description",
                                "required": false,
                                "schema": {
                                  "type": "string"
                                }
                              },
                              {
                                "name": "default",
                                "required": false,
                                "schema": {
                                  "fullComment": "Primitive type",
                                  "properties": [],
                                  "type": "object"
                                }
                              },
                              {
                                "name": "readOnly",
                                "required": false,
                                "schema": {
                                  "type": "boolean"
                                }
                              },
                              {
                                "name": "writeOnly",
                                "required": false,
                                "schema": {
                                  "type": "boolean"
                                }
                              },
                              {
                                "name": "examples",
                                "required": false,
                                "schema": {
                                  "fullComment": "Primitive type",
                                  "properties": [],
                                  "type": "object"
                                }
                              }
                            ],
                            "type": "object"
                          }
                        },
                        {
                          "name": "simplifiedSchema",
                          "required": false,
                          "schema": {
                            "fullComment": "JSONSchema7 derivative that has the following capabilities and and characteristics...\n\n- does not include objects in objects that are also referenced to using xxxSlug or xxxId\n- recursively finds the references and expands them, unless the references are circular\n- easier to read\n- has all the information we need\n- is able to generate an object with values in the exact format the function needs it\n- is able to easily generate a form",
                            "properties": [
                              {
                                "name": "todo",
                                "required": false,
                                "schema": {
                                  "type": "string"
                                }
                              },
                              {
                                "name": "discussion",
                                "required": false,
                                "schema": {
                                  "type": "string"
                                }
                              },
                              {
                                "name": "idea",
                                "required": false,
                                "schema": {
                                  "type": "string"
                                }
                              },
                              {
                                "name": "later",
                                "required": false,
                                "schema": {
                                  "type": "string"
                                }
                              },
                              {
                                "name": "nb",
                                "required": false,
                                "schema": {
                                  "type": "string"
                                }
                              },
                              {
                                "name": "title",
                                "required": false,
                                "schema": {
                                  "type": "string"
                                }
                              },
                              {
                                "name": "section",
                                "required": false,
                                "schema": {
                                  "type": "string"
                                }
                              },
                              {
                                "name": "description",
                                "required": false,
                                "schema": {
                                  "type": "string"
                                }
                              },
                              {
                                "name": "type",
                                "required": true,
                                "schema": {
                                  "enum": [
                                    "string",
                                    "number",
                                    "boolean",
                                    "object",
                                    "array",
                                    "null"
                                  ],
                                  "fullComment": "- string\n- number\n- boolean\n- object\n- array\n- null\n\nNB: Omit doesn't work for the indexer! This would be the type: Omit<JSONSchema7TypeName, \"integer\">;\n\n",
                                  "nb": "Omit doesn't work for the indexer! This would be the type: Omit<JSONSchema7TypeName, \"integer\">;",
                                  "type": "string"
                                }
                              },
                              {
                                "name": "circularRefName",
                                "required": false,
                                "schema": {
                                  "fullComment": "sometimes we still need to reference to another schema because this thing is recursive. In that case the ref name will be here",
                                  "type": "string"
                                }
                              },
                              {
                                "name": "enum",
                                "required": false,
                                "schema": {
                                  "fullComment": "in case of enums this could appear... mostly strings, but e.g. numbers can also be an enum I think",
                                  "items": [
                                    {
                                      "schema": {
                                        "fullComment": "Primitive type",
                                        "properties": [],
                                        "type": "object"
                                      },
                                      "name": "JSONSchema7Type"
                                    }
                                  ],
                                  "type": "array"
                                }
                              },
                              {
                                "name": "properties",
                                "required": false,
                                "schema": {
                                  "fullComment": "in case of object, this will always appear",
                                  "items": [
                                    {
                                      "schema": {
                                        "fullComment": "",
                                        "properties": [
                                          {
                                            "name": "name",
                                            "required": true,
                                            "schema": {
                                              "type": "string"
                                            }
                                          },
                                          {
                                            "name": "schema",
                                            "required": true,
                                            "schema": {
                                              "circularRefName": "SimplifiedSchema",
                                              "properties": [],
                                              "type": "object"
                                            }
                                          },
                                          {
                                            "name": "required",
                                            "required": true,
                                            "schema": {
                                              "fullComment": "NB: can't we put this in the SimplifiedSchema itself?",
                                              "nb": "can't we put this in the SimplifiedSchema itself?",
                                              "type": "boolean"
                                            }
                                          }
                                        ],
                                        "type": "object"
                                      },
                                      "name": "SimplifiedSchemaProperty"
                                    }
                                  ],
                                  "type": "array"
                                }
                              },
                              {
                                "name": "items",
                                "required": false,
                                "schema": {
                                  "fullComment": "in case of arrays, this will always appear",
                                  "items": [
                                    {
                                      "schema": {
                                        "fullComment": "",
                                        "properties": [
                                          {
                                            "name": "name",
                                            "required": true,
                                            "schema": {
                                              "fullComment": "name in case of it being a reference, otherwise null",
                                              "type": "string"
                                            }
                                          },
                                          {
                                            "name": "schema",
                                            "required": true,
                                            "schema": {
                                              "circularRefName": "SimplifiedSchema",
                                              "properties": [],
                                              "type": "object"
                                            }
                                          }
                                        ],
                                        "type": "object"
                                      },
                                      "name": "SimplifiedSchemaItem"
                                    }
                                  ],
                                  "type": "array"
                                }
                              },
                              {
                                "name": "fullComment",
                                "required": false,
                                "schema": {
                                  "fullComment": "Full doccomment, parsed without all stars syntax.\n\nNB: besides this, every `CommentType` can optionally also be found as a property on the `SimplifiedSchema`",
                                  "nb": "besides this, every `CommentType` can optionally also be found as a property on the `SimplifiedSchema`",
                                  "type": "string"
                                }
                              }
                            ],
                            "type": "object"
                          }
                        },
                        {
                          "name": "isObject",
                          "required": true,
                          "schema": {
                            "fullComment": "if the type is an object, this is true. false if it's an array",
                            "type": "boolean"
                          }
                        },
                        {
                          "name": "isArray",
                          "required": true,
                          "schema": {
                            "fullComment": "if the type is an array, this is true",
                            "type": "boolean"
                          }
                        },
                        {
                          "name": "isPrimitive",
                          "required": true,
                          "schema": {
                            "fullComment": "if it's a primitive type like \"string\", \"number\", \"boolean\", \"null\" | \"undefined\"",
                            "type": "boolean"
                          }
                        },
                        {
                          "name": "isEnum",
                          "required": true,
                          "schema": {
                            "fullComment": "will be true for any primitive conjunction types",
                            "type": "boolean"
                          }
                        },
                        {
                          "name": "isEnumLiteral",
                          "required": true,
                          "schema": {
                            "fullComment": "will be true for string conjunction types",
                            "type": "boolean"
                          }
                        },
                        {
                          "name": "typeCoverage",
                          "required": true,
                          "schema": {
                            "fullComment": "quantification of coverage of the specified type or subtypes in our database.",
                            "type": "number"
                          }
                        },
                        {
                          "name": "rawType",
                          "required": true,
                          "schema": {
                            "fullComment": "raw type string",
                            "type": "string"
                          }
                        }
                      ],
                      "type": "object"
                    }
                  },
                  {
                    "name": "parameters",
                    "required": false,
                    "schema": {
                      "fullComment": "parameters the function takes as its arguments, if any",
                      "items": [
                        {
                          "schema": {
                            "fullComment": "",
                            "properties": [
                              {
                                "name": "name",
                                "required": true,
                                "schema": {
                                  "type": "string"
                                }
                              },
                              {
                                "name": "schema",
                                "required": false,
                                "schema": {
                                  "fullComment": "",
                                  "properties": [
                                    {
                                      "name": "$id",
                                      "required": false,
                                      "schema": {
                                        "type": "string"
                                      }
                                    },
                                    {
                                      "name": "$ref",
                                      "required": false,
                                      "schema": {
                                        "type": "string"
                                      }
                                    },
                                    {
                                      "name": "$comment",
                                      "required": false,
                                      "schema": {
                                        "type": "string"
                                      }
                                    },
                                    {
                                      "name": "$defs",
                                      "required": false,
                                      "schema": {
                                        "properties": [],
                                        "type": "object"
                                      }
                                    },
                                    {
                                      "name": "type",
                                      "required": false,
                                      "schema": {
                                        "properties": [],
                                        "type": "object"
                                      }
                                    },
                                    {
                                      "name": "enum",
                                      "required": false,
                                      "schema": {
                                        "items": [
                                          {
                                            "schema": {
                                              "fullComment": "Primitive type",
                                              "properties": [],
                                              "type": "object"
                                            },
                                            "name": "JSONSchema7Type"
                                          }
                                        ],
                                        "type": "array"
                                      }
                                    },
                                    {
                                      "name": "const",
                                      "required": false,
                                      "schema": {
                                        "fullComment": "Primitive type",
                                        "properties": [],
                                        "type": "object"
                                      }
                                    },
                                    {
                                      "name": "multipleOf",
                                      "required": false,
                                      "schema": {
                                        "type": "number"
                                      }
                                    },
                                    {
                                      "name": "maximum",
                                      "required": false,
                                      "schema": {
                                        "type": "number"
                                      }
                                    },
                                    {
                                      "name": "exclusiveMaximum",
                                      "required": false,
                                      "schema": {
                                        "type": "number"
                                      }
                                    },
                                    {
                                      "name": "minimum",
                                      "required": false,
                                      "schema": {
                                        "type": "number"
                                      }
                                    },
                                    {
                                      "name": "exclusiveMinimum",
                                      "required": false,
                                      "schema": {
                                        "type": "number"
                                      }
                                    },
                                    {
                                      "name": "maxLength",
                                      "required": false,
                                      "schema": {
                                        "type": "number"
                                      }
                                    },
                                    {
                                      "name": "minLength",
                                      "required": false,
                                      "schema": {
                                        "type": "number"
                                      }
                                    },
                                    {
                                      "name": "pattern",
                                      "required": false,
                                      "schema": {
                                        "type": "string"
                                      }
                                    },
                                    {
                                      "name": "items",
                                      "required": false,
                                      "schema": {
                                        "properties": [],
                                        "type": "object"
                                      }
                                    },
                                    {
                                      "name": "additionalItems",
                                      "required": false,
                                      "schema": {
                                        "fullComment": "JSON Schema v7",
                                        "properties": [],
                                        "type": "object"
                                      }
                                    },
                                    {
                                      "name": "maxItems",
                                      "required": false,
                                      "schema": {
                                        "type": "number"
                                      }
                                    },
                                    {
                                      "name": "minItems",
                                      "required": false,
                                      "schema": {
                                        "type": "number"
                                      }
                                    },
                                    {
                                      "name": "uniqueItems",
                                      "required": false,
                                      "schema": {
                                        "type": "boolean"
                                      }
                                    },
                                    {
                                      "name": "contains",
                                      "required": false,
                                      "schema": {
                                        "circularRefName": "JSONSchema7",
                                        "properties": [],
                                        "type": "object"
                                      }
                                    },
                                    {
                                      "name": "maxProperties",
                                      "required": false,
                                      "schema": {
                                        "type": "number"
                                      }
                                    },
                                    {
                                      "name": "minProperties",
                                      "required": false,
                                      "schema": {
                                        "type": "number"
                                      }
                                    },
                                    {
                                      "name": "required",
                                      "required": false,
                                      "schema": {
                                        "items": [
                                          {
                                            "schema": {
                                              "type": "string"
                                            },
                                            "name": null
                                          }
                                        ],
                                        "type": "array"
                                      }
                                    },
                                    {
                                      "name": "properties",
                                      "required": false,
                                      "schema": {
                                        "properties": [],
                                        "type": "object"
                                      }
                                    },
                                    {
                                      "name": "patternProperties",
                                      "required": false,
                                      "schema": {
                                        "properties": [],
                                        "type": "object"
                                      }
                                    },
                                    {
                                      "name": "additionalProperties",
                                      "required": false,
                                      "schema": {
                                        "fullComment": "JSON Schema v7",
                                        "properties": [],
                                        "type": "object"
                                      }
                                    },
                                    {
                                      "name": "dependencies",
                                      "required": false,
                                      "schema": {
                                        "properties": [],
                                        "type": "object"
                                      }
                                    },
                                    {
                                      "name": "propertyNames",
                                      "required": false,
                                      "schema": {
                                        "fullComment": "JSON Schema v7",
                                        "properties": [],
                                        "type": "object"
                                      }
                                    },
                                    {
                                      "name": "if",
                                      "required": false,
                                      "schema": {
                                        "fullComment": "JSON Schema v7",
                                        "properties": [],
                                        "type": "object"
                                      }
                                    },
                                    {
                                      "name": "then",
                                      "required": false,
                                      "schema": {
                                        "fullComment": "JSON Schema v7",
                                        "properties": [],
                                        "type": "object"
                                      }
                                    },
                                    {
                                      "name": "else",
                                      "required": false,
                                      "schema": {
                                        "fullComment": "JSON Schema v7",
                                        "properties": [],
                                        "type": "object"
                                      }
                                    },
                                    {
                                      "name": "allOf",
                                      "required": false,
                                      "schema": {
                                        "items": [
                                          {
                                            "schema": {
                                              "fullComment": "JSON Schema v7",
                                              "properties": [],
                                              "type": "object"
                                            },
                                            "name": "JSONSchema7Definition"
                                          }
                                        ],
                                        "type": "array"
                                      }
                                    },
                                    {
                                      "name": "anyOf",
                                      "required": false,
                                      "schema": {
                                        "items": [
                                          {
                                            "schema": {
                                              "fullComment": "JSON Schema v7",
                                              "properties": [],
                                              "type": "object"
                                            },
                                            "name": "JSONSchema7Definition"
                                          }
                                        ],
                                        "type": "array"
                                      }
                                    },
                                    {
                                      "name": "oneOf",
                                      "required": false,
                                      "schema": {
                                        "items": [
                                          {
                                            "schema": {
                                              "fullComment": "JSON Schema v7",
                                              "properties": [],
                                              "type": "object"
                                            },
                                            "name": "JSONSchema7Definition"
                                          }
                                        ],
                                        "type": "array"
                                      }
                                    },
                                    {
                                      "name": "not",
                                      "required": false,
                                      "schema": {
                                        "fullComment": "JSON Schema v7",
                                        "properties": [],
                                        "type": "object"
                                      }
                                    },
                                    {
                                      "name": "format",
                                      "required": false,
                                      "schema": {
                                        "type": "string"
                                      }
                                    },
                                    {
                                      "name": "contentMediaType",
                                      "required": false,
                                      "schema": {
                                        "type": "string"
                                      }
                                    },
                                    {
                                      "name": "contentEncoding",
                                      "required": false,
                                      "schema": {
                                        "type": "string"
                                      }
                                    },
                                    {
                                      "name": "definitions",
                                      "required": false,
                                      "schema": {
                                        "properties": [],
                                        "type": "object"
                                      }
                                    },
                                    {
                                      "name": "title",
                                      "required": false,
                                      "schema": {
                                        "type": "string"
                                      }
                                    },
                                    {
                                      "name": "description",
                                      "required": false,
                                      "schema": {
                                        "type": "string"
                                      }
                                    },
                                    {
                                      "name": "default",
                                      "required": false,
                                      "schema": {
                                        "fullComment": "Primitive type",
                                        "properties": [],
                                        "type": "object"
                                      }
                                    },
                                    {
                                      "name": "readOnly",
                                      "required": false,
                                      "schema": {
                                        "type": "boolean"
                                      }
                                    },
                                    {
                                      "name": "writeOnly",
                                      "required": false,
                                      "schema": {
                                        "type": "boolean"
                                      }
                                    },
                                    {
                                      "name": "examples",
                                      "required": false,
                                      "schema": {
                                        "fullComment": "Primitive type",
                                        "properties": [],
                                        "type": "object"
                                      }
                                    }
                                  ],
                                  "type": "object"
                                }
                              },
                              {
                                "name": "simplifiedSchema",
                                "required": false,
                                "schema": {
                                  "fullComment": "JSONSchema7 derivative that has the following capabilities and and characteristics...\n\n- does not include objects in objects that are also referenced to using xxxSlug or xxxId\n- recursively finds the references and expands them, unless the references are circular\n- easier to read\n- has all the information we need\n- is able to generate an object with values in the exact format the function needs it\n- is able to easily generate a form",
                                  "properties": [
                                    {
                                      "name": "todo",
                                      "required": false,
                                      "schema": {
                                        "type": "string"
                                      }
                                    },
                                    {
                                      "name": "discussion",
                                      "required": false,
                                      "schema": {
                                        "type": "string"
                                      }
                                    },
                                    {
                                      "name": "idea",
                                      "required": false,
                                      "schema": {
                                        "type": "string"
                                      }
                                    },
                                    {
                                      "name": "later",
                                      "required": false,
                                      "schema": {
                                        "type": "string"
                                      }
                                    },
                                    {
                                      "name": "nb",
                                      "required": false,
                                      "schema": {
                                        "type": "string"
                                      }
                                    },
                                    {
                                      "name": "title",
                                      "required": false,
                                      "schema": {
                                        "type": "string"
                                      }
                                    },
                                    {
                                      "name": "section",
                                      "required": false,
                                      "schema": {
                                        "type": "string"
                                      }
                                    },
                                    {
                                      "name": "description",
                                      "required": false,
                                      "schema": {
                                        "type": "string"
                                      }
                                    },
                                    {
                                      "name": "type",
                                      "required": true,
                                      "schema": {
                                        "enum": [
                                          "string",
                                          "number",
                                          "boolean",
                                          "object",
                                          "array",
                                          "null"
                                        ],
                                        "fullComment": "- string\n- number\n- boolean\n- object\n- array\n- null\n\nNB: Omit doesn't work for the indexer! This would be the type: Omit<JSONSchema7TypeName, \"integer\">;\n\n",
                                        "nb": "Omit doesn't work for the indexer! This would be the type: Omit<JSONSchema7TypeName, \"integer\">;",
                                        "type": "string"
                                      }
                                    },
                                    {
                                      "name": "circularRefName",
                                      "required": false,
                                      "schema": {
                                        "fullComment": "sometimes we still need to reference to another schema because this thing is recursive. In that case the ref name will be here",
                                        "type": "string"
                                      }
                                    },
                                    {
                                      "name": "enum",
                                      "required": false,
                                      "schema": {
                                        "fullComment": "in case of enums this could appear... mostly strings, but e.g. numbers can also be an enum I think",
                                        "items": [
                                          {
                                            "schema": {
                                              "fullComment": "Primitive type",
                                              "properties": [],
                                              "type": "object"
                                            },
                                            "name": "JSONSchema7Type"
                                          }
                                        ],
                                        "type": "array"
                                      }
                                    },
                                    {
                                      "name": "properties",
                                      "required": false,
                                      "schema": {
                                        "fullComment": "in case of object, this will always appear",
                                        "items": [
                                          {
                                            "schema": {
                                              "fullComment": "",
                                              "properties": [
                                                {
                                                  "name": "name",
                                                  "required": true,
                                                  "schema": {
                                                    "type": "string"
                                                  }
                                                },
                                                {
                                                  "name": "schema",
                                                  "required": true,
                                                  "schema": {
                                                    "circularRefName": "SimplifiedSchema",
                                                    "properties": [],
                                                    "type": "object"
                                                  }
                                                },
                                                {
                                                  "name": "required",
                                                  "required": true,
                                                  "schema": {
                                                    "fullComment": "NB: can't we put this in the SimplifiedSchema itself?",
                                                    "nb": "can't we put this in the SimplifiedSchema itself?",
                                                    "type": "boolean"
                                                  }
                                                }
                                              ],
                                              "type": "object"
                                            },
                                            "name": "SimplifiedSchemaProperty"
                                          }
                                        ],
                                        "type": "array"
                                      }
                                    },
                                    {
                                      "name": "items",
                                      "required": false,
                                      "schema": {
                                        "fullComment": "in case of arrays, this will always appear",
                                        "items": [
                                          {
                                            "schema": {
                                              "fullComment": "",
                                              "properties": [
                                                {
                                                  "name": "name",
                                                  "required": true,
                                                  "schema": {
                                                    "fullComment": "name in case of it being a reference, otherwise null",
                                                    "type": "string"
                                                  }
                                                },
                                                {
                                                  "name": "schema",
                                                  "required": true,
                                                  "schema": {
                                                    "circularRefName": "SimplifiedSchema",
                                                    "properties": [],
                                                    "type": "object"
                                                  }
                                                }
                                              ],
                                              "type": "object"
                                            },
                                            "name": "SimplifiedSchemaItem"
                                          }
                                        ],
                                        "type": "array"
                                      }
                                    },
                                    {
                                      "name": "fullComment",
                                      "required": false,
                                      "schema": {
                                        "fullComment": "Full doccomment, parsed without all stars syntax.\n\nNB: besides this, every `CommentType` can optionally also be found as a property on the `SimplifiedSchema`",
                                        "nb": "besides this, every `CommentType` can optionally also be found as a property on the `SimplifiedSchema`",
                                        "type": "string"
                                      }
                                    }
                                  ],
                                  "type": "object"
                                }
                              },
                              {
                                "name": "required",
                                "required": true,
                                "schema": {
                                  "type": "boolean"
                                }
                              }
                            ],
                            "type": "object"
                          },
                          "name": "FunctionParameter"
                        }
                      ],
                      "type": "array"
                    }
                  },
                  {
                    "name": "size",
                    "required": true,
                    "schema": {
                      "fullComment": "size of this function (comments + code)\n\ntype interface that can be used to summarize multiple files",
                      "properties": [
                        {
                          "name": "numberOfFiles",
                          "required": false,
                          "schema": {
                            "fullComment": "if this is about multiple files, the number of files is specified here",
                            "type": "number"
                          }
                        },
                        {
                          "name": "characters",
                          "required": true,
                          "schema": {
                            "fullComment": "amount of characters",
                            "type": "number"
                          }
                        },
                        {
                          "name": "lines",
                          "required": true,
                          "schema": {
                            "fullComment": "amount of lines",
                            "type": "number"
                          }
                        },
                        {
                          "name": "bytes",
                          "required": true,
                          "schema": {
                            "fullComment": "amount of bytes",
                            "type": "number"
                          }
                        },
                        {
                          "name": "linesPerFile",
                          "required": true,
                          "schema": {
                            "fullComment": "rounded, amount of lines per file (averaged)",
                            "type": "number"
                          }
                        },
                        {
                          "name": "charactersPerLine",
                          "required": true,
                          "schema": {
                            "fullComment": "rounded, amount of characters per line (averaged)",
                            "type": "number"
                          }
                        },
                        {
                          "name": "bytesPerCharacter",
                          "required": true,
                          "schema": {
                            "fullComment": "rounded, amount of bytes per character",
                            "type": "number"
                          }
                        }
                      ],
                      "type": "object"
                    }
                  },
                  {
                    "name": "commentSize",
                    "required": false,
                    "schema": {
                      "fullComment": "size of the comments of this function (including surrounding comments)\n\ntype interface that can be used to summarize multiple files",
                      "properties": [
                        {
                          "name": "numberOfFiles",
                          "required": false,
                          "schema": {
                            "fullComment": "if this is about multiple files, the number of files is specified here",
                            "type": "number"
                          }
                        },
                        {
                          "name": "characters",
                          "required": true,
                          "schema": {
                            "fullComment": "amount of characters",
                            "type": "number"
                          }
                        },
                        {
                          "name": "lines",
                          "required": true,
                          "schema": {
                            "fullComment": "amount of lines",
                            "type": "number"
                          }
                        },
                        {
                          "name": "bytes",
                          "required": true,
                          "schema": {
                            "fullComment": "amount of bytes",
                            "type": "number"
                          }
                        },
                        {
                          "name": "linesPerFile",
                          "required": true,
                          "schema": {
                            "fullComment": "rounded, amount of lines per file (averaged)",
                            "type": "number"
                          }
                        },
                        {
                          "name": "charactersPerLine",
                          "required": true,
                          "schema": {
                            "fullComment": "rounded, amount of characters per line (averaged)",
                            "type": "number"
                          }
                        },
                        {
                          "name": "bytesPerCharacter",
                          "required": true,
                          "schema": {
                            "fullComment": "rounded, amount of bytes per character",
                            "type": "number"
                          }
                        }
                      ],
                      "type": "object"
                    }
                  },
                  {
                    "name": "codeSize",
                    "required": false,
                    "schema": {
                      "fullComment": "size of the code inside the function (without comments)\n\ntype interface that can be used to summarize multiple files",
                      "properties": [
                        {
                          "name": "numberOfFiles",
                          "required": false,
                          "schema": {
                            "fullComment": "if this is about multiple files, the number of files is specified here",
                            "type": "number"
                          }
                        },
                        {
                          "name": "characters",
                          "required": true,
                          "schema": {
                            "fullComment": "amount of characters",
                            "type": "number"
                          }
                        },
                        {
                          "name": "lines",
                          "required": true,
                          "schema": {
                            "fullComment": "amount of lines",
                            "type": "number"
                          }
                        },
                        {
                          "name": "bytes",
                          "required": true,
                          "schema": {
                            "fullComment": "amount of bytes",
                            "type": "number"
                          }
                        },
                        {
                          "name": "linesPerFile",
                          "required": true,
                          "schema": {
                            "fullComment": "rounded, amount of lines per file (averaged)",
                            "type": "number"
                          }
                        },
                        {
                          "name": "charactersPerLine",
                          "required": true,
                          "schema": {
                            "fullComment": "rounded, amount of characters per line (averaged)",
                            "type": "number"
                          }
                        },
                        {
                          "name": "bytesPerCharacter",
                          "required": true,
                          "schema": {
                            "fullComment": "rounded, amount of bytes per character",
                            "type": "number"
                          }
                        }
                      ],
                      "type": "object"
                    }
                  },
                  {
                    "name": "cumulativeSize",
                    "required": false,
                    "schema": {
                      "fullComment": "tells you the size of itself and all its dependencies that are used that are also part of an operation, recursively\n\ntype interface that can be used to summarize multiple files",
                      "properties": [
                        {
                          "name": "numberOfFiles",
                          "required": false,
                          "schema": {
                            "fullComment": "if this is about multiple files, the number of files is specified here",
                            "type": "number"
                          }
                        },
                        {
                          "name": "characters",
                          "required": true,
                          "schema": {
                            "fullComment": "amount of characters",
                            "type": "number"
                          }
                        },
                        {
                          "name": "lines",
                          "required": true,
                          "schema": {
                            "fullComment": "amount of lines",
                            "type": "number"
                          }
                        },
                        {
                          "name": "bytes",
                          "required": true,
                          "schema": {
                            "fullComment": "amount of bytes",
                            "type": "number"
                          }
                        },
                        {
                          "name": "linesPerFile",
                          "required": true,
                          "schema": {
                            "fullComment": "rounded, amount of lines per file (averaged)",
                            "type": "number"
                          }
                        },
                        {
                          "name": "charactersPerLine",
                          "required": true,
                          "schema": {
                            "fullComment": "rounded, amount of characters per line (averaged)",
                            "type": "number"
                          }
                        },
                        {
                          "name": "bytesPerCharacter",
                          "required": true,
                          "schema": {
                            "fullComment": "rounded, amount of bytes per character",
                            "type": "number"
                          }
                        }
                      ],
                      "type": "object"
                    }
                  },
                  {
                    "name": "cumulativeCommentSize",
                    "required": false,
                    "schema": {
                      "fullComment": "type interface that can be used to summarize multiple files",
                      "properties": [
                        {
                          "name": "numberOfFiles",
                          "required": false,
                          "schema": {
                            "fullComment": "if this is about multiple files, the number of files is specified here",
                            "type": "number"
                          }
                        },
                        {
                          "name": "characters",
                          "required": true,
                          "schema": {
                            "fullComment": "amount of characters",
                            "type": "number"
                          }
                        },
                        {
                          "name": "lines",
                          "required": true,
                          "schema": {
                            "fullComment": "amount of lines",
                            "type": "number"
                          }
                        },
                        {
                          "name": "bytes",
                          "required": true,
                          "schema": {
                            "fullComment": "amount of bytes",
                            "type": "number"
                          }
                        },
                        {
                          "name": "linesPerFile",
                          "required": true,
                          "schema": {
                            "fullComment": "rounded, amount of lines per file (averaged)",
                            "type": "number"
                          }
                        },
                        {
                          "name": "charactersPerLine",
                          "required": true,
                          "schema": {
                            "fullComment": "rounded, amount of characters per line (averaged)",
                            "type": "number"
                          }
                        },
                        {
                          "name": "bytesPerCharacter",
                          "required": true,
                          "schema": {
                            "fullComment": "rounded, amount of bytes per character",
                            "type": "number"
                          }
                        }
                      ],
                      "type": "object"
                    }
                  },
                  {
                    "name": "cumulativeCodeSize",
                    "required": false,
                    "schema": {
                      "fullComment": "type interface that can be used to summarize multiple files",
                      "properties": [
                        {
                          "name": "numberOfFiles",
                          "required": false,
                          "schema": {
                            "fullComment": "if this is about multiple files, the number of files is specified here",
                            "type": "number"
                          }
                        },
                        {
                          "name": "characters",
                          "required": true,
                          "schema": {
                            "fullComment": "amount of characters",
                            "type": "number"
                          }
                        },
                        {
                          "name": "lines",
                          "required": true,
                          "schema": {
                            "fullComment": "amount of lines",
                            "type": "number"
                          }
                        },
                        {
                          "name": "bytes",
                          "required": true,
                          "schema": {
                            "fullComment": "amount of bytes",
                            "type": "number"
                          }
                        },
                        {
                          "name": "linesPerFile",
                          "required": true,
                          "schema": {
                            "fullComment": "rounded, amount of lines per file (averaged)",
                            "type": "number"
                          }
                        },
                        {
                          "name": "charactersPerLine",
                          "required": true,
                          "schema": {
                            "fullComment": "rounded, amount of characters per line (averaged)",
                            "type": "number"
                          }
                        },
                        {
                          "name": "bytesPerCharacter",
                          "required": true,
                          "schema": {
                            "fullComment": "rounded, amount of bytes per character",
                            "type": "number"
                          }
                        }
                      ],
                      "type": "object"
                    }
                  },
                  {
                    "name": "maxIndentationDepth",
                    "required": true,
                    "schema": {
                      "fullComment": "maximum amount of times indedented in this function\n\ngood for determining the complexity and finding code that can be simplified/destructured into smaller pieces",
                      "type": "number"
                    }
                  },
                  {
                    "name": "dependantFiles",
                    "required": false,
                    "schema": {
                      "fullComment": "finds all files that import this function\n\nNB: this is not indexed because this information has nothing to do with the operation itself, but the exposure to the broader monorepo. This is calculated on the fly.",
                      "nb": "this is not indexed because this information has nothing to do with the operation itself, but the exposure to the broader monorepo. This is calculated on the fly.",
                      "items": [
                        {
                          "schema": {
                            "type": "string"
                          },
                          "name": null
                        }
                      ],
                      "type": "array"
                    }
                  },
                  {
                    "name": "operationName",
                    "required": true,
                    "schema": {
                      "fullComment": "name of operation the model belongs to\n\n- calculated value (not stored in database)\n- can be `null` or an actual operationName that it was saved at\n- can be `undefined` when you are creating an item, because then it can be set for you",
                      "type": "null"
                    }
                  },
                  {
                    "name": "projectRelativePath",
                    "required": true,
                    "schema": {
                      "fullComment": "path to dbfile\n\n- calculated value (not stored in database)\n- relatively from the project (without slash at start)\n- can be `undefined` when you are creating an item, because then it can be set for you",
                      "type": "string"
                    }
                  },
                  {
                    "name": "operationRelativePath",
                    "required": false,
                    "schema": {
                      "fullComment": "path to db file\n\n- relatively from the operation root folder (without slash at start)\n- calculated value (not stored in database)\n- can be `undefined` if the db file does not belong to an operation\n- can be `undefined` when you are creating an item, because then it can be set for you",
                      "type": "string"
                    }
                  },
                  {
                    "name": "id",
                    "required": true,
                    "schema": {
                      "fullComment": "unique id of the model",
                      "type": "string"
                    }
                  },
                  {
                    "name": "name",
                    "required": true,
                    "schema": {
                      "fullComment": "name (identifier) of the model",
                      "type": "string"
                    }
                  },
                  {
                    "name": "slug",
                    "required": true,
                    "schema": {
                      "fullComment": "kebab-case variant of the name",
                      "type": "string"
                    }
                  },
                  {
                    "name": "operationRelativeTypescriptFilePath",
                    "required": true,
                    "schema": {
                      "fullComment": "relative file path from the operation that this indexed instance is referencing to\n\ne.g. src/general.ts\n\n(no preceding slash)",
                      "type": "string"
                    }
                  }
                ],
                "type": "object"
              }
            },
            {
              "name": "groups",
              "required": false,
              "schema": {
                "fullComment": "Groups the person(s) of the device belong to, including the inherited groups and `public` special group",
                "items": [
                  {
                    "schema": {
                      "fullComment": "A `Person` is able to be part of one or multiple `Group`s. \n\nA `Device` without `Person` is just part of group `public` and can only access `public` info and features.\n\n`Group`s and individual `Person`s can be given `Authorization`\n\nFunctions that require authorization can have something in this format in their doc-comment:\n\n`[groupName]: x, y, z`\n\nE.g.\n\n--- manager: canExecute\n---",
                      "properties": [
                        {
                          "name": "slug",
                          "required": true,
                          "schema": {
                            "fullComment": "kebab-case of the name, should be unique\n\nuse this for any identifier that's not an Id-type. Usually this is a kebab-case version of a written text, but it can also be a file path, for example.",
                            "type": "string"
                          }
                        },
                        {
                          "name": "name",
                          "required": true,
                          "schema": {
                            "fullComment": "Name of the group (will set slug)\n\nNB: this can be used in functions to specify certain access to groups. It should there fore be unique and you should be careful when changing it!",
                            "nb": "this can be used in functions to specify certain access to groups. It should there fore be unique and you should be careful when changing it!",
                            "type": "string"
                          }
                        },
                        {
                          "name": "language",
                          "required": true,
                          "schema": {
                            "enum": [
                              "english",
                              "dutch",
                              "nepali",
                              "portuguese",
                              "brazilian",
                              "german",
                              "french",
                              "spanish",
                              "italian",
                              "norwegian",
                              "swedish",
                              "danish",
                              "vietnamese",
                              "indonesian",
                              "southAfrican",
                              "tokiPona",
                              "hindi",
                              "mandarin",
                              "arabic",
                              "bengali",
                              "urdu",
                              "japanese",
                              "swahili"
                            ],
                            "fullComment": "all currently supported languages",
                            "type": "string"
                          }
                        },
                        {
                          "name": "createdAt",
                          "required": true,
                          "schema": {
                            "fullComment": "Time\n\nTime can be stored in various ways but in my experience it is, again, best to keep it simple and just have one way to store time. I can think about this for hours, but my intuition goes towards using the same format as Date.now() because it is a very small format and is easy to read.\n\nIt is the amount of ms since 1970.\n\nI could argue to store it in seconds since 1970 since there are few applications of doing ms, but maybe we do, and it's just 30% bigger. No problem.\n\nTherefore, let's store all time values in the format Date.now()",
                            "type": "number"
                          }
                        },
                        {
                          "name": "updatedAt",
                          "required": true,
                          "schema": {
                            "fullComment": "Time\n\nTime can be stored in various ways but in my experience it is, again, best to keep it simple and just have one way to store time. I can think about this for hours, but my intuition goes towards using the same format as Date.now() because it is a very small format and is easy to read.\n\nIt is the amount of ms since 1970.\n\nI could argue to store it in seconds since 1970 since there are few applications of doing ms, but maybe we do, and it's just 30% bigger. No problem.\n\nTherefore, let's store all time values in the format Date.now()",
                            "type": "number"
                          }
                        },
                        {
                          "name": "deletedAt",
                          "required": true,
                          "schema": {
                            "fullComment": "Time\n\nTime can be stored in various ways but in my experience it is, again, best to keep it simple and just have one way to store time. I can think about this for hours, but my intuition goes towards using the same format as Date.now() because it is a very small format and is easy to read.\n\nIt is the amount of ms since 1970.\n\nI could argue to store it in seconds since 1970 since there are few applications of doing ms, but maybe we do, and it's just 30% bigger. No problem.\n\nTherefore, let's store all time values in the format Date.now()",
                            "type": "number"
                          }
                        },
                        {
                          "name": "createdFirstAt",
                          "required": true,
                          "schema": {
                            "fullComment": "in some cases, data can be created before it was created in our system. In this case, use CreatedFirstAt if this information is important.\n\nTime\n\nTime can be stored in various ways but in my experience it is, again, best to keep it simple and just have one way to store time. I can think about this for hours, but my intuition goes towards using the same format as Date.now() because it is a very small format and is easy to read.\n\nIt is the amount of ms since 1970.\n\nI could argue to store it in seconds since 1970 since there are few applications of doing ms, but maybe we do, and it's just 30% bigger. No problem.\n\nTherefore, let's store all time values in the format Date.now()",
                            "type": "number"
                          }
                        },
                        {
                          "name": "operationName",
                          "required": true,
                          "schema": {
                            "fullComment": "name of operation the model belongs to\n\n- calculated value (not stored in database)\n- can be `null` or an actual operationName that it was saved at\n- can be `undefined` when you are creating an item, because then it can be set for you",
                            "type": "null"
                          }
                        },
                        {
                          "name": "projectRelativePath",
                          "required": true,
                          "schema": {
                            "fullComment": "path to dbfile\n\n- calculated value (not stored in database)\n- relatively from the project (without slash at start)\n- can be `undefined` when you are creating an item, because then it can be set for you",
                            "type": "string"
                          }
                        },
                        {
                          "name": "operationRelativePath",
                          "required": false,
                          "schema": {
                            "fullComment": "path to db file\n\n- relatively from the operation root folder (without slash at start)\n- calculated value (not stored in database)\n- can be `undefined` if the db file does not belong to an operation\n- can be `undefined` when you are creating an item, because then it can be set for you",
                            "type": "string"
                          }
                        },
                        {
                          "name": "id",
                          "required": true,
                          "schema": {
                            "fullComment": "Should be an unique string By default, you can use `generateId()` to generate a random string of 16 characters. If you wish, you can also use any other string, as long as you are sure it's unique.\n\n# Background Info\n\nazAZ09 characters are easy to copy and provide 62 characters. the goal of an id is to be unique.\n\nthe advantage of a random id compared to an numeric id starting with 1 with auto increment is that you can set them up decentralised.\n\nthe change of duplicate ids gets bigger once you make them shorter the change of finding an existing id gets bigger once you make them shorter\n\nAn Id with 12 characters would provide 3.22e21 combinations.\n\nWhat is the change of duplicate ids? This depends on the amount of identifyable items in the data What is the change of guessing an id? This depends on speed of a brute force attack and the amount of available datapoints. If you can guess 10000 times per second, you can make 864.000.000 guesses. A billion guesses on a dataset of a billion datapoints yields 3226 correct ids on average.\n\nWhy make an id short? I don't know if there's an important reason.\n\nAll in all, I think we should make ids 24 characters by default. This would make it very easy to store, yet, with more than E42 combinations, make it nearly impossible to get duplication or brute force hits.\n\nAn id would look like this:\n\n``` { \"id\": \"sk2EcW9AkZpksk2EcW9AkZpk\" } ```\n\nLooks good to me! Don't think about it and just keep it simple. We can always migrate later to a bigger amount, but I don't see good reason to keep it smaller than this.",
                            "type": "string"
                          }
                        },
                        {
                          "name": "categoryStack",
                          "required": false,
                          "schema": {
                            "fullComment": "In case of jsonSingle storageMethod, the categoryStack is generated by the location of the file in the db model folder in the db folder.\n\nNB: Changing this value when updating/upserting, changes where the item is located!\n\nTaken from the location in the folder of the db-model.\n\nNB: Changing this value when updating/upserting, changes where the item is located!",
                            "nb": "Changing this value when updating/upserting, changes where the item is located!",
                            "items": [
                              {
                                "schema": {
                                  "type": "string"
                                },
                                "name": null
                              }
                            ],
                            "type": "array"
                          }
                        },
                        {
                          "name": "description",
                          "required": false,
                          "schema": {
                            "type": "string"
                          }
                        },
                        {
                          "name": "customAuthorizations",
                          "required": false,
                          "schema": {
                            "fullComment": "Optionally, provide custom authorization to a group",
                            "items": [
                              {
                                "schema": {
                                  "fullComment": "`Authorization` helps you provide certain access to files, data, functionality, and code. Authorization can be provided custom, or by indexation. The indexation of the codebase and text-files overwrites the custom authorization in the `Group`-model.\n\n## Different authorizations\n\nFor files (ts, md, json, etc...):\n\n- canWriteCreate\n- canWriteUpdate\n- canWriteDelete\n- canRead\n- canSearch (only search index)\n\nFor db model data subsets:\n\n- canWriteUpdate\n- canWriteCreate\n- canWriteDelete\n- canRead\n- canSearch (only search index)\n\nFor functions:\n\n- canExecute\n\nFor functions, interfaces, variables:\n\n- canRead (reading docs only. for source, you need to provide the file auth)\n- canSearch (only search index)",
                                  "properties": [
                                    {
                                      "name": "isProjectWide",
                                      "required": false,
                                      "schema": {
                                        "fullComment": "If true, this authorization is project-wide and applies to everything",
                                        "type": "boolean"
                                      }
                                    },
                                    {
                                      "name": "authorizedOperationName",
                                      "required": false,
                                      "schema": {
                                        "fullComment": "If selected, the authorization will apply to the whole operation",
                                        "type": "string"
                                      }
                                    },
                                    {
                                      "name": "tsFunctionId",
                                      "required": false,
                                      "schema": {
                                        "fullComment": "If selected, the authorization will apply to this function\n\nShould be an unique string By default, you can use `generateId()` to generate a random string of 16 characters. If you wish, you can also use any other string, as long as you are sure it's unique.\n\n# Background Info\n\nazAZ09 characters are easy to copy and provide 62 characters. the goal of an id is to be unique.\n\nthe advantage of a random id compared to an numeric id starting with 1 with auto increment is that you can set them up decentralised.\n\nthe change of duplicate ids gets bigger once you make them shorter the change of finding an existing id gets bigger once you make them shorter\n\nAn Id with 12 characters would provide 3.22e21 combinations.\n\nWhat is the change of duplicate ids? This depends on the amount of identifyable items in the data What is the change of guessing an id? This depends on speed of a brute force attack and the amount of available datapoints. If you can guess 10000 times per second, you can make 864.000.000 guesses. A billion guesses on a dataset of a billion datapoints yields 3226 correct ids on average.\n\nWhy make an id short? I don't know if there's an important reason.\n\nAll in all, I think we should make ids 24 characters by default. This would make it very easy to store, yet, with more than E42 combinations, make it nearly impossible to get duplication or brute force hits.\n\nAn id would look like this:\n\n``` { \"id\": \"sk2EcW9AkZpksk2EcW9AkZpk\" } ```\n\nLooks good to me! Don't think about it and just keep it simple. We can always migrate later to a bigger amount, but I don't see good reason to keep it smaller than this.",
                                        "type": "string"
                                      }
                                    },
                                    {
                                      "name": "tsVariableId",
                                      "required": false,
                                      "schema": {
                                        "fullComment": "If selected, the authorization will apply to this variable\n\nShould be an unique string By default, you can use `generateId()` to generate a random string of 16 characters. If you wish, you can also use any other string, as long as you are sure it's unique.\n\n# Background Info\n\nazAZ09 characters are easy to copy and provide 62 characters. the goal of an id is to be unique.\n\nthe advantage of a random id compared to an numeric id starting with 1 with auto increment is that you can set them up decentralised.\n\nthe change of duplicate ids gets bigger once you make them shorter the change of finding an existing id gets bigger once you make them shorter\n\nAn Id with 12 characters would provide 3.22e21 combinations.\n\nWhat is the change of duplicate ids? This depends on the amount of identifyable items in the data What is the change of guessing an id? This depends on speed of a brute force attack and the amount of available datapoints. If you can guess 10000 times per second, you can make 864.000.000 guesses. A billion guesses on a dataset of a billion datapoints yields 3226 correct ids on average.\n\nWhy make an id short? I don't know if there's an important reason.\n\nAll in all, I think we should make ids 24 characters by default. This would make it very easy to store, yet, with more than E42 combinations, make it nearly impossible to get duplication or brute force hits.\n\nAn id would look like this:\n\n``` { \"id\": \"sk2EcW9AkZpksk2EcW9AkZpk\" } ```\n\nLooks good to me! Don't think about it and just keep it simple. We can always migrate later to a bigger amount, but I don't see good reason to keep it smaller than this.",
                                        "type": "string"
                                      }
                                    },
                                    {
                                      "name": "tsInterfaceId",
                                      "required": false,
                                      "schema": {
                                        "fullComment": "If selected, the authorization will apply to this interface\n\nShould be an unique string By default, you can use `generateId()` to generate a random string of 16 characters. If you wish, you can also use any other string, as long as you are sure it's unique.\n\n# Background Info\n\nazAZ09 characters are easy to copy and provide 62 characters. the goal of an id is to be unique.\n\nthe advantage of a random id compared to an numeric id starting with 1 with auto increment is that you can set them up decentralised.\n\nthe change of duplicate ids gets bigger once you make them shorter the change of finding an existing id gets bigger once you make them shorter\n\nAn Id with 12 characters would provide 3.22e21 combinations.\n\nWhat is the change of duplicate ids? This depends on the amount of identifyable items in the data What is the change of guessing an id? This depends on speed of a brute force attack and the amount of available datapoints. If you can guess 10000 times per second, you can make 864.000.000 guesses. A billion guesses on a dataset of a billion datapoints yields 3226 correct ids on average.\n\nWhy make an id short? I don't know if there's an important reason.\n\nAll in all, I think we should make ids 24 characters by default. This would make it very easy to store, yet, with more than E42 combinations, make it nearly impossible to get duplication or brute force hits.\n\nAn id would look like this:\n\n``` { \"id\": \"sk2EcW9AkZpksk2EcW9AkZpk\" } ```\n\nLooks good to me! Don't think about it and just keep it simple. We can always migrate later to a bigger amount, but I don't see good reason to keep it smaller than this.",
                                        "type": "string"
                                      }
                                    },
                                    {
                                      "name": "datasetId",
                                      "required": false,
                                      "schema": {
                                        "fullComment": "If selected, the authorization will apply to this dataset\n\nShould be an unique string By default, you can use `generateId()` to generate a random string of 16 characters. If you wish, you can also use any other string, as long as you are sure it's unique.\n\n# Background Info\n\nazAZ09 characters are easy to copy and provide 62 characters. the goal of an id is to be unique.\n\nthe advantage of a random id compared to an numeric id starting with 1 with auto increment is that you can set them up decentralised.\n\nthe change of duplicate ids gets bigger once you make them shorter the change of finding an existing id gets bigger once you make them shorter\n\nAn Id with 12 characters would provide 3.22e21 combinations.\n\nWhat is the change of duplicate ids? This depends on the amount of identifyable items in the data What is the change of guessing an id? This depends on speed of a brute force attack and the amount of available datapoints. If you can guess 10000 times per second, you can make 864.000.000 guesses. A billion guesses on a dataset of a billion datapoints yields 3226 correct ids on average.\n\nWhy make an id short? I don't know if there's an important reason.\n\nAll in all, I think we should make ids 24 characters by default. This would make it very easy to store, yet, with more than E42 combinations, make it nearly impossible to get duplication or brute force hits.\n\nAn id would look like this:\n\n``` { \"id\": \"sk2EcW9AkZpksk2EcW9AkZpk\" } ```\n\nLooks good to me! Don't think about it and just keep it simple. We can always migrate later to a bigger amount, but I don't see good reason to keep it smaller than this.",
                                        "type": "string"
                                      }
                                    },
                                    {
                                      "name": "authorizedProjectRelativePath",
                                      "required": false,
                                      "schema": {
                                        "fullComment": "If selected, the authorization will apply to everything in this folder or to this specific file",
                                        "type": "string"
                                      }
                                    },
                                    {
                                      "name": "canExecute",
                                      "required": false,
                                      "schema": {
                                        "type": "boolean"
                                      }
                                    },
                                    {
                                      "name": "canWriteCreate",
                                      "required": false,
                                      "schema": {
                                        "type": "boolean"
                                      }
                                    },
                                    {
                                      "name": "canWriteUpdate",
                                      "required": false,
                                      "schema": {
                                        "type": "boolean"
                                      }
                                    },
                                    {
                                      "name": "canWriteDelete",
                                      "required": false,
                                      "schema": {
                                        "type": "boolean"
                                      }
                                    },
                                    {
                                      "name": "canRead",
                                      "required": false,
                                      "schema": {
                                        "type": "boolean"
                                      }
                                    },
                                    {
                                      "name": "canSearch",
                                      "required": false,
                                      "schema": {
                                        "type": "boolean"
                                      }
                                    }
                                  ],
                                  "type": "object"
                                },
                                "name": "Authorization"
                              }
                            ],
                            "type": "array"
                          }
                        },
                        {
                          "name": "indexedAuthorizationCalculated",
                          "required": false,
                          "schema": {
                            "items": [
                              {
                                "schema": {
                                  "fullComment": "Authorization model for indexed authorizations\n\nDon't edit this! If you wish to add authorizations to a group, either edit the code or text-files, or provide custom authorizations to the `Group`.",
                                  "properties": [
                                    {
                                      "name": "isProjectWide",
                                      "required": false,
                                      "schema": {
                                        "fullComment": "If true, this authorization is project-wide and applies to everything",
                                        "type": "boolean"
                                      }
                                    },
                                    {
                                      "name": "authorizedOperationName",
                                      "required": false,
                                      "schema": {
                                        "fullComment": "If selected, the authorization will apply to the whole operation",
                                        "type": "string"
                                      }
                                    },
                                    {
                                      "name": "tsFunctionId",
                                      "required": false,
                                      "schema": {
                                        "fullComment": "If selected, the authorization will apply to this function\n\nShould be an unique string By default, you can use `generateId()` to generate a random string of 16 characters. If you wish, you can also use any other string, as long as you are sure it's unique.\n\n# Background Info\n\nazAZ09 characters are easy to copy and provide 62 characters. the goal of an id is to be unique.\n\nthe advantage of a random id compared to an numeric id starting with 1 with auto increment is that you can set them up decentralised.\n\nthe change of duplicate ids gets bigger once you make them shorter the change of finding an existing id gets bigger once you make them shorter\n\nAn Id with 12 characters would provide 3.22e21 combinations.\n\nWhat is the change of duplicate ids? This depends on the amount of identifyable items in the data What is the change of guessing an id? This depends on speed of a brute force attack and the amount of available datapoints. If you can guess 10000 times per second, you can make 864.000.000 guesses. A billion guesses on a dataset of a billion datapoints yields 3226 correct ids on average.\n\nWhy make an id short? I don't know if there's an important reason.\n\nAll in all, I think we should make ids 24 characters by default. This would make it very easy to store, yet, with more than E42 combinations, make it nearly impossible to get duplication or brute force hits.\n\nAn id would look like this:\n\n``` { \"id\": \"sk2EcW9AkZpksk2EcW9AkZpk\" } ```\n\nLooks good to me! Don't think about it and just keep it simple. We can always migrate later to a bigger amount, but I don't see good reason to keep it smaller than this.",
                                        "type": "string"
                                      }
                                    },
                                    {
                                      "name": "tsVariableId",
                                      "required": false,
                                      "schema": {
                                        "fullComment": "If selected, the authorization will apply to this variable\n\nShould be an unique string By default, you can use `generateId()` to generate a random string of 16 characters. If you wish, you can also use any other string, as long as you are sure it's unique.\n\n# Background Info\n\nazAZ09 characters are easy to copy and provide 62 characters. the goal of an id is to be unique.\n\nthe advantage of a random id compared to an numeric id starting with 1 with auto increment is that you can set them up decentralised.\n\nthe change of duplicate ids gets bigger once you make them shorter the change of finding an existing id gets bigger once you make them shorter\n\nAn Id with 12 characters would provide 3.22e21 combinations.\n\nWhat is the change of duplicate ids? This depends on the amount of identifyable items in the data What is the change of guessing an id? This depends on speed of a brute force attack and the amount of available datapoints. If you can guess 10000 times per second, you can make 864.000.000 guesses. A billion guesses on a dataset of a billion datapoints yields 3226 correct ids on average.\n\nWhy make an id short? I don't know if there's an important reason.\n\nAll in all, I think we should make ids 24 characters by default. This would make it very easy to store, yet, with more than E42 combinations, make it nearly impossible to get duplication or brute force hits.\n\nAn id would look like this:\n\n``` { \"id\": \"sk2EcW9AkZpksk2EcW9AkZpk\" } ```\n\nLooks good to me! Don't think about it and just keep it simple. We can always migrate later to a bigger amount, but I don't see good reason to keep it smaller than this.",
                                        "type": "string"
                                      }
                                    },
                                    {
                                      "name": "tsInterfaceId",
                                      "required": false,
                                      "schema": {
                                        "fullComment": "If selected, the authorization will apply to this interface\n\nShould be an unique string By default, you can use `generateId()` to generate a random string of 16 characters. If you wish, you can also use any other string, as long as you are sure it's unique.\n\n# Background Info\n\nazAZ09 characters are easy to copy and provide 62 characters. the goal of an id is to be unique.\n\nthe advantage of a random id compared to an numeric id starting with 1 with auto increment is that you can set them up decentralised.\n\nthe change of duplicate ids gets bigger once you make them shorter the change of finding an existing id gets bigger once you make them shorter\n\nAn Id with 12 characters would provide 3.22e21 combinations.\n\nWhat is the change of duplicate ids? This depends on the amount of identifyable items in the data What is the change of guessing an id? This depends on speed of a brute force attack and the amount of available datapoints. If you can guess 10000 times per second, you can make 864.000.000 guesses. A billion guesses on a dataset of a billion datapoints yields 3226 correct ids on average.\n\nWhy make an id short? I don't know if there's an important reason.\n\nAll in all, I think we should make ids 24 characters by default. This would make it very easy to store, yet, with more than E42 combinations, make it nearly impossible to get duplication or brute force hits.\n\nAn id would look like this:\n\n``` { \"id\": \"sk2EcW9AkZpksk2EcW9AkZpk\" } ```\n\nLooks good to me! Don't think about it and just keep it simple. We can always migrate later to a bigger amount, but I don't see good reason to keep it smaller than this.",
                                        "type": "string"
                                      }
                                    },
                                    {
                                      "name": "datasetId",
                                      "required": false,
                                      "schema": {
                                        "fullComment": "If selected, the authorization will apply to this dataset\n\nShould be an unique string By default, you can use `generateId()` to generate a random string of 16 characters. If you wish, you can also use any other string, as long as you are sure it's unique.\n\n# Background Info\n\nazAZ09 characters are easy to copy and provide 62 characters. the goal of an id is to be unique.\n\nthe advantage of a random id compared to an numeric id starting with 1 with auto increment is that you can set them up decentralised.\n\nthe change of duplicate ids gets bigger once you make them shorter the change of finding an existing id gets bigger once you make them shorter\n\nAn Id with 12 characters would provide 3.22e21 combinations.\n\nWhat is the change of duplicate ids? This depends on the amount of identifyable items in the data What is the change of guessing an id? This depends on speed of a brute force attack and the amount of available datapoints. If you can guess 10000 times per second, you can make 864.000.000 guesses. A billion guesses on a dataset of a billion datapoints yields 3226 correct ids on average.\n\nWhy make an id short? I don't know if there's an important reason.\n\nAll in all, I think we should make ids 24 characters by default. This would make it very easy to store, yet, with more than E42 combinations, make it nearly impossible to get duplication or brute force hits.\n\nAn id would look like this:\n\n``` { \"id\": \"sk2EcW9AkZpksk2EcW9AkZpk\" } ```\n\nLooks good to me! Don't think about it and just keep it simple. We can always migrate later to a bigger amount, but I don't see good reason to keep it smaller than this.",
                                        "type": "string"
                                      }
                                    },
                                    {
                                      "name": "authorizedProjectRelativePath",
                                      "required": false,
                                      "schema": {
                                        "fullComment": "If selected, the authorization will apply to everything in this folder or to this specific file",
                                        "type": "string"
                                      }
                                    },
                                    {
                                      "name": "canExecute",
                                      "required": false,
                                      "schema": {
                                        "type": "boolean"
                                      }
                                    },
                                    {
                                      "name": "canWriteCreate",
                                      "required": false,
                                      "schema": {
                                        "type": "boolean"
                                      }
                                    },
                                    {
                                      "name": "canWriteUpdate",
                                      "required": false,
                                      "schema": {
                                        "type": "boolean"
                                      }
                                    },
                                    {
                                      "name": "canWriteDelete",
                                      "required": false,
                                      "schema": {
                                        "type": "boolean"
                                      }
                                    },
                                    {
                                      "name": "canRead",
                                      "required": false,
                                      "schema": {
                                        "type": "boolean"
                                      }
                                    },
                                    {
                                      "name": "canSearch",
                                      "required": false,
                                      "schema": {
                                        "type": "boolean"
                                      }
                                    },
                                    {
                                      "name": "createdAt",
                                      "required": true,
                                      "schema": {
                                        "fullComment": "Time\n\nTime can be stored in various ways but in my experience it is, again, best to keep it simple and just have one way to store time. I can think about this for hours, but my intuition goes towards using the same format as Date.now() because it is a very small format and is easy to read.\n\nIt is the amount of ms since 1970.\n\nI could argue to store it in seconds since 1970 since there are few applications of doing ms, but maybe we do, and it's just 30% bigger. No problem.\n\nTherefore, let's store all time values in the format Date.now()",
                                        "type": "number"
                                      }
                                    },
                                    {
                                      "name": "updatedAt",
                                      "required": true,
                                      "schema": {
                                        "fullComment": "Time\n\nTime can be stored in various ways but in my experience it is, again, best to keep it simple and just have one way to store time. I can think about this for hours, but my intuition goes towards using the same format as Date.now() because it is a very small format and is easy to read.\n\nIt is the amount of ms since 1970.\n\nI could argue to store it in seconds since 1970 since there are few applications of doing ms, but maybe we do, and it's just 30% bigger. No problem.\n\nTherefore, let's store all time values in the format Date.now()",
                                        "type": "number"
                                      }
                                    },
                                    {
                                      "name": "deletedAt",
                                      "required": true,
                                      "schema": {
                                        "fullComment": "Time\n\nTime can be stored in various ways but in my experience it is, again, best to keep it simple and just have one way to store time. I can think about this for hours, but my intuition goes towards using the same format as Date.now() because it is a very small format and is easy to read.\n\nIt is the amount of ms since 1970.\n\nI could argue to store it in seconds since 1970 since there are few applications of doing ms, but maybe we do, and it's just 30% bigger. No problem.\n\nTherefore, let's store all time values in the format Date.now()",
                                        "type": "number"
                                      }
                                    },
                                    {
                                      "name": "createdFirstAt",
                                      "required": true,
                                      "schema": {
                                        "fullComment": "in some cases, data can be created before it was created in our system. In this case, use CreatedFirstAt if this information is important.\n\nTime\n\nTime can be stored in various ways but in my experience it is, again, best to keep it simple and just have one way to store time. I can think about this for hours, but my intuition goes towards using the same format as Date.now() because it is a very small format and is easy to read.\n\nIt is the amount of ms since 1970.\n\nI could argue to store it in seconds since 1970 since there are few applications of doing ms, but maybe we do, and it's just 30% bigger. No problem.\n\nTherefore, let's store all time values in the format Date.now()",
                                        "type": "number"
                                      }
                                    },
                                    {
                                      "name": "operationName",
                                      "required": true,
                                      "schema": {
                                        "fullComment": "name of operation the model belongs to\n\n- calculated value (not stored in database)\n- can be `null` or an actual operationName that it was saved at\n- can be `undefined` when you are creating an item, because then it can be set for you",
                                        "type": "null"
                                      }
                                    },
                                    {
                                      "name": "projectRelativePath",
                                      "required": true,
                                      "schema": {
                                        "fullComment": "path to dbfile\n\n- calculated value (not stored in database)\n- relatively from the project (without slash at start)\n- can be `undefined` when you are creating an item, because then it can be set for you",
                                        "type": "string"
                                      }
                                    },
                                    {
                                      "name": "operationRelativePath",
                                      "required": false,
                                      "schema": {
                                        "fullComment": "path to db file\n\n- relatively from the operation root folder (without slash at start)\n- calculated value (not stored in database)\n- can be `undefined` if the db file does not belong to an operation\n- can be `undefined` when you are creating an item, because then it can be set for you",
                                        "type": "string"
                                      }
                                    },
                                    {
                                      "name": "id",
                                      "required": true,
                                      "schema": {
                                        "fullComment": "Should be an unique string By default, you can use `generateId()` to generate a random string of 16 characters. If you wish, you can also use any other string, as long as you are sure it's unique.\n\n# Background Info\n\nazAZ09 characters are easy to copy and provide 62 characters. the goal of an id is to be unique.\n\nthe advantage of a random id compared to an numeric id starting with 1 with auto increment is that you can set them up decentralised.\n\nthe change of duplicate ids gets bigger once you make them shorter the change of finding an existing id gets bigger once you make them shorter\n\nAn Id with 12 characters would provide 3.22e21 combinations.\n\nWhat is the change of duplicate ids? This depends on the amount of identifyable items in the data What is the change of guessing an id? This depends on speed of a brute force attack and the amount of available datapoints. If you can guess 10000 times per second, you can make 864.000.000 guesses. A billion guesses on a dataset of a billion datapoints yields 3226 correct ids on average.\n\nWhy make an id short? I don't know if there's an important reason.\n\nAll in all, I think we should make ids 24 characters by default. This would make it very easy to store, yet, with more than E42 combinations, make it nearly impossible to get duplication or brute force hits.\n\nAn id would look like this:\n\n``` { \"id\": \"sk2EcW9AkZpksk2EcW9AkZpk\" } ```\n\nLooks good to me! Don't think about it and just keep it simple. We can always migrate later to a bigger amount, but I don't see good reason to keep it smaller than this.",
                                        "type": "string"
                                      }
                                    },
                                    {
                                      "name": "categoryStackCalculated",
                                      "required": false,
                                      "schema": {
                                        "fullComment": "In case of jsonSingle storageMethod, the categoryStack is generated by the location of the file in the db model folder in the db folder.\n\nNB: Changing this value when updating/upserting, changes where the item is located!\n\nTaken from the location in the folder of the db-model.\n\nNB: Changing this value when updating/upserting, changes where the item is located!",
                                        "nb": "Changing this value when updating/upserting, changes where the item is located!",
                                        "items": [
                                          {
                                            "schema": {
                                              "type": "string"
                                            },
                                            "name": null
                                          }
                                        ],
                                        "type": "array"
                                      }
                                    }
                                  ],
                                  "type": "object"
                                },
                                "name": "AuthorizationModel"
                              }
                            ],
                            "type": "array"
                          }
                        },
                        {
                          "name": "amountAuthenticationMethodsRequired",
                          "required": false,
                          "schema": {
                            "fullComment": "By default, one is enough, but if this is defined, the users in this group need to use this amount of authentication methods before he/she is authenticated. Must be at least one.",
                            "type": "number"
                          }
                        },
                        {
                          "name": "requiredAuthenticationMethods",
                          "required": false,
                          "schema": {
                            "fullComment": "Optionally, you can specify which authentication methods are required for the whole group",
                            "items": [
                              {
                                "schema": {
                                  "enum": [
                                    "usernamePassword",
                                    "phoneNumber",
                                    "email",
                                    "apple",
                                    "google",
                                    "facebook",
                                    "twitter",
                                    "linkedin",
                                    "github"
                                  ],
                                  "fullComment": "Username + password should be the default\n\nEmail OTP, phone number OTP (sms or call or whatsapp), should be optional 2FA methods\n\nAll others can also act as authentication methods, but the token shouldn't be stored",
                                  "type": "string"
                                },
                                "name": "AuthenticationMethodMethod"
                              }
                            ],
                            "type": "array"
                          }
                        }
                      ],
                      "type": "object"
                    },
                    "name": "Group"
                  }
                ],
                "type": "array"
              }
            },
            {
              "name": "hasAuthorization",
              "required": true,
              "schema": {
                "fullComment": "Device has authorization to the function",
                "type": "boolean"
              }
            },
            {
              "name": "authToken",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "serverContext",
              "required": false,
              "schema": {
                "fullComment": "Original context coming from server.js\n\nNB: due to indexation problems the type has been removed. It can be casted to the `Context` type, which you can import from:\n\n`import { Context } from \"server/typings/common\";`",
                "nb": "due to indexation problems the type has been removed. It can be casted to the `Context` type, which you can import from:",
                "properties": [],
                "type": "object"
              }
            }
          ],
          "type": "object"
        },
        "required": true
      },
      {
        "name": "projectRelativePath",
        "schema": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": true
      }
    ]
  },
  {
    "name": "copyPath",
    "operationName": "writer-functions",
    "parameters": [
      {
        "name": "projectRelativePath",
        "schema": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": true
      }
    ]
  },
  {
    "name": "deleteFileOrFolder",
    "operationName": "writer-functions",
    "parameters": [
      {
        "name": "projectRelativePath",
        "schema": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": true
      }
    ]
  },
  {
    "name": "getFileContents",
    "operationName": "writer-functions",
    "parameters": [
      {
        "name": "projectRelativeFilePath",
        "schema": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": true
      }
    ]
  },
  {
    "name": "movePath",
    "operationName": "writer-functions",
    "parameters": [
      {
        "name": "projectRelativePath",
        "schema": {
          "type": "string",
          "description": "Can be file only for now"
        },
        "simplifiedSchema": {
          "fullComment": "Can be file only for now",
          "type": "string"
        },
        "required": true
      },
      {
        "name": "projectRelativeNewFolderPath",
        "schema": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": false
      }
    ]
  },
  {
    "name": "newFile",
    "operationName": "writer-functions",
    "parameters": [
      {
        "name": "projectRelativeFilePath",
        "schema": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": true
      }
    ]
  },
  {
    "name": "newFolder",
    "operationName": "writer-functions",
    "parameters": [
      {
        "name": "projectRelativeFolderBasePath",
        "schema": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": true
      },
      {
        "name": "folderName",
        "schema": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": false
      }
    ]
  },
  {
    "name": "renameFileOrFolder",
    "operationName": "writer-functions",
    "parameters": [
      {
        "name": "projectRelativePath",
        "schema": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": true
      },
      {
        "name": "newName",
        "schema": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": false
      }
    ]
  },
  {
    "name": "trashFileOrFolder",
    "operationName": "writer-functions",
    "parameters": [
      {
        "name": "projectRelativePath",
        "schema": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": true
      }
    ]
  },
  {
    "name": "shouldDeleteTsModel",
    "operationName": "cleanup-typescript-database",
    "parameters": [
      {
        "name": "tsModel",
        "schema": {
          "anyOf": [
            {
              "$ref": "#/definitions/TsFunction"
            },
            {
              "$ref": "#/definitions/TsComment"
            },
            {
              "$ref": "#/definitions/TsInterface"
            },
            {
              "$ref": "#/definitions/TsBuildError"
            },
            {
              "$ref": "#/definitions/TsLintWarning"
            },
            {
              "$ref": "#/definitions/TsExport"
            },
            {
              "$ref": "#/definitions/TsImport"
            },
            {
              "$ref": "#/definitions/TsVariable"
            }
          ]
        },
        "simplifiedSchema": {
          "properties": [],
          "type": "object"
        },
        "required": true
      },
      {
        "name": "operationName",
        "schema": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": true
      },
      {
        "name": "operationRelativePaths",
        "schema": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "simplifiedSchema": {
          "items": [
            {
              "schema": {
                "type": "string"
              },
              "name": null
            }
          ],
          "type": "array"
        },
        "required": true
      }
    ]
  },
  {
    "name": "getCompileErrors",
    "operationName": "compile-typescript",
    "parameters": [
      {
        "name": "operationBasePath",
        "schema": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": true
      },
      {
        "name": "onlyDependants",
        "schema": {
          "type": "boolean"
        },
        "simplifiedSchema": {
          "type": "boolean"
        },
        "required": false
      },
      {
        "name": "manualProjectRoot",
        "schema": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": false
      }
    ]
  },
  {
    "name": "getTypescriptErrorsFromFiles",
    "operationName": "compile-typescript",
    "parameters": [
      {
        "name": "{\n  filePaths,\n  debug,\n}",
        "schema": {
          "type": "object",
          "properties": {
            "basePath": {
              "type": "string"
            },
            "filePaths": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "compilerOptions": {
              "$ref": "#/definitions/CompilerOptions"
            },
            "packageJson": {
              "$ref": "#/definitions/PackageJson"
            },
            "debug": {
              "type": "boolean"
            }
          },
          "required": [
            "basePath",
            "filePaths",
            "compilerOptions",
            "packageJson"
          ],
          "additionalProperties": false
        },
        "simplifiedSchema": {
          "properties": [
            {
              "name": "basePath",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "filePaths",
              "required": true,
              "schema": {
                "items": [
                  {
                    "schema": {
                      "type": "string"
                    },
                    "name": null
                  }
                ],
                "type": "array"
              }
            },
            {
              "name": "packageJson",
              "required": true,
              "schema": {
                "fullComment": "--- dbStorageMethod: jsonSingle operationRelativePath: package.json\n---",
                "properties": [
                  {
                    "name": "operationName",
                    "required": true,
                    "schema": {
                      "fullComment": "name of operation the model belongs to\n\n- calculated value (not stored in database)\n- can be `null` or an actual operationName that it was saved at\n- can be `undefined` when you are creating an item, because then it can be set for you",
                      "type": "null"
                    }
                  },
                  {
                    "name": "projectRelativePath",
                    "required": true,
                    "schema": {
                      "fullComment": "path to dbfile\n\n- calculated value (not stored in database)\n- relatively from the project (without slash at start)\n- can be `undefined` when you are creating an item, because then it can be set for you",
                      "type": "string"
                    }
                  },
                  {
                    "name": "operationRelativePath",
                    "required": false,
                    "schema": {
                      "fullComment": "path to db file\n\n- relatively from the operation root folder (without slash at start)\n- calculated value (not stored in database)\n- can be `undefined` if the db file does not belong to an operation\n- can be `undefined` when you are creating an item, because then it can be set for you",
                      "type": "string"
                    }
                  },
                  {
                    "name": "path",
                    "required": false,
                    "schema": {
                      "type": "string"
                    }
                  },
                  {
                    "name": "name",
                    "required": false,
                    "schema": {
                      "type": "string"
                    }
                  },
                  {
                    "name": "main",
                    "required": false,
                    "schema": {
                      "type": "string"
                    }
                  },
                  {
                    "name": "source",
                    "required": false,
                    "schema": {
                      "type": "string"
                    }
                  },
                  {
                    "name": "description",
                    "required": false,
                    "schema": {
                      "type": "string"
                    }
                  },
                  {
                    "name": "version",
                    "required": false,
                    "schema": {
                      "type": "string"
                    }
                  },
                  {
                    "name": "private",
                    "required": false,
                    "schema": {
                      "type": "boolean"
                    }
                  },
                  {
                    "name": "author",
                    "required": false,
                    "schema": {
                      "properties": [],
                      "type": "object"
                    }
                  },
                  {
                    "name": "repository",
                    "required": true,
                    "schema": {
                      "properties": [],
                      "type": "object"
                    }
                  },
                  {
                    "name": "homepage",
                    "required": false,
                    "schema": {
                      "type": "string"
                    }
                  },
                  {
                    "name": "bin",
                    "required": false,
                    "schema": {
                      "properties": [],
                      "type": "object"
                    }
                  },
                  {
                    "name": "workspaces",
                    "required": false,
                    "schema": {
                      "items": [
                        {
                          "schema": {
                            "type": "string"
                          },
                          "name": null
                        }
                      ],
                      "type": "array"
                    }
                  },
                  {
                    "name": "scripts",
                    "required": false,
                    "schema": {
                      "properties": [],
                      "type": "object"
                    }
                  }
                ],
                "type": "object"
              }
            },
            {
              "name": "debug",
              "required": false,
              "schema": {
                "type": "boolean"
              }
            }
          ],
          "type": "object"
        },
        "required": true
      }
    ]
  },
  {
    "name": "writeBuildErrors",
    "operationName": "compile-typescript",
    "parameters": [
      {
        "name": "operationBasePath",
        "schema": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": true
      },
      {
        "name": "operationManualProjectRoot",
        "schema": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": false
      },
      {
        "name": "typerepoManualProjectRoot",
        "schema": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": false
      }
    ]
  },
  {
    "name": "getImportedDependencies",
    "operationName": "get-imported-dependencies",
    "parameters": [
      {
        "name": "{\n  operationFolderPath,\n}",
        "schema": {
          "type": "object",
          "properties": {
            "operationFolderPath": {
              "type": "string"
            }
          },
          "required": [
            "operationFolderPath"
          ],
          "additionalProperties": false
        },
        "simplifiedSchema": {
          "properties": [
            {
              "name": "operationFolderPath",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "type": "object"
        },
        "required": true
      }
    ]
  },
  {
    "name": "findAndWriteImportsExports",
    "operationName": "get-imports-exports",
    "parameters": [
      {
        "name": "operationBasePath",
        "schema": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": true
      },
      {
        "name": "manualProjectRoot",
        "schema": {
          "type": "string",
          "description": "Manual project root of the operation where the imports and exports needs to be detected and written to database"
        },
        "simplifiedSchema": {
          "fullComment": "Manual project root of the operation where the imports and exports needs to be detected and written to database",
          "type": "string"
        },
        "required": false
      }
    ]
  },
  {
    "name": "getMissingDependencies",
    "operationName": "get-missing-dependencies",
    "parameters": [
      {
        "name": "{\n  packageJsonPath,\n}",
        "schema": {
          "type": "object",
          "properties": {
            "packageJsonPath": {
              "type": "string"
            }
          },
          "required": [
            "packageJsonPath"
          ],
          "additionalProperties": false
        },
        "simplifiedSchema": {
          "properties": [
            {
              "name": "packageJsonPath",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "type": "object"
        },
        "required": true
      }
    ]
  },
  {
    "name": "generateSchema",
    "operationName": "index-typescript",
    "parameters": [
      {
        "name": "filePath",
        "schema": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": true
      },
      {
        "name": "morphInterfaceInfo",
        "schema": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MorphInterfaceInfo"
          }
        },
        "simplifiedSchema": {
          "items": [
            {
              "schema": {
                "fullComment": "",
                "properties": [
                  {
                    "name": "raw",
                    "required": true,
                    "schema": {
                      "type": "string"
                    }
                  },
                  {
                    "name": "name",
                    "required": true,
                    "schema": {
                      "type": "string"
                    }
                  },
                  {
                    "name": "description",
                    "required": false,
                    "schema": {
                      "type": "string"
                    }
                  },
                  {
                    "name": "extensions",
                    "required": true,
                    "schema": {
                      "items": [
                        {
                          "schema": {
                            "type": "string"
                          },
                          "name": null
                        }
                      ],
                      "type": "array"
                    }
                  },
                  {
                    "name": "isExported",
                    "required": true,
                    "schema": {
                      "type": "boolean"
                    }
                  },
                  {
                    "name": "hasGeneric",
                    "required": true,
                    "schema": {
                      "type": "boolean"
                    }
                  }
                ],
                "type": "object"
              },
              "name": "MorphInterfaceInfo"
            }
          ],
          "type": "array"
        },
        "required": true
      },
      {
        "name": "namedAbsoluteImportNames",
        "schema": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "simplifiedSchema": {
          "items": [
            {
              "schema": {
                "type": "string"
              },
              "name": null
            }
          ],
          "type": "array"
        },
        "required": true
      }
    ]
  },
  {
    "name": "getIndexId",
    "operationName": "index-typescript",
    "parameters": [
      {
        "name": "filePath",
        "schema": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": true
      },
      {
        "name": "name",
        "schema": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": true
      }
    ]
  },
  {
    "name": "getValidatedOperationPathParse",
    "operationName": "index-typescript",
    "parameters": [
      {
        "name": "filePath",
        "schema": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": true
      }
    ]
  },
  {
    "name": "schemaToTsInterface",
    "operationName": "index-typescript",
    "parameters": [
      {
        "name": "filePath",
        "schema": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": true
      },
      {
        "name": "typeName",
        "schema": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": true
      },
      {
        "name": "schema",
        "schema": {
          "$ref": "#/definitions/Schema"
        },
        "simplifiedSchema": {
          "fullComment": "",
          "properties": [
            {
              "name": "$id",
              "required": false,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$ref",
              "required": false,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$comment",
              "required": false,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$defs",
              "required": false,
              "schema": {
                "properties": [],
                "type": "object"
              }
            },
            {
              "name": "type",
              "required": false,
              "schema": {
                "properties": [],
                "type": "object"
              }
            },
            {
              "name": "enum",
              "required": false,
              "schema": {
                "items": [
                  {
                    "schema": {
                      "fullComment": "Primitive type",
                      "properties": [],
                      "type": "object"
                    },
                    "name": "JSONSchema7Type"
                  }
                ],
                "type": "array"
              }
            },
            {
              "name": "const",
              "required": false,
              "schema": {
                "fullComment": "Primitive type",
                "properties": [],
                "type": "object"
              }
            },
            {
              "name": "multipleOf",
              "required": false,
              "schema": {
                "type": "number"
              }
            },
            {
              "name": "maximum",
              "required": false,
              "schema": {
                "type": "number"
              }
            },
            {
              "name": "exclusiveMaximum",
              "required": false,
              "schema": {
                "type": "number"
              }
            },
            {
              "name": "minimum",
              "required": false,
              "schema": {
                "type": "number"
              }
            },
            {
              "name": "exclusiveMinimum",
              "required": false,
              "schema": {
                "type": "number"
              }
            },
            {
              "name": "maxLength",
              "required": false,
              "schema": {
                "type": "number"
              }
            },
            {
              "name": "minLength",
              "required": false,
              "schema": {
                "type": "number"
              }
            },
            {
              "name": "pattern",
              "required": false,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "items",
              "required": false,
              "schema": {
                "properties": [],
                "type": "object"
              }
            },
            {
              "name": "additionalItems",
              "required": false,
              "schema": {
                "fullComment": "JSON Schema v7",
                "properties": [],
                "type": "object"
              }
            },
            {
              "name": "maxItems",
              "required": false,
              "schema": {
                "type": "number"
              }
            },
            {
              "name": "minItems",
              "required": false,
              "schema": {
                "type": "number"
              }
            },
            {
              "name": "uniqueItems",
              "required": false,
              "schema": {
                "type": "boolean"
              }
            },
            {
              "name": "contains",
              "required": false,
              "schema": {
                "circularRefName": "JSONSchema7",
                "properties": [],
                "type": "object"
              }
            },
            {
              "name": "maxProperties",
              "required": false,
              "schema": {
                "type": "number"
              }
            },
            {
              "name": "minProperties",
              "required": false,
              "schema": {
                "type": "number"
              }
            },
            {
              "name": "required",
              "required": false,
              "schema": {
                "items": [
                  {
                    "schema": {
                      "type": "string"
                    },
                    "name": null
                  }
                ],
                "type": "array"
              }
            },
            {
              "name": "properties",
              "required": false,
              "schema": {
                "properties": [],
                "type": "object"
              }
            },
            {
              "name": "patternProperties",
              "required": false,
              "schema": {
                "properties": [],
                "type": "object"
              }
            },
            {
              "name": "additionalProperties",
              "required": false,
              "schema": {
                "fullComment": "JSON Schema v7",
                "properties": [],
                "type": "object"
              }
            },
            {
              "name": "dependencies",
              "required": false,
              "schema": {
                "properties": [],
                "type": "object"
              }
            },
            {
              "name": "propertyNames",
              "required": false,
              "schema": {
                "fullComment": "JSON Schema v7",
                "properties": [],
                "type": "object"
              }
            },
            {
              "name": "if",
              "required": false,
              "schema": {
                "fullComment": "JSON Schema v7",
                "properties": [],
                "type": "object"
              }
            },
            {
              "name": "then",
              "required": false,
              "schema": {
                "fullComment": "JSON Schema v7",
                "properties": [],
                "type": "object"
              }
            },
            {
              "name": "else",
              "required": false,
              "schema": {
                "fullComment": "JSON Schema v7",
                "properties": [],
                "type": "object"
              }
            },
            {
              "name": "allOf",
              "required": false,
              "schema": {
                "items": [
                  {
                    "schema": {
                      "fullComment": "JSON Schema v7",
                      "properties": [],
                      "type": "object"
                    },
                    "name": "JSONSchema7Definition"
                  }
                ],
                "type": "array"
              }
            },
            {
              "name": "anyOf",
              "required": false,
              "schema": {
                "items": [
                  {
                    "schema": {
                      "fullComment": "JSON Schema v7",
                      "properties": [],
                      "type": "object"
                    },
                    "name": "JSONSchema7Definition"
                  }
                ],
                "type": "array"
              }
            },
            {
              "name": "oneOf",
              "required": false,
              "schema": {
                "items": [
                  {
                    "schema": {
                      "fullComment": "JSON Schema v7",
                      "properties": [],
                      "type": "object"
                    },
                    "name": "JSONSchema7Definition"
                  }
                ],
                "type": "array"
              }
            },
            {
              "name": "not",
              "required": false,
              "schema": {
                "fullComment": "JSON Schema v7",
                "properties": [],
                "type": "object"
              }
            },
            {
              "name": "format",
              "required": false,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "contentMediaType",
              "required": false,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "contentEncoding",
              "required": false,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "definitions",
              "required": false,
              "schema": {
                "properties": [],
                "type": "object"
              }
            },
            {
              "name": "title",
              "required": false,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "description",
              "required": false,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "default",
              "required": false,
              "schema": {
                "fullComment": "Primitive type",
                "properties": [],
                "type": "object"
              }
            },
            {
              "name": "readOnly",
              "required": false,
              "schema": {
                "type": "boolean"
              }
            },
            {
              "name": "writeOnly",
              "required": false,
              "schema": {
                "type": "boolean"
              }
            },
            {
              "name": "examples",
              "required": false,
              "schema": {
                "fullComment": "Primitive type",
                "properties": [],
                "type": "object"
              }
            }
          ],
          "type": "object"
        },
        "required": true
      },
      {
        "name": "morphInterfaceInfo",
        "schema": {
          "$ref": "#/definitions/MorphInterfaceInfo"
        },
        "simplifiedSchema": {
          "fullComment": "",
          "properties": [
            {
              "name": "raw",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "name",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "description",
              "required": false,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "extensions",
              "required": true,
              "schema": {
                "items": [
                  {
                    "schema": {
                      "type": "string"
                    },
                    "name": null
                  }
                ],
                "type": "array"
              }
            },
            {
              "name": "isExported",
              "required": true,
              "schema": {
                "type": "boolean"
              }
            },
            {
              "name": "hasGeneric",
              "required": true,
              "schema": {
                "type": "boolean"
              }
            }
          ],
          "type": "object"
        },
        "required": false
      }
    ]
  },
  {
    "name": "preIndexLint",
    "operationName": "lint",
    "parameters": [
      {
        "name": "{\n  operationFolderPath,\n}",
        "schema": {
          "type": "object",
          "properties": {
            "operationFolderPath": {
              "type": "string"
            }
          },
          "required": [
            "operationFolderPath"
          ],
          "additionalProperties": false
        },
        "simplifiedSchema": {
          "properties": [
            {
              "name": "operationFolderPath",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "type": "object"
        },
        "required": true
      }
    ]
  },
  {
    "name": "minifyBuild",
    "operationName": "minify-build",
    "parameters": [
      {
        "name": "{\n  operationName,\n  buildFolderPath,\n}",
        "schema": {
          "type": "object",
          "properties": {
            "operationName": {
              "type": "string"
            },
            "buildFolderPath": {
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "simplifiedSchema": {
          "properties": [
            {
              "name": "operationName",
              "required": false,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "buildFolderPath",
              "required": false,
              "schema": {
                "type": "string"
              }
            }
          ],
          "type": "object"
        },
        "required": true
      }
    ]
  },
  {
    "name": "getAvailableOperationName",
    "operationName": "new-template",
    "parameters": [
      {
        "name": "rootFolderPath",
        "schema": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": true
      },
      {
        "name": "preferredFolderName",
        "schema": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": true
      },
      {
        "name": "manualProjectRoot",
        "schema": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": false
      }
    ]
  },
  {
    "name": "newTemplate",
    "operationName": "new-template",
    "parameters": [
      {
        "name": "type",
        "schema": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": true
      },
      {
        "name": "destinationPath",
        "schema": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": false
      }
    ]
  },
  {
    "name": "installMissingMonorepoDependencies",
    "operationName": "package-scripts",
    "parameters": [
      {
        "name": "{\n  packageJsonPath,\n}",
        "schema": {
          "type": "object",
          "properties": {
            "packageJsonPath": {
              "type": "string"
            }
          },
          "required": [
            "packageJsonPath"
          ],
          "additionalProperties": false
        },
        "simplifiedSchema": {
          "properties": [
            {
              "name": "packageJsonPath",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "type": "object"
        },
        "required": true
      }
    ]
  },
  {
    "name": "getFileIds",
    "operationName": "rebuild-operation",
    "parameters": [
      {
        "name": "{\n  operationFolderPath,\n  pathSuffix,\n  extension,\n}",
        "schema": {
          "type": "object",
          "properties": {
            "operationFolderPath": {
              "type": "string"
            },
            "extension": {
              "anyOf": [
                {
                  "$ref": "#/definitions/SearchableExtension"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/SearchableExtension"
                  }
                }
              ]
            },
            "pathSuffix": {
              "type": "string"
            }
          },
          "required": [
            "operationFolderPath",
            "pathSuffix"
          ],
          "additionalProperties": false
        },
        "simplifiedSchema": {
          "properties": [
            {
              "name": "operationFolderPath",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "extension",
              "required": false,
              "schema": {
                "properties": [],
                "type": "object"
              }
            },
            {
              "name": "pathSuffix",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "type": "object"
        },
        "required": true
      }
    ]
  },
  {
    "name": "getIndexFileIds",
    "operationName": "rebuild-operation",
    "parameters": [
      {
        "name": "operationFolderPath",
        "schema": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": true
      }
    ]
  },
  {
    "name": "getSrcIds",
    "operationName": "rebuild-operation",
    "parameters": [
      {
        "name": "operationFolderPath",
        "schema": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": true
      }
    ]
  },
  {
    "name": "isOperationBuildNeeded",
    "operationName": "rebuild-operation",
    "parameters": [
      {
        "name": "operationBasePath",
        "schema": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": true
      }
    ]
  },
  {
    "name": "isSdkOperation",
    "operationName": "rebuild-operation",
    "parameters": [
      {
        "name": "operationBasePath",
        "schema": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": true
      }
    ]
  },
  {
    "name": "yarnBuild",
    "operationName": "rebuild-operation",
    "parameters": [
      {
        "name": "operationBasePath",
        "schema": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": true
      },
      {
        "name": "config",
        "schema": {
          "type": "object",
          "properties": {
            "rmFirst": {
              "type": "boolean",
              "description": "if true, build folder will be removed first"
            },
            "skipMinify": {
              "type": "boolean"
            }
          },
          "additionalProperties": false
        },
        "simplifiedSchema": {
          "properties": [
            {
              "name": "rmFirst",
              "required": false,
              "schema": {
                "fullComment": "if true, build folder will be removed first",
                "type": "boolean"
              }
            },
            {
              "name": "skipMinify",
              "required": false,
              "schema": {
                "type": "boolean"
              }
            }
          ],
          "type": "object"
        },
        "required": false
      }
    ]
  },
  {
    "name": "renameOperation",
    "operationName": "rename-operation",
    "parameters": [
      {
        "name": "{\n  oldFolderPath,\n  newName,\n}",
        "schema": {
          "type": "object",
          "properties": {
            "oldFolderPath": {
              "type": "string",
              "description": "old folder path. use . or leave empty if you're somewhere in the folder"
            },
            "newName": {
              "type": "string",
              "description": "name to rename the package to"
            }
          },
          "required": [
            "newName"
          ],
          "additionalProperties": false
        },
        "simplifiedSchema": {
          "properties": [
            {
              "name": "oldFolderPath",
              "required": false,
              "schema": {
                "fullComment": "old folder path. use . or leave empty if you're somewhere in the folder",
                "type": "string"
              }
            },
            {
              "name": "newName",
              "required": true,
              "schema": {
                "fullComment": "name to rename the package to",
                "type": "string"
              }
            }
          ],
          "type": "object"
        },
        "required": true
      }
    ]
  },
  {
    "name": "getAllTsMorphSourceFiles",
    "operationName": "ts-morph-util",
    "parameters": [
      {
        "name": "operationBasePath",
        "schema": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": true
      }
    ]
  },
  {
    "name": "getTsMorphProject",
    "operationName": "ts-morph-util",
    "parameters": [
      {
        "name": "operationFolderPath",
        "schema": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": true
      }
    ]
  },
  {
    "name": "textToMp3",
    "operationName": "say",
    "parameters": [
      {
        "name": "options",
        "schema": {
          "type": "object",
          "properties": {
            "filePath": {
              "type": "string",
              "description": "Specify an absolute path to a file with some text"
            },
            "message": {
              "type": "string",
              "description": "message string to be said"
            },
            "speechRate": {
              "type": "number"
            },
            "voice": {
              "type": "string"
            },
            "audioDevice": {
              "type": "string"
            },
            "showProgress": {
              "type": "boolean"
            },
            "interactive": {
              "type": "string"
            },
            "fileFormat": {
              "type": "string"
            },
            "dataFormat": {
              "type": "string"
            },
            "bitRate": {
              "type": "number"
            },
            "quality": {
              "type": "number"
            }
          },
          "additionalProperties": false
        },
        "simplifiedSchema": {
          "properties": [
            {
              "name": "filePath",
              "required": false,
              "schema": {
                "fullComment": "Specify an absolute path to a file with some text",
                "type": "string"
              }
            },
            {
              "name": "message",
              "required": false,
              "schema": {
                "fullComment": "message string to be said",
                "type": "string"
              }
            },
            {
              "name": "speechRate",
              "required": false,
              "schema": {
                "type": "number"
              }
            },
            {
              "name": "voice",
              "required": false,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "audioDevice",
              "required": false,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "showProgress",
              "required": false,
              "schema": {
                "type": "boolean"
              }
            },
            {
              "name": "interactive",
              "required": false,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "fileFormat",
              "required": false,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "dataFormat",
              "required": false,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "bitRate",
              "required": false,
              "schema": {
                "type": "number"
              }
            },
            {
              "name": "quality",
              "required": false,
              "schema": {
                "type": "number"
              }
            }
          ],
          "type": "object"
        },
        "required": true
      },
      {
        "name": "absoluteOutputFilePath",
        "schema": {
          "type": "string",
          "description": "Absolute path to the mp3"
        },
        "simplifiedSchema": {
          "fullComment": "Absolute path to the mp3",
          "type": "string"
        },
        "required": true
      }
    ]
  },
  {
    "name": "getFileType",
    "operationName": "file-icons",
    "parameters": [
      {
        "name": "fullPath",
        "schema": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": true
      }
    ]
  },
  {
    "name": "getUrlFromRelativeUrl",
    "operationName": "markdown",
    "parameters": [
      {
        "name": "relativeUrl",
        "schema": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": true
      },
      {
        "name": "relativeUrlStrategy",
        "schema": {
          "type": "string",
          "enum": [
            "api",
            "static"
          ]
        },
        "simplifiedSchema": {
          "enum": [
            "api",
            "static"
          ],
          "type": "string"
        },
        "required": true
      },
      {
        "name": "projectRelativeBaseFolderPath",
        "schema": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": true
      },
      {
        "name": "projectRelativeMarkdownFilePath",
        "schema": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": true
      }
    ]
  },
  {
    "name": "useExpanded",
    "operationName": "nested-menu",
    "parameters": [
      {
        "name": "queryPath",
        "schema": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": false
      }
    ]
  },
  {
    "name": "queryPathsArrayToNestedPathObject",
    "operationName": "recursive-util",
    "parameters": [
      {
        "name": "queryPaths",
        "schema": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "simplifiedSchema": {
          "items": [
            {
              "schema": {
                "type": "string"
              },
              "name": null
            }
          ],
          "type": "array"
        },
        "required": true
      }
    ]
  },
  {
    "name": "reduceQueryPathsRecursively",
    "operationName": "recursive-util",
    "parameters": [
      {
        "name": "queryPaths",
        "schema": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "simplifiedSchema": {
          "items": [
            {
              "schema": {
                "type": "string"
              },
              "name": null
            }
          ],
          "type": "array"
        },
        "required": true
      },
      {
        "name": "initialValue",
        "schema": {
          "$ref": "#/definitions/NestedPathObject"
        },
        "simplifiedSchema": {
          "fullComment": "A different way to represent a path array in a nested object of folders\n\n{  \"folderName\": {    \"file1\": null,    \"file2\": null  },  \"folderName2\": {    \"file1\": null,    \"file2\": null  } }",
          "properties": [],
          "type": "object"
        },
        "required": true
      }
    ]
  },
  {
    "name": "getDbPath",
    "operationName": "geo-parse",
    "parameters": [
      {
        "name": "dbRelativePath",
        "schema": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": true
      }
    ]
  },
  {
    "name": "trimSlashes",
    "operationName": "js-util",
    "parameters": [
      {
        "name": "absoluteOrRelativePath",
        "schema": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": true
      }
    ]
  },
  {
    "name": "createLinkedinPost",
    "operationName": "linkedin-controller",
    "parameters": [
      {
        "name": "{ message, assetProjectRelativeFilePath, isTimelinePost }",
        "schema": {
          "type": "object",
          "properties": {
            "message": {
              "type": "string",
              "description": "the message to create the automated post with"
            },
            "assetProjectRelativeFilePath": {
              "type": "string",
              "description": "images/videos list to add to the message"
            },
            "isTimelinePost": {
              "type": "boolean",
              "description": "Differentiate timeline is timeline post or group post"
            }
          },
          "required": [
            "message",
            "isTimelinePost"
          ],
          "additionalProperties": false
        },
        "simplifiedSchema": {
          "properties": [
            {
              "name": "message",
              "required": true,
              "schema": {
                "fullComment": "the message to create the automated post with",
                "type": "string"
              }
            },
            {
              "name": "assetProjectRelativeFilePath",
              "required": false,
              "schema": {
                "fullComment": "images/videos list to add to the message",
                "type": "string"
              }
            },
            {
              "name": "isTimelinePost",
              "required": true,
              "schema": {
                "fullComment": "Differentiate timeline is timeline post or group post",
                "type": "boolean"
              }
            }
          ],
          "type": "object"
        },
        "required": true
      },
      {
        "name": "{ dryrun }",
        "schema": {
          "type": "object",
          "properties": {
            "dryrun": {
              "type": "boolean"
            }
          },
          "additionalProperties": false
        },
        "simplifiedSchema": {
          "properties": [
            {
              "name": "dryrun",
              "required": false,
              "schema": {
                "type": "boolean"
              }
            }
          ],
          "type": "object"
        },
        "required": true
      }
    ]
  },
  {
    "name": "getAbsolutePathMdFileName",
    "operationName": "social-media-node",
    "parameters": [
      {
        "name": "absolutePath",
        "schema": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": true
      },
      {
        "name": "omitExtention",
        "schema": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": true
      }
    ]
  },
  {
    "name": "getSubExtensions",
    "operationName": "social-media-node",
    "parameters": [
      {
        "name": "absolutePath",
        "schema": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": true
      }
    ]
  },
  {
    "name": "hasSubExtension",
    "operationName": "social-media-node",
    "parameters": [
      {
        "name": "absolutePath",
        "schema": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": true
      },
      {
        "name": "subExtension",
        "schema": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": true
      }
    ]
  }
]