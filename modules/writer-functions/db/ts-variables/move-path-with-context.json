{
  "createdAt": 1678043317146,
  "updatedAt": 1678043317146,
  "deletedAt": 0,
  "createdFirstAt": 1678043317146,
  "classification": "const",
  "comments": [],
  "isExported": true,
  "name": "movePathWithContext",
  "slug": "move-path-with-context",
  "operationRelativeTypescriptFilePath": "src/movePathWithContext.ts",
  "type": {
    "rawType": "import(\"/Users/clarity/os/operations/tools/purpose/codebase-introspection/functions/function-types/build/FileFunction\").FileFunction<string, import(\"/Users/clarity/os/operations/tools/purpose/codebase-introspection/functions/function-types/build/StandardResponse\").StandardResponse>",
    "typeDefinition": {
      "type": "object",
      "properties": {
        "config": {},
        "isEnabled": {
          "type": "object",
          "properties": {}
        }
      },
      "required": [
        "config"
      ],
      "optional": false
    },
    "typeCoverage": 0,
    "isArray": false,
    "isEnum": false,
    "isObject": true,
    "isPrimitive": false,
    "isEnumLiteral": false,
    "simplifiedSchema": {
      "properties": [
        {
          "name": "config",
          "required": true,
          "schema": {
            "properties": [],
            "type": "object"
          }
        },
        {
          "name": "isEnabled",
          "required": false,
          "schema": {
            "properties": [],
            "type": "object"
          }
        }
      ],
      "type": "object"
    }
  },
  "value": "async (\n  functionContext: FunctionContext,\n  /**\n   * Can be file only for now\n   */\n  projectRelativePath: string,\n  projectRelativeNewFolderPath?: string\n): Promise<{ isSuccessful: boolean; message: string }> => {\n  const projectRoot = getProjectRoot();\n  if (!projectRoot) {\n    return { isSuccessful: false, message: \"No project root found\" };\n  }\n\n  if (!projectRelativeNewFolderPath) {\n    return { isSuccessful: false, message: \"No path given\" };\n  }\n  const absolutePath = path.join(projectRoot, projectRelativePath);\n\n  if (!fs.existsSync(absolutePath)) {\n    return {\n      isSuccessful: false,\n      message: \"This file or folder doesn't exist\",\n    };\n  }\n\n  const newAbsolutePath = path.join(\n    projectRoot,\n    projectRelativeNewFolderPath,\n    path.parse(absolutePath).base\n  );\n\n  if (fs.existsSync(newAbsolutePath)) {\n    return { isSuccessful: false, message: \"File or folder already exists\" };\n  }\n\n  const oldPlaceAuthorization = await getFsAuthorizationWithContext(\n    functionContext,\n    projectRelativePath\n  );\n  const newPlaceAuthorization = await getFsAuthorizationWithContext(\n    functionContext,\n    projectRelativeNewFolderPath\n  );\n  if (!oldPlaceAuthorization.canWrite || !newPlaceAuthorization.canWrite) {\n    return { isSuccessful: false, message: \"You're not allowed to do this\" };\n  }\n\n  await fs.rename(absolutePath, newAbsolutePath);\n\n  return { isSuccessful: true, message: \"Moved\" };\n}",
  "description": "",
  "id": "msdtxculfuuogodnyjbgpevi"
}