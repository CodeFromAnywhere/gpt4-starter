{
  "createdAt": 1678043334903,
  "updatedAt": 1678043334903,
  "deletedAt": 0,
  "createdFirstAt": 1678043334903,
  "classification": "const",
  "comments": [],
  "isExported": true,
  "name": "trashFileOrFolderWithContext",
  "slug": "trash-file-or-folder-with-context",
  "operationRelativeTypescriptFilePath": "src/trashFileOrFolderWithContext.ts",
  "type": {
    "rawType": "import(\"/Users/clarity/os/operations/tools/purpose/codebase-introspection/functions/function-types/build/FileFunction\").FileFunction<undefined, import(\"/Users/clarity/os/operations/tools/purpose/codebase-introspection/functions/function-types/build/StandardResponse\").StandardResponse>",
    "typeDefinition": {
      "type": "object",
      "properties": {
        "config": {},
        "isEnabled": {
          "type": "object",
          "properties": {}
        }
      },
      "required": [
        "config"
      ],
      "optional": false
    },
    "typeCoverage": 0,
    "isArray": false,
    "isEnum": false,
    "isObject": true,
    "isPrimitive": false,
    "isEnumLiteral": false,
    "simplifiedSchema": {
      "properties": [
        {
          "name": "config",
          "required": true,
          "schema": {
            "properties": [],
            "type": "object"
          }
        },
        {
          "name": "isEnabled",
          "required": false,
          "schema": {
            "properties": [],
            "type": "object"
          }
        }
      ],
      "type": "object"
    }
  },
  "value": "async (\n  functionContext: FunctionContext,\n  projectRelativePath: string\n): Promise<{ isSuccessful: boolean; message: string }> => {\n  const projectRoot = getProjectRoot();\n  if (!projectRoot) {\n    return { isSuccessful: false, message: \"No project root found\" };\n  }\n\n  const absolutePath = path.join(projectRoot, projectRelativePath);\n\n  if (!fs.existsSync(absolutePath)) {\n    return {\n      isSuccessful: false,\n      message: \"This file or folder doesn't exist\",\n    };\n  }\n\n  const authorization = await getFsAuthorizationWithContext(\n    functionContext,\n    projectRelativePath\n  );\n  if (!authorization.canWrite) {\n    return { isSuccessful: false, message: \"You're not allowed to do this\" };\n  }\n  // await import(\"trash\").then((trash) => trash.default(absolutePath));\n\n  //await fs.rm(absolutePath, { recursive: true });\n\n  return { isSuccessful: true, message: \"Removed\" };\n}",
  "description": "NB: only would work with an ESM module, but I don't have time for this now. Later this could replace `deleteFileOrFolder`",
  "id": "gnmkicojmhramtlfgmvbfeni"
}