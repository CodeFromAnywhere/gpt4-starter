{
  "createdAt": 1678043337281,
  "updatedAt": 1678043337281,
  "deletedAt": 0,
  "createdFirstAt": 1678043337281,
  "isApiExposed": false,
  "isExported": true,
  "explicitTypeName": "FileFunction<{\n  [key: string]: string;\n}>",
  "operationRelativeTypescriptFilePath": "src/updateFrontmatterWithContext.ts",
  "commentsInside": [],
  "rawText": " async (\n  functionContext: FunctionContext,\n  projectRelativePath: string,\n  frontmatter\n): Promise<{ isSuccessful: boolean; message: string }> => {\n  const projectRoot = getProjectRoot();\n  if (!projectRoot) {\n    return {\n      isSuccessful: false,\n      message: \"No projectroot\",\n    };\n  }\n\n  const absolutePath = path.join(projectRoot, projectRelativePath);\n\n  const exists = fs.existsSync(absolutePath);\n  if (!exists) {\n    return { isSuccessful: false, message: \"File/folder doensn't exist\" };\n  }\n\n  const authorization = await getFsAuthorizationWithContext(\n    functionContext,\n    projectRelativePath\n  );\n  if (!authorization.canWrite) {\n    return { isSuccessful: false, message: \"You're not allowed to do this\" };\n  }\n\n  const pathStats = await fs.stat(absolutePath);\n\n  const isFolder = pathStats.isDirectory();\n\n  const finalAbsolutePath = isFolder\n    ? path.join(absolutePath, \"readme.md\")\n    : absolutePath;\n\n  // merge frontmatter with old frontmatter\n\n  const existsFinal = fs.existsSync(finalAbsolutePath);\n\n  const markdownParse = existsFinal\n    ? await readMarkdownFile(finalAbsolutePath)\n    : null;\n  const oldFrontmatter: Frontmatter = existsFinal\n    ? markdownParse?.parameters || {}\n    : {};\n\n  const newFrontmatter: Frontmatter = { ...oldFrontmatter, ...frontmatter };\n\n  const newMarkdownParse: MarkdownParse = markdownParse\n    ? {\n        ...markdownParse,\n        parameters: newFrontmatter,\n      }\n    : {\n        parameters: newFrontmatter,\n        raw: \"\",\n      };\n\n  const string = markdownParseToMarkdownString(newMarkdownParse);\n\n  await fs.writeFile(finalAbsolutePath, string, \"utf8\");\n  return { isSuccessful: true, message: \"Updated\" };\n}",
  "name": "updateFrontmatterWithContext",
  "slug": "update-frontmatter-with-context",
  "parameters": [],
  "description": "Update frontmatter from a markdownfile by overwriting it, keeping old values that you don't change\n\nIf you provide a folder as projectRelativePath, it stores it to readme.md in that folder, even if that doens't exist.",
  "returnType": {
    "rawType": "Promise<{ isSuccessful: boolean; message: string; }>",
    "typeCoverage": 0,
    "isArray": false,
    "isEnum": false,
    "isObject": false,
    "isPrimitive": false,
    "isEnumLiteral": false
  },
  "maxIndentationDepth": 4,
  "size": {
    "characters": 1907,
    "lines": 66,
    "bytes": 1907,
    "bytesPerCharacter": 1,
    "charactersPerLine": 29,
    "linesPerFile": 66,
    "numberOfFiles": 1
  },
  "id": "puqehsxgsbvvlgydwcygmdml"
}