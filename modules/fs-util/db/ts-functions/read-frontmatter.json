{
  "createdAt": 1678041961297,
  "updatedAt": 1678041961297,
  "deletedAt": 0,
  "createdFirstAt": 1678041961297,
  "isApiExposed": false,
  "isExported": true,
  "operationRelativeTypescriptFilePath": "src/readFrontmatter.ts",
  "commentsInside": [],
  "rawText": " async (absoluteFilePath: string) => {\n  if (!fs.existsSync(absoluteFilePath)) return;\n  if (path.parse(absoluteFilePath).ext.toLowerCase() !== \".md\") {\n    return;\n  }\n  let foundFrontmatterStart = false;\n  let foundFrontmatterEnd = false;\n\n  const frontmatter: Frontmatter = {};\n\n  await readFilePerLine(absoluteFilePath, (line, close) => {\n    if (foundFrontmatterEnd) return;\n    // BASE CASE: first line\n    if (!foundFrontmatterStart) {\n      if (line === \"---\") {\n        foundFrontmatterStart = true;\n        // Next line\n        return;\n      } else {\n        foundFrontmatterEnd = true;\n        close();\n        return;\n      }\n    }\n\n    // BASE CASE: last line\n    if (line === \"---\") {\n      close();\n      foundFrontmatterEnd = true;\n      return;\n    }\n\n    // CASE: somewhere in the middle, could be a key-value. If not a key-value\n    const [key, value] = line.split(\":\").map((x) => x.trim());\n    if (value === undefined) {\n      if (key !== undefined && key !== \"\") {\n        // If there is a key without a value (no \":\") it seems a syntax error\n        close();\n      }\n      return;\n    }\n\n    frontmatter[key] = value;\n  });\n\n  return frontmatter;\n}",
  "name": "readFrontmatter",
  "slug": "read-frontmatter",
  "parameters": [
    {
      "name": "absoluteFilePath",
      "schema": {
        "type": "string"
      },
      "simplifiedSchema": {
        "type": "string"
      },
      "required": true
    }
  ],
  "description": "Attempt to make a hyper efficient way to read frontmatter at the beginning of a file.\n\nShould close if:\n\n- there's no frontmatter dashes at the first line\n- after the frontmatter ends (second frontmatter dashes line)\n- after finding a syntax error in the frontmatter",
  "returnType": {
    "rawType": "unknown",
    "typeCoverage": 0,
    "isArray": false,
    "isEnum": false,
    "isObject": false,
    "isPrimitive": false,
    "isEnumLiteral": false
  },
  "maxIndentationDepth": 4,
  "size": {
    "characters": 1437,
    "lines": 53,
    "bytes": 1437,
    "bytesPerCharacter": 1,
    "charactersPerLine": 27,
    "linesPerFile": 53,
    "numberOfFiles": 1
  },
  "id": "ycnfxlmjlcedudtkakbyrkag"
}