{
  "createdAt": 1673853210091,
  "updatedAt": 1673853210091,
  "deletedAt": 0,
  "createdFirstAt": 1673853210091,
  "isApiExposed": false,
  "isExported": true,
  "operationRelativeTypescriptFilePath": "src/readCsvFile.ts",
  "commentsInside": [],
  "rawText": " async <T extends CsvItemType>(\n  filePath: Path | undefined\n): Promise<T[] | null> => {\n  if (!filePath) return null;\n  // TODO: is this needed?\n  if (!fs.existsSync(filePath)) return null;\n\n  const readable = await canRead(filePath);\n  if (!readable) return null;\n\n  const fileBuffer = await fs.readFile(filePath);\n  const parsed = parse(fileBuffer, { columns: true }) as T[];\n\n  return parsed;\n}",
  "name": "readCsvFile",
  "slug": "read-csv-file",
  "parameters": [
    {
      "name": "filePath",
      "schema": {
        "$ref": "#/definitions/Path"
      },
      "simplifiedSchema": {
        "fullComment": "unlike PathLike, this is only a string\n\nFor now, we don't have a clear convention whether or not this string should be absolute or anything.",
        "type": "string"
      },
      "required": false
    }
  ],
  "description": "Reads and parses CSV file that has columns\n\nspecify a generic of what type of item the file contains an array of",
  "returnType": {
    "rawType": "Promise<T[] | null>",
    "typeCoverage": 0,
    "isArray": false,
    "isEnum": false,
    "isObject": false,
    "isPrimitive": false,
    "isEnumLiteral": false
  },
  "maxIndentationDepth": 1,
  "size": {
    "characters": 510,
    "lines": 17,
    "bytes": 510,
    "bytesPerCharacter": 1,
    "charactersPerLine": 30,
    "linesPerFile": 17,
    "numberOfFiles": 1
  },
  "id": "opxksrwrhislcklzxvcgmeqf"
}