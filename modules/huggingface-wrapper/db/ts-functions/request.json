{
  "createdAt": 1678331052092,
  "updatedAt": 1678331052092,
  "deletedAt": 0,
  "createdFirstAt": 1678331052092,
  "isApiExposed": false,
  "isExported": true,
  "operationRelativeTypescriptFilePath": "src/huggingFaceInference.ts",
  "commentsInside": [],
  "rawText": " async (config: HuggingfaceConfig) => {\n  const wavPath = config.contentAbsoluteFilePath?.endsWith(\".wav\")\n    ? config.contentAbsoluteFilePath\n    : config.contentAbsoluteFilePath\n    ? // presumably an mp3 or other audiofile, convert to wav first.\n      await compressConvert(config.contentAbsoluteFilePath, {\n        is16bitWav: true,\n        targetFormat: \"wav\",\n      })\n    : undefined;\n\n  const url = `https://api-inference.huggingface.co/models/${config.model}`;\n\n  const data =\n    config.isAudio && wavPath\n      ? String(fs.readFileSync(wavPath))\n      : config.contentAbsoluteFilePath\n      ? String(fs.readFileSync(config.contentAbsoluteFilePath))\n      : config.text;\n\n  const returned = await fetch(url, {\n    method: \"POST\",\n    body: data,\n    headers: { Authorization: `Bearer ${config.apiKey}` },\n  }).catch((err) => {\n    throw err; // Error caused by fetch\n  });\n\n  console.log({ statusText: returned.statusText });\n  try {\n    const obj = await returned.json();\n\n    return obj;\n  } catch (e) {\n    console.log(`parsing response error huggingface`);\n  }\n}",
  "name": "request",
  "slug": "request",
  "parameters": [
    {
      "name": "config",
      "schema": {
        "$ref": "#/definitions/HuggingfaceConfig"
      },
      "simplifiedSchema": {
        "fullComment": "",
        "properties": [
          {
            "name": "text",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "contentAbsoluteFilePath",
            "required": false,
            "schema": {
              "fullComment": "If this is given, will be used instead of text",
              "type": "string"
            }
          },
          {
            "name": "isAudio",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "apiKey",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "model",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "type": "object"
      },
      "required": true
    }
  ],
  "description": "",
  "returnType": {
    "rawType": "unknown",
    "typeCoverage": 0,
    "isArray": false,
    "isEnum": false,
    "isObject": false,
    "isPrimitive": false,
    "isEnumLiteral": false
  },
  "maxIndentationDepth": 4,
  "size": {
    "characters": 1077,
    "lines": 37,
    "bytes": 1077,
    "bytesPerCharacter": 1,
    "charactersPerLine": 29,
    "linesPerFile": 37,
    "numberOfFiles": 1
  },
  "id": "gkbvormfzzccnoefgoecudqo"
}