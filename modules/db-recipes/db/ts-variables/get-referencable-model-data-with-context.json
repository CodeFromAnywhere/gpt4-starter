{
  "createdAt": 1677580347843,
  "updatedAt": 1677580347843,
  "deletedAt": 0,
  "createdFirstAt": 1677580347843,
  "classification": "const",
  "comments": [],
  "isExported": true,
  "name": "getReferencableModelDataWithContext",
  "slug": "get-referencable-model-data-with-context",
  "operationRelativeTypescriptFilePath": "src/getReferencableModelData.ts",
  "type": {
    "rawType": "(functionContext: import(\"/Users/clarity/os/operations/tools/purpose/codebase-introspection/functions/function-types/build/FunctionContext\").FunctionContext, dbModelName: keyof import(\"/Users/clarity/os/operations/tools/generated/sdk-db/build/sdk-db\").DbModels) => unknown",
    "typeDefinition": {
      "type": "object",
      "properties": {},
      "optional": false
    },
    "typeCoverage": 0,
    "isArray": false,
    "isEnum": false,
    "isObject": true,
    "isPrimitive": false,
    "isEnumLiteral": false,
    "simplifiedSchema": {
      "properties": [],
      "type": "object"
    }
  },
  "value": "async (\n  functionContext: FunctionContext,\n  dbModelName: keyof DbModels\n) => {\n  if (!dbModelName) {\n    return [];\n  }\n  const canRead = await hasDataPermissions(functionContext, dbModelName, [\"r\"]);\n\n  if (!canRead) {\n    return [];\n  }\n  const referencableModelData = (await db.get(dbModelName)).map(\n    (item: AugmentedAnyModelType) => ({\n      id: item.id,\n      name: item.name,\n      slug: item.slug,\n      categoryStack: item.categoryStack,\n    })\n  );\n\n  return referencableModelData;\n}",
  "description": "Get referencableModelData for a single DbModel.\n\nNB: this does not get the items that can be referenced in that model!\n\nFor getting all required `ReferencableModelData` for the prop in `SimplifiedSchemaForm`, use `useGetReferencableModelData`.",
  "id": "locysfdoiruvxnqxzlasxnxr"
}