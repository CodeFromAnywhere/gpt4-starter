{
  "createdAt": 1677580336900,
  "updatedAt": 1677580336900,
  "deletedAt": 0,
  "createdFirstAt": 1677580336900,
  "classification": "const",
  "comments": [],
  "isExported": true,
  "name": "getDbModelMetadataWithContext",
  "slug": "get-db-model-metadata-with-context",
  "operationRelativeTypescriptFilePath": "src/getDbModelMetadata.ts",
  "type": {
    "rawType": "(functionContext: import(\"/Users/clarity/os/operations/tools/purpose/codebase-introspection/functions/function-types/build/FunctionContext\").FunctionContext, modelName: string | undefined) => Promise<{ tsInterface?: import(\"/Users/clarity/os/operations/tools/types/code-types/build/TsInterface\").TsInterface | undefined; datasets?: import(\"/Users/clarity/os/operations/tools/types/code-types/build/Dataset\").Dataset[] | undefined; projectRelativeStorageFilePath?: string | undefined; isSuccessful?: boolean | undefined; message?: string | undefined; }>",
    "typeDefinition": {
      "type": "object",
      "properties": {},
      "optional": false
    },
    "typeCoverage": 0,
    "isArray": false,
    "isEnum": false,
    "isObject": true,
    "isPrimitive": false,
    "isEnumLiteral": false,
    "simplifiedSchema": {
      "properties": [],
      "type": "object"
    }
  },
  "value": "async (\n  functionContext: FunctionContext,\n  modelName: string | undefined\n): Promise<{\n  tsInterface?: TsInterface;\n  datasets?: Dataset[];\n  projectRelativeStorageFilePath?: string;\n  isSuccessful?: boolean;\n  message?: string;\n}> => {\n  if (!modelName) return {};\n  if (!([...dbModelKeys] as string[]).includes(modelName)) {\n    return {\n      isSuccessful: false,\n      message: \"You're not allowed to know anything from this model\",\n    };\n  }\n\n  const canReadMetadata = await hasDataPermissions(\n    functionContext,\n    modelName as keyof DbModels,\n    [\"i\"]\n  );\n\n  if (!canReadMetadata) {\n    return {\n      isSuccessful: false,\n      message: \"You're not allowed to know anything from this model\",\n    };\n  }\n  const realModelName = modelName as DbModelEnum;\n\n  const mergedConfig: MergedQueryConfig = getMergedQueryConfig(realModelName);\n  const projectRelativeStorageFilePath = (\n    await getDatabaseFiles(realModelName, mergedConfig)\n  ).map((x) => x.projectRelativePath)[0];\n\n  const indexPath = sdkInterfacePaths[realModelName];\n  const tsInterface =\n    (await readProjectRelativeJsonFile<TsInterface>(indexPath)) || undefined;\n\n  const allDatasets = await db.get(\"Dataset\");\n  const datasets = allDatasets.filter((x) => x.modelName === realModelName);\n\n  return { tsInterface, datasets, projectRelativeStorageFilePath };\n}",
  "description": "",
  "id": "qlhpkchrkpvowuyyrmbvibys"
}