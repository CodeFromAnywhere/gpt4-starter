[
  {
    "createdAt": 1678331141759,
    "updatedAt": 1678331141759,
    "deletedAt": 0,
    "createdFirstAt": 1678331141759,
    "name": "Comment",
    "slug": "comment",
    "operationRelativeTypescriptFilePath": "src/receivePaymentUpdateWithContextRaw.ts",
    "comment": "This is where payment updates come in\n\nSet your stripe webhook to:\n\n`https://yourapi.com/function/receiveMessageWithContextRaw`\n\nExample response we are looking for:\n\n\n```json\n{\neventType: 'checkout.session.completed',\npaymentIntent: {\nid: 'cs_live_a1UZF4BGbEfOGyWwgG6FVZyvUSD4i17QhtS9tJ0UVr6jXtsYTLi96YejAA',\nobject: 'checkout.session',\nafter_expiration: null,\nallow_promotion_codes: null,\namount_subtotal: 50,\namount_total: 50,\nautomatic_tax: { enabled: false, status: null },\nbilling_address_collection: null,\ncancel_url: 'https://findclarity.ai',\nclient_reference_id: null,\nconsent: null,\nconsent_collection: null,\ncreated: 1677971110,\ncurrency: 'eur',\ncustom_fields: [],\ncustom_text: { shipping_address: null, submit: null },\ncustomer: null,\ncustomer_creation: 'if_required',\ncustomer_details: {\naddress: [Object],\nemail: 'xxxx',\nname: 'xzxzzz',\nphone: null,\ntax_exempt: 'none',\ntax_ids: []\n},\ncustomer_email: null,\nexpires_at: 1678057510,\ninvoice: null,\ninvoice_creation: { enabled: false, invoice_data: [Object] },\nlivemode: true,\nlocale: null,\nmetadata: { personId: 'blablabla' },\nmode: 'payment',\npayment_intent: 'pi_3Mi48uCL0Yranfl402OUoqpD',\npayment_link: null,\npayment_method_collection: 'always',\npayment_method_options: {},\npayment_method_types: [ 'card', 'bancontact', 'ideal' ],\npayment_status: 'paid',\nphone_number_collection: { enabled: false },\nrecovered_from: null,\nsetup_intent: null,\nshipping_address_collection: null,\nshipping_options: [],\nstatus: 'complete',\nsubmit_type: null,\nsubscription: null,\nsuccess_url: 'https://findclarity.ai',\ntotal_details: { amount_discount: 0, amount_shipping: 0, amount_tax: 0 },\nurl: null,\nshipping_cost: null,\nshipping_details: null\n}\n}\n```",
    "rawStatement": "export const receivePaymentUpdateWithContextRaw = async (\n  serverContext: Context\n) => {\n  const rawBody = (serverContext.req as any).rawBody;\n\n  const persona = await getPrimaryPersona();\n  if (!persona) {\n    return {\n      isSuccessful: false,\n      message: \"No persona\",\n    };\n  }\n  if (\n    !persona.stripeWebhookSigningSecret ||\n    !persona.stripeSecret ||\n    !persona.stripePublishableKey\n  ) {\n    return {\n      isSuccessful: false,\n      message: \"No stripe credentials\",\n    };\n  }\n\n  const stripe = new Stripe(persona.stripeSecret, { apiVersion: \"2022-11-15\" });\n\n  const stripeSignature = serverContext.headers[\"stripe-signature\"];\n\n  let event;\n\n  const isDebugInput = false;\n  if (isDebugInput) {\n    console.log(\"Received a webhook with data:\", {\n      body: rawBody,\n      stripeSignature,\n      secret: persona.stripeWebhookSigningSecret,\n    });\n  }\n\n  try {\n    event = stripe.webhooks.constructEvent(\n      rawBody,\n      stripeSignature,\n      persona.stripeWebhookSigningSecret\n    );\n  } catch (err) {\n    console.warn(`Error web hook`, err);\n\n    serverContext.res.status(400).send(`Webhook Error: ${String(err)}`);\n\n    return {\n      message: \"Webhook error\",\n      isSuccessful: false,\n    };\n  }\n\n  if (event.type !== \"checkout.session.completed\") {\n    //not interested in all other events...\n    if (isDebugInput) {\n      console.log(event.type, event.data.object);\n    }\n    return {\n      isSuccessful: true,\n      message: \"Other event\",\n    };\n  }\n  //  console.log({ eventType: event.type, paymentIntent });\n  const paymentIntent = event.data.object as {\n    amount_subtotal: number;\n    amount_total: number;\n    currency: string;\n    customer_details: {\n      address: any;\n      email: string;\n      name: string;\n      phone: string | null;\n    };\n    metadata?: { personId: string };\n    payment_status: string;\n  };\n\n  if (paymentIntent.payment_status !== \"paid\") {\n    return { isSuccessful: false, message: \"Wrong status (not paid)\" };\n  }\n\n  if (!paymentIntent.metadata?.personId) {\n    return {\n      isSuccessful: false,\n      message: \"Found no person-id in your metadata\",\n    };\n  }\n\n  if (paymentIntent.currency !== \"eur\") {\n    return { isSuccessful: false, message: \"Payment must be in euro\" };\n  }\n\n  // NB: we have a payment that is paid, from a person with an ID, currency EURO\n\n  // NB: deduct transaction cost from actual credit\n  // TODO: later, add this to the `metadata` so it can be custom for different payment plans, promotions, etc.\n\n  const transactionCostCents = 29;\n  const addedCredit =\n    (paymentIntent.amount_subtotal - transactionCostCents) / 100;\n\n  const updateResult = await db.update(\n    \"Person\",\n    (item) => item.id === paymentIntent.metadata?.personId,\n    (item) => {\n      const newCredit = (item.credit || 0) + addedCredit;\n      return { ...item, credit: newCredit };\n    }\n  );\n\n  const person = (await db.get(\"Person\")).find(\n    (x) => x.id === paymentIntent.metadata?.personId\n  );\n\n  if (person?.phoneNumber) {\n    sendTwilioMessage(\n      person.phoneNumber,\n      `Your payment was successful. You have received ${addedCredit} credits.`,\n      { persona }\n    );\n\n    // TODO: do the previous message again...\n  }\n\n  // Return a 200 response to acknowledge receipt of the event\n  return {\n    isSuccessful: true,\n    message: \"You paid\",\n  };\n};",
    "parameters": {},
    "types": [],
    "firstLine": 6,
    "lastLine": 77,
    "id": "ukqjjystfhenlkexrfkytxlc"
  }
]