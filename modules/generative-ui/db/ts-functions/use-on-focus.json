{
  "createdAt": 1678041424345,
  "updatedAt": 1678041424345,
  "deletedAt": 0,
  "createdFirstAt": 1678041424345,
  "isApiExposed": false,
  "isExported": true,
  "operationRelativeTypescriptFilePath": "src/useOnFocus.ts",
  "commentsInside": [],
  "rawText": " () => {\n  const onFocus = async () => {\n    const [customUrl, setCustomUrl, customUrlInfo] = useStore(\"api.customUrl\");\n\n    if (!customUrlInfo.hydrated) {\n      return;\n    }\n    const localUrl = \"http://localhost:42000\";\n    if (customUrl === localUrl) {\n      return;\n    }\n    /*\n        const isAlive = (await apiWithConfig.ping({ apiUrl: localUrl })).result;\n    \n        if (isAlive) {\n          setCustomUrl(localUrl);\n          // NB: Hardcoded?\n          setAuthToken(\"xwjkfycqhakpudymxmysxlei\");\n          alert?.(\n            \"Connected to localhost\",\n            \"It seems your server is running locally, you're now connected. You can now interact with your local file system to apply prompts on your own knowledge base!\",\n            [\n              { text: \"Okay\", style: \"default\", onPress: () => router.reload() },\n              {\n                text: \"Undo\",\n                style: \"destructive\",\n                onPress: () => {\n                  setCustomUrl(null);\n                },\n              },\n            ]\n          );\n        }*/\n  };\n\n  useEffect(() => {\n    window.addEventListener(\"focus\", onFocus);\n    //   window.addEventListener(\"blur\", onBlur);\n    // Calls onFocus when the window first loads\n    onFocus();\n    // Specify how to clean up after this effect:\n    return () => {\n      window.removeEventListener(\"focus\", onFocus);\n      //  window.removeEventListener(\"blur\", onBlur);\n    };\n  }, []);\n}",
  "name": "useOnFocus",
  "slug": "use-on-focus",
  "parameters": [],
  "description": "",
  "returnType": {
    "rawType": "void",
    "typeCoverage": 0,
    "isArray": false,
    "isEnum": false,
    "isObject": false,
    "isPrimitive": false,
    "isEnumLiteral": false
  },
  "maxIndentationDepth": 9,
  "size": {
    "characters": 1443,
    "lines": 47,
    "bytes": 1443,
    "bytesPerCharacter": 1,
    "charactersPerLine": 31,
    "linesPerFile": 47,
    "numberOfFiles": 1
  },
  "id": "dhmzpnhyqfguvcmazryjsdyk"
}