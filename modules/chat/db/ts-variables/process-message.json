{
  "createdAt": 1678862260835,
  "updatedAt": 1678862260835,
  "deletedAt": 0,
  "createdFirstAt": 1678862260835,
  "classification": "const",
  "comments": [],
  "isExported": true,
  "name": "processMessage",
  "slug": "process-message",
  "operationRelativeTypescriptFilePath": "src/processMessage.ts",
  "type": {
    "rawType": "(config: { newUsersAmount?: number | undefined; person: import(\"/Users/clarity/os/operations/tools/purpose/p2p/peer-types/build/person/Person\").Person; finalAssistantPersona: import(\"/Users/clarity/os/operations/tools/purpose/p2p/peer-types/build/Persona\").FinalAssistantPersona; message: string; isFirstMessage?: boolean | undefined; isFreeMessage?: boolean | undefined; }) => Promise<{ isSuccessful: boolean; message?: string | undefined; responseMessage?: string | undefined; }>",
    "typeDefinition": {
      "type": "object",
      "properties": {},
      "optional": false
    },
    "typeCoverage": 0,
    "isArray": false,
    "isEnum": false,
    "isObject": true,
    "isPrimitive": false,
    "isEnumLiteral": false,
    "simplifiedSchema": {
      "properties": [],
      "type": "object"
    }
  },
  "value": "async (config: {\n  newUsersAmount?: number;\n  person: Person;\n  finalAssistantPersona: FinalAssistantPersona;\n  message: string;\n  /**\n   * Should be true if the person didn't exist before.\n   */\n  isFirstMessage?: boolean;\n  isFreeMessage?: boolean;\n}): Promise<{\n  isSuccessful: boolean;\n  message?: string;\n  responseMessage?: string;\n}> => {\n  const {\n    message,\n    person,\n    finalAssistantPersona,\n    isFirstMessage,\n    newUsersAmount,\n  } = config;\n\n  //4) store message in db\n  const chatMessage: Creation<ChatMessage> = {\n    personId: person.id,\n    personaId: finalAssistantPersona.id,\n    direction: \"received\",\n    // groupSlug?: string;\n    createdAt: Date.now(),\n    message,\n  };\n\n  // NB: this function takes maximum 10 seconds to return, but still executesthe after function afterwards.\n  const { isTimedOut, result } = await runFunctionWithTimeout<ChatReturnType>(\n    () =>\n      generateInstantResponseMessage(\n        chatMessage,\n        person,\n        finalAssistantPersona,\n        {\n          isFirstMessage,\n          newUsersAmount,\n        }\n      ),\n    10000,\n    (result, isTimedOut) =>\n      processMessageAfterChat({\n        isTimedOut,\n        instantResponse: result,\n        person,\n        persona: finalAssistantPersona,\n        chatMessage,\n        isFreeMessage: config.isFreeMessage,\n      })\n  );\n\n  if (isTimedOut) {\n    return { isSuccessful: true, message: \"No response because it timed out\" };\n  }\n\n  if (!result) {\n    return {\n      isSuccessful: false,\n      message: \"No timeout, yet no result. Shouldn't happen!\",\n    };\n  }\n\n  return {\n    responseMessage: result.chatResponse,\n    isSuccessful: true,\n    message: \"Processed and reply gathered\",\n  };\n}",
  "description": "All logic to process a general purpose message. This can be antying like a WhatsApp message, an email, an SMS, literally any form of communication between you (persona) and a person.",
  "id": "nqtyknvirsyyxcvimjrllndl"
}