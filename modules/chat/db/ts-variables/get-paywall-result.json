{
  "createdAt": 1678862252215,
  "updatedAt": 1678862252215,
  "deletedAt": 0,
  "createdFirstAt": 1678862252215,
  "classification": "const",
  "comments": [],
  "isExported": true,
  "name": "getPaywallResult",
  "slug": "get-paywall-result",
  "operationRelativeTypescriptFilePath": "src/getPaywallResult.ts",
  "type": {
    "rawType": "(chatMessage: any, history: import(\"/Users/clarity/os/operations/tools/purpose/social-media/social-media-types/build/ChatMessage\").ChatMessage[], person: import(\"/Users/clarity/os/operations/tools/purpose/p2p/peer-types/build/person/Person\").Person, persona: import(\"/Users/clarity/os/operations/tools/purpose/p2p/peer-types/build/Persona\").FinalAssistantPersona, config: { isFirstMessage?: boolean | undefined; newUsersAmount?: number | undefined; }) => Promise<{ isSuccessful: boolean; message?: string | undefined; isPaywallHit: boolean; tokensUsed?: number | undefined; chatResponse?: string | undefined; }>",
    "typeDefinition": {
      "type": "object",
      "properties": {},
      "optional": false
    },
    "typeCoverage": 0,
    "isArray": false,
    "isEnum": false,
    "isObject": true,
    "isPrimitive": false,
    "isEnumLiteral": false,
    "simplifiedSchema": {
      "properties": [],
      "type": "object"
    }
  },
  "value": "async (\n  chatMessage: Creation<ChatMessage>,\n  history: ChatMessage[],\n  person: Person,\n  persona: FinalAssistantPersona,\n  config: { isFirstMessage?: boolean; newUsersAmount?: number }\n): Promise<{\n  isSuccessful: boolean;\n  message?: string;\n  isPaywallHit: boolean;\n  tokensUsed?: number;\n  chatResponse?: string;\n}> => {\n  const t = persona.assistantState.translations;\n  //if you ask for \"credit\"\n  const askForCredit = chatMessage.message.toLowerCase() === \"credit\";\n\n  const { freeMessagesAmount, tooManyDau, dailyActiveUsers } =\n    getMessageLimitInfo(person, persona);\n\n  // If credit is lower than `-1` when messages comes in,\n  const insufficientCredit =\n    (person.credit || 0) <= getMinimumCredit(persona, freeMessagesAmount);\n\n  // TODO: add these translations too\n\n  const tooManyDauMaxVips =\n    persona.assistantState?.dauLimitVip &&\n    persona.assistantState.minimumCreditVip\n      ? `VIP users allowed (deposit minimum: €${persona.assistantState?.minimumCreditVip}): ${persona.assistantState?.dauLimitVip} users`\n      : \"\";\n\n  const tooManyDauMaxPaid = persona.assistantState?.dauLimitPaid\n    ? `Paid users allowed: ${persona.assistantState?.dauLimitPaid} users`\n    : \"\";\n\n  const tooManyDauMaxFree = persona.assistantState?.dauLimit\n    ? `Free users allowed: ${persona.assistantState?.dauLimit} users`\n    : \"\";\n\n  const tooManyDauMessage = translate(t.tooManyDau, {\n    dailyActiveUsers: String(dailyActiveUsers),\n    tooManyDauMaxVips,\n    tooManyDauMaxPaid,\n    tooManyDauMaxFree,\n  });\n\n  const isNewUserLimit =\n    config.newUsersAmount &&\n    persona.assistantState?.maximumNewUsersPerDay &&\n    config.isFirstMessage\n      ? config.newUsersAmount > persona.assistantState.maximumNewUsersPerDay\n      : false;\n\n  if (!isNewUserLimit && !askForCredit && !insufficientCredit && !tooManyDau) {\n    return {\n      isSuccessful: true,\n      isPaywallHit: false,\n    };\n  }\n\n  const lastSentMessage = [...history]\n    .reverse()\n    .find((x) => x.direction === \"sent\");\n\n  const paywallMessageCreatedAt = lastSentMessage?.isPaywallMessage\n    ? lastSentMessage.createdAt\n    : undefined;\n\n  const tooSoonPaywallMessage = paywallMessageCreatedAt\n    ? Date.now() - paywallMessageCreatedAt < 86400000\n    : false;\n\n  if (tooSoonPaywallMessage) {\n    return {\n      isSuccessful: false,\n      isPaywallHit: true,\n      message: \"You already hit the paywall less than a day ago\",\n    };\n  }\n\n  const paymentReason: PaymentMetadata[\"paymentReason\"] = isNewUserLimit\n    ? \"whatsapp-new-user-limit\"\n    : askForCredit\n    ? \"whatsapp-ask-for-credit\"\n    : tooManyDau\n    ? \"whatsapp-too-many-dau\"\n    : \"whatsapp-insufficient-credit\";\n\n  const customSuccessMessage = translate(t.paymentSuccessMessage);\n\n  const [cheapPaymentUrl, expensivePaymentUrl] = await Promise.all([\n    createNewStripePayment({\n      person,\n      persona,\n      paymentReason,\n      customSuccessMessage,\n    }),\n\n    createNewStripePayment({\n      person,\n      persona,\n      productName: \"Clarity Credit\",\n      defaultQuantity: 10,\n      isQuantityEditable: true,\n      paymentReason,\n      customSuccessMessage,\n    }),\n  ]);\n\n  if (!cheapPaymentUrl || !expensivePaymentUrl) {\n    return {\n      isSuccessful: false,\n      isPaywallHit: true,\n      message: \"Generating payment links went wrong\",\n    };\n  }\n\n  const messagesAmountCheap = getMessagesAmountCheap(persona);\n  const messagesAmountMore = getMessagesAmountMore(persona);\n\n  const cheaperFactor =\n    Math.round(\n      (messagesAmountMore /\n        messagesAmountCheap /\n        (expensivePayment / cheapPayment)) *\n        100\n    ) / 100;\n\n  const insufficientMessage = translate(t.paywallInsufficientMessage);\n\n  const newUserLimitMessage = translate(t.paywallNewUserLimitMessage);\n\n  const creditMessage = translate(t.paywallCreditStatus, {\n    credit: String(person.credit || 0),\n  });\n\n  const reasonMessage = insufficientCredit\n    ? insufficientMessage\n    : tooManyDau\n    ? tooManyDauMessage\n    : isNewUserLimit\n    ? newUserLimitMessage\n    : creditMessage;\n\n  const localPrice = `€5,00`;\n\n  const websiteUrl = \"https://chat.findclarity.ai\";\n\n  const chatResponse = translate(t.paywallMessage, {\n    name: person.name,\n    reasonMessage,\n    messagesAmountMore,\n    localPrice,\n    expensivePaymentUrl,\n    messagesAmountCheap,\n    cheaperFactor,\n    cheapPaymentUrl,\n    websiteUrl,\n  });\n\n  return {\n    isPaywallHit: true,\n    isSuccessful: true,\n    tokensUsed: 0,\n    message: \"Credit deposit required\",\n    chatResponse,\n  };\n}",
  "description": "",
  "id": "fzlexdtnbtxwkuxawgkfbkou"
}