{
  "createdAt": 1678862243774,
  "updatedAt": 1678862243774,
  "deletedAt": 0,
  "createdFirstAt": 1678862243774,
  "classification": "const",
  "comments": [],
  "isExported": true,
  "name": "generateInstantResponseMessage",
  "slug": "generate-instant-response-message",
  "operationRelativeTypescriptFilePath": "src/generateInstantResponseMessage.ts",
  "type": {
    "rawType": "(chatMessage: any, person: import(\"/Users/clarity/os/operations/tools/purpose/p2p/peer-types/build/person/Person\").Person, persona: import(\"/Users/clarity/os/operations/tools/purpose/p2p/peer-types/build/Persona\").FinalAssistantPersona, config: { isFirstMessage?: boolean | undefined; newUsersAmount?: number | undefined; }) => Promise<import(\"/Users/clarity/os/operations/tools/control-web/openai-wrapper/build/chat\").ChatReturnType>",
    "typeDefinition": {
      "type": "object",
      "properties": {},
      "optional": false
    },
    "typeCoverage": 0,
    "isArray": false,
    "isEnum": false,
    "isObject": true,
    "isPrimitive": false,
    "isEnumLiteral": false,
    "simplifiedSchema": {
      "properties": [],
      "type": "object"
    }
  },
  "value": "async (\n  chatMessage: Creation<ChatMessage>,\n  person: Person,\n  persona: FinalAssistantPersona,\n  config: { isFirstMessage?: boolean; newUsersAmount?: number }\n): Promise<ChatReturnType> => {\n  const t = persona.assistantState.translations;\n\n  // PART 1: commands (assistant-agnostic)\n  const commandMessage = await commandResult(chatMessage, person, persona);\n  if (commandMessage) {\n    return {\n      isSuccessful: true,\n      chatResponse: commandMessage,\n      tokensUsed: 0,\n    };\n  }\n\n  // get all history, including the new message\n  const fullMessageHistory = await getChatMessages(\n    person.slug,\n    persona.slug,\n    Date.now() - 86400000\n  );\n\n  console.log(`Historical messages found: ${fullMessageHistory.length}`);\n\n  // PART 2: paywall (assistant-agnostic)\n  const paywallResult = await getPaywallResult(\n    chatMessage,\n    fullMessageHistory,\n    person,\n    persona,\n    config\n  );\n\n  if (paywallResult.isPaywallHit) {\n    return paywallResult;\n  }\n\n  // const analysis = await getChatMessageAnalysis(chatMessage.message);\n  // console.log({ analysis: analysis.chatResponse });\n  // TODO: this part should be its own function... shares code with `proactiveOutreach`...\n  // generateResponse(history)?\n\n  // PART 3: truncation. assistant-agnostic, for now.\n  const { truncatedMessageHistory, inputTokensCalculated } =\n    truncateMessages(fullMessageHistory);\n\n  // PART 4: assistant-specific part!\n\n  const chatResult = await getChatResult({\n    person,\n    persona,\n    truncatedMessageHistory,\n    fullMessageHistory,\n    inputTokensCalculated,\n    chatMessage,\n  });\n\n  // PART 5: message addition (assistant-agnostic)\n\n  if (config.isFirstMessage) {\n    const initialTermsMessage = translate(t.firstMessage, {\n      personaName: persona.name,\n      freeMessagesAmount: String(\n        getMessageLimitInfo(person, persona).freeMessagesAmount\n      ),\n      pricePerMessage: `${getCostPerMessageCredit(persona) * 100} cents`,\n    });\n\n    chatResult.chatResponse = chatResult.chatResponse\n      ? `\n${initialTermsMessage}\n---\n${translate(t.firstMessagePrefix)}\n${chatResult.chatResponse}`\n      : initialTermsMessage;\n  }\n\n  if (!chatResult.isSuccessful) {\n    console.log({ chatResult });\n  }\n\n  return chatResult;\n}",
  "description": "Based on a new incoming message and the found model instances, an instant response can be sent back.\n\nIf not, just return undefined.",
  "id": "ezfdydptkogzwwqwyhwaccig"
}