{
  "createdAt": 1678331996335,
  "updatedAt": 1678331996335,
  "deletedAt": 0,
  "createdFirstAt": 1678331996335,
  "classification": "const",
  "comments": [],
  "isExported": true,
  "name": "loginWithEmailOrPhone",
  "slug": "login-with-email-or-phone",
  "operationRelativeTypescriptFilePath": "src/loginWithEmailOrPhone.ts",
  "type": {
    "rawType": "{ (emailOrPhone: string): Promise<{ isSuccessful: boolean; message?: string | undefined; emailOrPhone?: string | undefined; }>; config: { isPublic: boolean; }; }",
    "typeDefinition": {
      "type": "object",
      "properties": {
        "config": {
          "type": "object",
          "properties": {
            "isPublic": {
              "type": "boolean"
            }
          },
          "required": [
            "isPublic"
          ]
        }
      },
      "required": [
        "config"
      ],
      "optional": false
    },
    "typeCoverage": 0,
    "isArray": false,
    "isEnum": false,
    "isObject": true,
    "isPrimitive": false,
    "isEnumLiteral": false,
    "simplifiedSchema": {
      "properties": [
        {
          "name": "config",
          "required": true,
          "schema": {
            "properties": [
              {
                "name": "isPublic",
                "required": true,
                "schema": {
                  "type": "boolean"
                }
              }
            ],
            "type": "object"
          }
        }
      ],
      "type": "object"
    }
  },
  "value": "async (\n  emailOrPhone: string\n): Promise<{\n  isSuccessful: boolean;\n  message?: string;\n  emailOrPhone?: string;\n}> => {\n  const email = isEmail(emailOrPhone) ? emailOrPhone : undefined;\n\n  const phoneNumber =\n    !isEmail(emailOrPhone) && isPhoneNumber(emailOrPhone)\n      ? emailOrPhone\n      : undefined;\n\n  if (!email && !phoneNumber) {\n    return {\n      isSuccessful: false,\n      message: \"Please fill in a valid email or phone number\",\n    };\n  }\n\n  const foundPerson = (await db.get(\"Person\")).find((x) => {\n    if (email) {\n      return x.email === email;\n    }\n\n    if (phoneNumber) {\n      return x.phoneNumber === phoneNumber;\n    }\n    return false;\n  });\n\n  if (!foundPerson) {\n    return {\n      isSuccessful: false,\n      message: \"Could not find anyone with that email/phone\",\n    };\n  }\n\n  const otpCode: string = String(\n    Math.round(Math.random() * 900000 + 100000 - 1)\n  );\n\n  const authentication: Person[\"authentication\"] = email\n    ? { emailOtp: otpCode, emailOtpAt: Date.now() }\n    : phoneNumber\n    ? {\n        phoneNumberOtp: otpCode,\n        phoneNumberOtpAt: Date.now(),\n      }\n    : undefined;\n\n  const updateResult = await db.update(\n    \"Person\",\n    (item) => item.id === foundPerson.id,\n    (item) => ({\n      ...item,\n      authentication: { ...item.authentication, ...authentication },\n    })\n  );\n\n  if (email) {\n    await sendMail({\n      to: email,\n      subject: \"Your login code\",\n      text: `Please login with this code: \"${otpCode}\"`,\n    });\n  }\n\n  if (phoneNumber) {\n    await sendSms({\n      to: phoneNumber,\n      body: `Please login with this code: \"${otpCode}\"`,\n    });\n  }\n\n  return {\n    isSuccessful: true,\n    emailOrPhone,\n    message: `Please login with the code you received via ${\n      email ? \"email\" : \"sms\"\n    }`,\n  };\n}",
  "description": "Login with phone or email",
  "id": "ldoyrjedpjtfrftktedposuq"
}