{
  "createdAt": 1678331999021,
  "updatedAt": 1678331999021,
  "deletedAt": 0,
  "createdFirstAt": 1678331999021,
  "classification": "const",
  "comments": [],
  "isExported": true,
  "name": "logoutWithContext",
  "slug": "logout-with-context",
  "operationRelativeTypescriptFilePath": "src/logoutWithContext.ts",
  "type": {
    "rawType": "{ (functionContext: import(\"/Users/clarity/os/operations/tools/purpose/codebase-introspection/functions/function-types/build/FunctionContext\").FunctionContext, rememberAuthentication?: boolean | undefined): unknown; config: { isPublic: boolean; }; }",
    "typeDefinition": {
      "type": "object",
      "properties": {
        "config": {
          "type": "object",
          "properties": {
            "isPublic": {
              "type": "boolean"
            }
          },
          "required": [
            "isPublic"
          ]
        }
      },
      "required": [
        "config"
      ],
      "optional": false
    },
    "typeCoverage": 0,
    "isArray": false,
    "isEnum": false,
    "isObject": true,
    "isPrimitive": false,
    "isEnumLiteral": false,
    "simplifiedSchema": {
      "properties": [
        {
          "name": "config",
          "required": true,
          "schema": {
            "properties": [
              {
                "name": "isPublic",
                "required": true,
                "schema": {
                  "type": "boolean"
                }
              }
            ],
            "type": "object"
          }
        }
      ],
      "type": "object"
    }
  },
  "value": "async (\n  functionContext: FunctionContext,\n  rememberAuthentication?: boolean\n) => {\n  const { device } = functionContext;\n\n  if (!device.personIds || !device.currentPersonId) {\n    return { isSuccessful: false, message: \"You were already logged out\" };\n  }\n\n  const newPersonIds = rememberAuthentication\n    ? device.personIds\n    : device.personIds.filter((id) => id !== device.currentPersonId);\n\n  // remove the person from the device, optionally moving the auth on the device again, so you can easily login again.\n\n  const updateResult = await db.update(\n    \"Device\",\n    (item) => item.id === device.id,\n    (old) => {\n      return {\n        ...old,\n        personIds: newPersonIds,\n        currentPersonId: newPersonIds.find((x) => x !== device.currentPersonId),\n      };\n    }\n  );\n\n  return {\n    isSuccessful: updateResult.isSuccesful,\n    message: updateResult.isSuccesful\n      ? \"Logged out\"\n      : updateResult.message ||\n        \"Something went wrong (No updateResult message)\",\n  };\n}",
  "description": "Uses cookies (https://serverjs.io/documentation/reply/#cookie-) to logout\n\nNeeded for having `authToken` with GET as well in a safe manner (e.g. for images)",
  "id": "iegbsmflzwznvffsnneizljo"
}