{
  "createdAt": 1678331541389,
  "updatedAt": 1678331541389,
  "deletedAt": 0,
  "createdFirstAt": 1678331541389,
  "isApiExposed": false,
  "isExported": true,
  "operationRelativeTypescriptFilePath": "src/FoldersPiece.tsx",
  "commentsInside": [],
  "rawText": " (props: {\n  explorableBasePathsActive?: {\n    href: string;\n    isActive: boolean;\n    projectRelativePath: string;\n    name: string;\n  }[];\n\n  isFolder?: boolean;\n  queryPath: string;\n  filename?: string;\n}) => {\n  const { explorableBasePathsActive, isFolder, queryPath, filename } = props;\n\n  const firstActiveProjectRelativePath = explorableBasePathsActive?.find(\n    (x) => x.isActive\n  )?.projectRelativePath;\n  const queryFolderPath = isFolder\n    ? queryPath\n    : (getFolderJs(queryPath) as string | undefined);\n\n  /**\n   * relative path, down from the closest basepath\n   */\n  const closestBasePathFolderPath =\n    queryFolderPath && firstActiveProjectRelativePath !== undefined\n      ? makeRelative(queryFolderPath, firstActiveProjectRelativePath)\n      : undefined;\n\n  const folderChunks = closestBasePathFolderPath\n    ? closestBasePathFolderPath.split(\"/\")\n    : [];\n\n  // console.log({\n  //   explorableBasePathsActive,\n  //   isFolder,\n  //   queryPath,\n  //   filename,\n  //   kdkkdkd: true,\n  //   queryFolderPath,\n  //   firstActiveProjectRelativePath,\n  //   closestBasePathFolderPath,\n  //   folderChunks,\n  // });\n\n  /**\n   * Renders the folders after the basePath we are in, up until the folder we are now\n   */\n  const foldersPiece = folderChunks?.map((folder, index, array) => {\n    const isActive =\n      index === array.length - 1 &&\n      (!filename || filename?.toLowerCase() === \"readme.md\");\n    const pathUntilHere = array.slice(0, index + 1).join(\"/\");\n    return (\n      <NavButton\n        key={`foldersPiece.${folder}`}\n        isActive={isActive}\n        href={`/${pathUntilHere}`}\n        title={`${index === array.length - 1 ? \"‣\" : \"▾\"} ${folder}`}\n      />\n    );\n  });\n\n  return <>{foldersPiece}</>;\n}",
  "name": "FoldersPiece",
  "slug": "folders-piece",
  "parameters": [
    {
      "name": "props",
      "schema": {
        "type": "object",
        "properties": {
          "explorableBasePathsActive": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "href": {
                  "type": "string"
                },
                "isActive": {
                  "type": "boolean"
                },
                "projectRelativePath": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                }
              },
              "required": [
                "href",
                "isActive",
                "projectRelativePath",
                "name"
              ],
              "additionalProperties": false
            }
          },
          "isFolder": {
            "type": "boolean"
          },
          "queryPath": {
            "type": "string"
          },
          "filename": {
            "type": "string"
          }
        },
        "required": [
          "queryPath"
        ],
        "additionalProperties": false
      },
      "simplifiedSchema": {
        "properties": [
          {
            "name": "explorableBasePathsActive",
            "required": false,
            "schema": {
              "items": [
                {
                  "schema": {
                    "properties": [
                      {
                        "name": "href",
                        "required": true,
                        "schema": {
                          "type": "string"
                        }
                      },
                      {
                        "name": "isActive",
                        "required": true,
                        "schema": {
                          "type": "boolean"
                        }
                      },
                      {
                        "name": "projectRelativePath",
                        "required": true,
                        "schema": {
                          "type": "string"
                        }
                      },
                      {
                        "name": "name",
                        "required": true,
                        "schema": {
                          "type": "string"
                        }
                      }
                    ],
                    "type": "object"
                  },
                  "name": null
                }
              ],
              "type": "array"
            }
          },
          {
            "name": "isFolder",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "queryPath",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filename",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "type": "object"
      },
      "required": true
    }
  ],
  "description": "",
  "returnType": {
    "rawType": "JSX.Element",
    "typeDefinition": {
      "optional": false,
      "$ref": "#/definitions/JSX.Element"
    },
    "typeCoverage": 0,
    "isArray": false,
    "isEnum": false,
    "isObject": true,
    "isPrimitive": false,
    "isEnumLiteral": false
  },
  "maxIndentationDepth": 4,
  "size": {
    "characters": 1742,
    "lines": 65,
    "bytes": 1746,
    "bytesPerCharacter": 1.002296211251435,
    "charactersPerLine": 27,
    "linesPerFile": 65,
    "numberOfFiles": 1
  },
  "id": "monvbastagvvfxxcdjrnkgbq"
}