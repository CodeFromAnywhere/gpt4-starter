{
  "createdAt": 1678331561091,
  "updatedAt": 1678331561091,
  "deletedAt": 0,
  "createdFirstAt": 1678331561091,
  "isApiExposed": false,
  "isExported": true,
  "operationRelativeTypescriptFilePath": "src/SettingsPage.tsx",
  "commentsInside": [],
  "rawText": " () => {\n  const { isOffline } = usePing();\n  const [authToken] = useStore(\"api.authToken\");\n  const [customUrl, __, { hydrated: apiHydrated }] = useStore(\"api.customUrl\");\n  const [config, _, { hydrated }] = useStore(\"explorer.config\");\n\n  return (\n    <Div className=\"max-lg:mx-4 lg:mx-20\">\n      {hydrated && apiHydrated ? (\n        <Div>\n          {isOffline ? (\n            <P className=\"text-red-500\">\n              The API cannot be found, please set the API to your homeserver if\n              you have it\n            </P>\n          ) : null}\n          <FunctionForm\n            tsFunction={SetConfigIndex}\n            initialValues={[\n              customUrl,\n              config.disableAdmin,\n              config.customProjectRelativeBasePaths,\n            ]}\n            submitFunction={setConfig}\n            withResult={() => {\n              showStandardResponse({ isSuccessful: true, message: \"Updated\" });\n            }}\n          />\n          <P>\n            <ALink href=\"/database/Persona\">\n              Setup your API Keys and other custom settings\n            </ALink>\n          </P>\n\n          <P>\n            Your API key (be careful):\n            <Input className={inputClass} value={`${authToken}`} />\n          </P>\n\n          <P>\n            Current API address (edit above):\n            <Input className={inputClass} value={`${apiUrl}`} />\n          </P>\n\n          <QueueStatusComponent />\n        </Div>\n      ) : (\n        <FancyLoader />\n      )}\n    </Div>\n  );\n}",
  "name": "SettingsPage",
  "slug": "settings-page",
  "parameters": [],
  "description": "",
  "returnType": {
    "rawType": "JSX.Element",
    "typeDefinition": {
      "optional": false,
      "$ref": "#/definitions/JSX.Element"
    },
    "typeCoverage": 0,
    "isArray": false,
    "isEnum": false,
    "isObject": true,
    "isPrimitive": false,
    "isEnumLiteral": false
  },
  "maxIndentationDepth": 7,
  "size": {
    "characters": 1497,
    "lines": 52,
    "bytes": 1497,
    "bytesPerCharacter": 1,
    "charactersPerLine": 29,
    "linesPerFile": 52,
    "numberOfFiles": 1
  },
  "id": "razhrfzqrqnnlwdmlibmrnqe"
}